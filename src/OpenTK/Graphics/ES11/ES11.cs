//
// The Open Toolkit Library License
//
// Copyright (c) 2006 - 2015 Stefanos Apostolopoulos for the Open Toolkit Library
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights to
// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
// the Software, and to permit persons to whom the Software is furnished to do
// so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
// OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
// WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
// OTHER DEALINGS IN THE SOFTWARE.
//



namespace OpenTK.Graphics.ES11
{
    using System;
    using System.Text;
    using System.Runtime.InteropServices;
    using OpenTK.Mathematics;
    #pragma warning disable 1591
    #pragma warning disable 1572
    #pragma warning disable 1573
    #pragma warning disable 626

    partial class GL
    {
        static GL()
        {
            EntryPointNames = new byte[]
            {
                103, 108, 65, 99, 99, 117, 109, 120, 79, 69, 83, 0,
                103, 108, 65, 99, 116, 105, 118, 101, 84, 101, 120, 116, 117, 114, 101, 0,
                103, 108, 65, 108, 112, 104, 97, 70, 117, 110, 99, 0,
                103, 108, 65, 108, 112, 104, 97, 70, 117, 110, 99, 120, 0,
                103, 108, 65, 108, 112, 104, 97, 70, 117, 110, 99, 120, 79, 69, 83, 0,
                103, 108, 66, 105, 110, 100, 66, 117, 102, 102, 101, 114, 0,
                103, 108, 66, 105, 110, 100, 70, 114, 97, 109, 101, 98, 117, 102, 102, 101, 114, 79, 69, 83, 0,
                103, 108, 66, 105, 110, 100, 82, 101, 110, 100, 101, 114, 98, 117, 102, 102, 101, 114, 79, 69, 83, 0,
                103, 108, 66, 105, 110, 100, 84, 101, 120, 116, 117, 114, 101, 0,
                103, 108, 66, 105, 110, 100, 86, 101, 114, 116, 101, 120, 65, 114, 114, 97, 121, 79, 69, 83, 0,
                103, 108, 66, 105, 116, 109, 97, 112, 120, 79, 69, 83, 0,
                103, 108, 66, 108, 101, 110, 100, 67, 111, 108, 111, 114, 120, 79, 69, 83, 0,
                103, 108, 66, 108, 101, 110, 100, 69, 113, 117, 97, 116, 105, 111, 110, 69, 88, 84, 0,
                103, 108, 66, 108, 101, 110, 100, 69, 113, 117, 97, 116, 105, 111, 110, 79, 69, 83, 0,
                103, 108, 66, 108, 101, 110, 100, 69, 113, 117, 97, 116, 105, 111, 110, 83, 101, 112, 97, 114, 97, 116, 101, 79, 69, 83, 0,
                103, 108, 66, 108, 101, 110, 100, 70, 117, 110, 99, 0,
                103, 108, 66, 108, 101, 110, 100, 70, 117, 110, 99, 83, 101, 112, 97, 114, 97, 116, 101, 79, 69, 83, 0,
                103, 108, 66, 117, 102, 102, 101, 114, 68, 97, 116, 97, 0,
                103, 108, 66, 117, 102, 102, 101, 114, 83, 117, 98, 68, 97, 116, 97, 0,
                103, 108, 67, 104, 101, 99, 107, 70, 114, 97, 109, 101, 98, 117, 102, 102, 101, 114, 83, 116, 97, 116, 117, 115, 79, 69, 83, 0,
                103, 108, 67, 108, 101, 97, 114, 0,
                103, 108, 67, 108, 101, 97, 114, 65, 99, 99, 117, 109, 120, 79, 69, 83, 0,
                103, 108, 67, 108, 101, 97, 114, 67, 111, 108, 111, 114, 0,
                103, 108, 67, 108, 101, 97, 114, 67, 111, 108, 111, 114, 120, 0,
                103, 108, 67, 108, 101, 97, 114, 67, 111, 108, 111, 114, 120, 79, 69, 83, 0,
                103, 108, 67, 108, 101, 97, 114, 68, 101, 112, 116, 104, 102, 0,
                103, 108, 67, 108, 101, 97, 114, 68, 101, 112, 116, 104, 102, 79, 69, 83, 0,
                103, 108, 67, 108, 101, 97, 114, 68, 101, 112, 116, 104, 120, 0,
                103, 108, 67, 108, 101, 97, 114, 68, 101, 112, 116, 104, 120, 79, 69, 83, 0,
                103, 108, 67, 108, 101, 97, 114, 83, 116, 101, 110, 99, 105, 108, 0,
                103, 108, 67, 108, 105, 101, 110, 116, 65, 99, 116, 105, 118, 101, 84, 101, 120, 116, 117, 114, 101, 0,
                103, 108, 67, 108, 105, 101, 110, 116, 87, 97, 105, 116, 83, 121, 110, 99, 65, 80, 80, 76, 69, 0,
                103, 108, 67, 108, 105, 112, 80, 108, 97, 110, 101, 102, 0,
                103, 108, 67, 108, 105, 112, 80, 108, 97, 110, 101, 102, 73, 77, 71, 0,
                103, 108, 67, 108, 105, 112, 80, 108, 97, 110, 101, 102, 79, 69, 83, 0,
                103, 108, 67, 108, 105, 112, 80, 108, 97, 110, 101, 120, 0,
                103, 108, 67, 108, 105, 112, 80, 108, 97, 110, 101, 120, 73, 77, 71, 0,
                103, 108, 67, 108, 105, 112, 80, 108, 97, 110, 101, 120, 79, 69, 83, 0,
                103, 108, 67, 111, 108, 111, 114, 51, 120, 79, 69, 83, 0,
                103, 108, 67, 111, 108, 111, 114, 51, 120, 118, 79, 69, 83, 0,
                103, 108, 67, 111, 108, 111, 114, 52, 102, 0,
                103, 108, 67, 111, 108, 111, 114, 52, 117, 98, 0,
                103, 108, 67, 111, 108, 111, 114, 52, 120, 0,
                103, 108, 67, 111, 108, 111, 114, 52, 120, 79, 69, 83, 0,
                103, 108, 67, 111, 108, 111, 114, 52, 120, 118, 79, 69, 83, 0,
                103, 108, 67, 111, 108, 111, 114, 77, 97, 115, 107, 0,
                103, 108, 67, 111, 108, 111, 114, 80, 111, 105, 110, 116, 101, 114, 0,
                103, 108, 67, 111, 109, 112, 114, 101, 115, 115, 101, 100, 84, 101, 120, 73, 109, 97, 103, 101, 50, 68, 0,
                103, 108, 67, 111, 109, 112, 114, 101, 115, 115, 101, 100, 84, 101, 120, 83, 117, 98, 73, 109, 97, 103, 101, 50, 68, 0,
                103, 108, 67, 111, 110, 118, 111, 108, 117, 116, 105, 111, 110, 80, 97, 114, 97, 109, 101, 116, 101, 114, 120, 79, 69, 83, 0,
                103, 108, 67, 111, 110, 118, 111, 108, 117, 116, 105, 111, 110, 80, 97, 114, 97, 109, 101, 116, 101, 114, 120, 118, 79, 69, 83, 0,
                103, 108, 67, 111, 112, 121, 84, 101, 120, 73, 109, 97, 103, 101, 50, 68, 0,
                103, 108, 67, 111, 112, 121, 84, 101, 120, 83, 117, 98, 73, 109, 97, 103, 101, 50, 68, 0,
                103, 108, 67, 111, 112, 121, 84, 101, 120, 116, 117, 114, 101, 76, 101, 118, 101, 108, 115, 65, 80, 80, 76, 69, 0,
                103, 108, 67, 117, 108, 108, 70, 97, 99, 101, 0,
                103, 108, 67, 117, 114, 114, 101, 110, 116, 80, 97, 108, 101, 116, 116, 101, 77, 97, 116, 114, 105, 120, 79, 69, 83, 0,
                103, 108, 68, 101, 98, 117, 103, 77, 101, 115, 115, 97, 103, 101, 67, 97, 108, 108, 98, 97, 99, 107, 0,
                103, 108, 68, 101, 98, 117, 103, 77, 101, 115, 115, 97, 103, 101, 67, 97, 108, 108, 98, 97, 99, 107, 75, 72, 82, 0,
                103, 108, 68, 101, 98, 117, 103, 77, 101, 115, 115, 97, 103, 101, 67, 111, 110, 116, 114, 111, 108, 0,
                103, 108, 68, 101, 98, 117, 103, 77, 101, 115, 115, 97, 103, 101, 67, 111, 110, 116, 114, 111, 108, 75, 72, 82, 0,
                103, 108, 68, 101, 98, 117, 103, 77, 101, 115, 115, 97, 103, 101, 73, 110, 115, 101, 114, 116, 0,
                103, 108, 68, 101, 98, 117, 103, 77, 101, 115, 115, 97, 103, 101, 73, 110, 115, 101, 114, 116, 75, 72, 82, 0,
                103, 108, 68, 101, 108, 101, 116, 101, 66, 117, 102, 102, 101, 114, 115, 0,
                103, 108, 68, 101, 108, 101, 116, 101, 70, 101, 110, 99, 101, 115, 78, 86, 0,
                103, 108, 68, 101, 108, 101, 116, 101, 70, 114, 97, 109, 101, 98, 117, 102, 102, 101, 114, 115, 79, 69, 83, 0,
                103, 108, 68, 101, 108, 101, 116, 101, 82, 101, 110, 100, 101, 114, 98, 117, 102, 102, 101, 114, 115, 79, 69, 83, 0,
                103, 108, 68, 101, 108, 101, 116, 101, 83, 121, 110, 99, 65, 80, 80, 76, 69, 0,
                103, 108, 68, 101, 108, 101, 116, 101, 84, 101, 120, 116, 117, 114, 101, 115, 0,
                103, 108, 68, 101, 108, 101, 116, 101, 86, 101, 114, 116, 101, 120, 65, 114, 114, 97, 121, 115, 79, 69, 83, 0,
                103, 108, 68, 101, 112, 116, 104, 70, 117, 110, 99, 0,
                103, 108, 68, 101, 112, 116, 104, 77, 97, 115, 107, 0,
                103, 108, 68, 101, 112, 116, 104, 82, 97, 110, 103, 101, 102, 0,
                103, 108, 68, 101, 112, 116, 104, 82, 97, 110, 103, 101, 102, 79, 69, 83, 0,
                103, 108, 68, 101, 112, 116, 104, 82, 97, 110, 103, 101, 120, 0,
                103, 108, 68, 101, 112, 116, 104, 82, 97, 110, 103, 101, 120, 79, 69, 83, 0,
                103, 108, 68, 105, 115, 97, 98, 108, 101, 0,
                103, 108, 68, 105, 115, 97, 98, 108, 101, 67, 108, 105, 101, 110, 116, 83, 116, 97, 116, 101, 0,
                103, 108, 68, 105, 115, 97, 98, 108, 101, 68, 114, 105, 118, 101, 114, 67, 111, 110, 116, 114, 111, 108, 81, 67, 79, 77, 0,
                103, 108, 68, 105, 115, 99, 97, 114, 100, 70, 114, 97, 109, 101, 98, 117, 102, 102, 101, 114, 69, 88, 84, 0,
                103, 108, 68, 114, 97, 119, 65, 114, 114, 97, 121, 115, 0,
                103, 108, 68, 114, 97, 119, 69, 108, 101, 109, 101, 110, 116, 115, 0,
                103, 108, 68, 114, 97, 119, 84, 101, 120, 102, 79, 69, 83, 0,
                103, 108, 68, 114, 97, 119, 84, 101, 120, 102, 118, 79, 69, 83, 0,
                103, 108, 68, 114, 97, 119, 84, 101, 120, 105, 79, 69, 83, 0,
                103, 108, 68, 114, 97, 119, 84, 101, 120, 105, 118, 79, 69, 83, 0,
                103, 108, 68, 114, 97, 119, 84, 101, 120, 115, 79, 69, 83, 0,
                103, 108, 68, 114, 97, 119, 84, 101, 120, 115, 118, 79, 69, 83, 0,
                103, 108, 68, 114, 97, 119, 84, 101, 120, 120, 79, 69, 83, 0,
                103, 108, 68, 114, 97, 119, 84, 101, 120, 120, 118, 79, 69, 83, 0,
                103, 108, 69, 71, 76, 73, 109, 97, 103, 101, 84, 97, 114, 103, 101, 116, 82, 101, 110, 100, 101, 114, 98, 117, 102, 102, 101, 114, 83, 116, 111, 114, 97, 103, 101, 79, 69, 83, 0,
                103, 108, 69, 71, 76, 73, 109, 97, 103, 101, 84, 97, 114, 103, 101, 116, 84, 101, 120, 116, 117, 114, 101, 50, 68, 79, 69, 83, 0,
                103, 108, 69, 110, 97, 98, 108, 101, 0,
                103, 108, 69, 110, 97, 98, 108, 101, 67, 108, 105, 101, 110, 116, 83, 116, 97, 116, 101, 0,
                103, 108, 69, 110, 97, 98, 108, 101, 68, 114, 105, 118, 101, 114, 67, 111, 110, 116, 114, 111, 108, 81, 67, 79, 77, 0,
                103, 108, 69, 110, 100, 84, 105, 108, 105, 110, 103, 81, 67, 79, 77, 0,
                103, 108, 69, 118, 97, 108, 67, 111, 111, 114, 100, 49, 120, 79, 69, 83, 0,
                103, 108, 69, 118, 97, 108, 67, 111, 111, 114, 100, 49, 120, 118, 79, 69, 83, 0,
                103, 108, 69, 118, 97, 108, 67, 111, 111, 114, 100, 50, 120, 79, 69, 83, 0,
                103, 108, 69, 118, 97, 108, 67, 111, 111, 114, 100, 50, 120, 118, 79, 69, 83, 0,
                103, 108, 69, 120, 116, 71, 101, 116, 66, 117, 102, 102, 101, 114, 80, 111, 105, 110, 116, 101, 114, 118, 81, 67, 79, 77, 0,
                103, 108, 69, 120, 116, 71, 101, 116, 66, 117, 102, 102, 101, 114, 115, 81, 67, 79, 77, 0,
                103, 108, 69, 120, 116, 71, 101, 116, 70, 114, 97, 109, 101, 98, 117, 102, 102, 101, 114, 115, 81, 67, 79, 77, 0,
                103, 108, 69, 120, 116, 71, 101, 116, 80, 114, 111, 103, 114, 97, 109, 66, 105, 110, 97, 114, 121, 83, 111, 117, 114, 99, 101, 81, 67, 79, 77, 0,
                103, 108, 69, 120, 116, 71, 101, 116, 80, 114, 111, 103, 114, 97, 109, 115, 81, 67, 79, 77, 0,
                103, 108, 69, 120, 116, 71, 101, 116, 82, 101, 110, 100, 101, 114, 98, 117, 102, 102, 101, 114, 115, 81, 67, 79, 77, 0,
                103, 108, 69, 120, 116, 71, 101, 116, 83, 104, 97, 100, 101, 114, 115, 81, 67, 79, 77, 0,
                103, 108, 69, 120, 116, 71, 101, 116, 84, 101, 120, 76, 101, 118, 101, 108, 80, 97, 114, 97, 109, 101, 116, 101, 114, 105, 118, 81, 67, 79, 77, 0,
                103, 108, 69, 120, 116, 71, 101, 116, 84, 101, 120, 83, 117, 98, 73, 109, 97, 103, 101, 81, 67, 79, 77, 0,
                103, 108, 69, 120, 116, 71, 101, 116, 84, 101, 120, 116, 117, 114, 101, 115, 81, 67, 79, 77, 0,
                103, 108, 69, 120, 116, 73, 115, 80, 114, 111, 103, 114, 97, 109, 66, 105, 110, 97, 114, 121, 81, 67, 79, 77, 0,
                103, 108, 69, 120, 116, 84, 101, 120, 79, 98, 106, 101, 99, 116, 83, 116, 97, 116, 101, 79, 118, 101, 114, 114, 105, 100, 101, 105, 81, 67, 79, 77, 0,
                103, 108, 70, 101, 101, 100, 98, 97, 99, 107, 66, 117, 102, 102, 101, 114, 120, 79, 69, 83, 0,
                103, 108, 70, 101, 110, 99, 101, 83, 121, 110, 99, 65, 80, 80, 76, 69, 0,
                103, 108, 70, 105, 110, 105, 115, 104, 0,
                103, 108, 70, 105, 110, 105, 115, 104, 70, 101, 110, 99, 101, 78, 86, 0,
                103, 108, 70, 108, 117, 115, 104, 0,
                103, 108, 70, 108, 117, 115, 104, 77, 97, 112, 112, 101, 100, 66, 117, 102, 102, 101, 114, 82, 97, 110, 103, 101, 69, 88, 84, 0,
                103, 108, 70, 111, 103, 102, 0,
                103, 108, 70, 111, 103, 102, 118, 0,
                103, 108, 70, 111, 103, 120, 0,
                103, 108, 70, 111, 103, 120, 79, 69, 83, 0,
                103, 108, 70, 111, 103, 120, 118, 0,
                103, 108, 70, 111, 103, 120, 118, 79, 69, 83, 0,
                103, 108, 70, 114, 97, 109, 101, 98, 117, 102, 102, 101, 114, 82, 101, 110, 100, 101, 114, 98, 117, 102, 102, 101, 114, 79, 69, 83, 0,
                103, 108, 70, 114, 97, 109, 101, 98, 117, 102, 102, 101, 114, 84, 101, 120, 116, 117, 114, 101, 50, 68, 77, 117, 108, 116, 105, 115, 97, 109, 112, 108, 101, 69, 88, 84, 0,
                103, 108, 70, 114, 97, 109, 101, 98, 117, 102, 102, 101, 114, 84, 101, 120, 116, 117, 114, 101, 50, 68, 77, 117, 108, 116, 105, 115, 97, 109, 112, 108, 101, 73, 77, 71, 0,
                103, 108, 70, 114, 97, 109, 101, 98, 117, 102, 102, 101, 114, 84, 101, 120, 116, 117, 114, 101, 50, 68, 79, 69, 83, 0,
                103, 108, 70, 114, 111, 110, 116, 70, 97, 99, 101, 0,
                103, 108, 70, 114, 117, 115, 116, 117, 109, 102, 0,
                103, 108, 70, 114, 117, 115, 116, 117, 109, 102, 79, 69, 83, 0,
                103, 108, 70, 114, 117, 115, 116, 117, 109, 120, 0,
                103, 108, 70, 114, 117, 115, 116, 117, 109, 120, 79, 69, 83, 0,
                103, 108, 71, 101, 110, 66, 117, 102, 102, 101, 114, 115, 0,
                103, 108, 71, 101, 110, 101, 114, 97, 116, 101, 77, 105, 112, 109, 97, 112, 79, 69, 83, 0,
                103, 108, 71, 101, 110, 70, 101, 110, 99, 101, 115, 78, 86, 0,
                103, 108, 71, 101, 110, 70, 114, 97, 109, 101, 98, 117, 102, 102, 101, 114, 115, 79, 69, 83, 0,
                103, 108, 71, 101, 110, 82, 101, 110, 100, 101, 114, 98, 117, 102, 102, 101, 114, 115, 79, 69, 83, 0,
                103, 108, 71, 101, 110, 84, 101, 120, 116, 117, 114, 101, 115, 0,
                103, 108, 71, 101, 110, 86, 101, 114, 116, 101, 120, 65, 114, 114, 97, 121, 115, 79, 69, 83, 0,
                103, 108, 71, 101, 116, 66, 111, 111, 108, 101, 97, 110, 118, 0,
                103, 108, 71, 101, 116, 66, 117, 102, 102, 101, 114, 80, 97, 114, 97, 109, 101, 116, 101, 114, 105, 118, 0,
                103, 108, 71, 101, 116, 66, 117, 102, 102, 101, 114, 80, 111, 105, 110, 116, 101, 114, 118, 79, 69, 83, 0,
                103, 108, 71, 101, 116, 67, 108, 105, 112, 80, 108, 97, 110, 101, 102, 0,
                103, 108, 71, 101, 116, 67, 108, 105, 112, 80, 108, 97, 110, 101, 102, 79, 69, 83, 0,
                103, 108, 71, 101, 116, 67, 108, 105, 112, 80, 108, 97, 110, 101, 120, 0,
                103, 108, 71, 101, 116, 67, 108, 105, 112, 80, 108, 97, 110, 101, 120, 79, 69, 83, 0,
                103, 108, 71, 101, 116, 67, 111, 110, 118, 111, 108, 117, 116, 105, 111, 110, 80, 97, 114, 97, 109, 101, 116, 101, 114, 120, 118, 79, 69, 83, 0,
                103, 108, 71, 101, 116, 68, 101, 98, 117, 103, 77, 101, 115, 115, 97, 103, 101, 76, 111, 103, 0,
                103, 108, 71, 101, 116, 68, 101, 98, 117, 103, 77, 101, 115, 115, 97, 103, 101, 76, 111, 103, 75, 72, 82, 0,
                103, 108, 71, 101, 116, 68, 114, 105, 118, 101, 114, 67, 111, 110, 116, 114, 111, 108, 115, 81, 67, 79, 77, 0,
                103, 108, 71, 101, 116, 68, 114, 105, 118, 101, 114, 67, 111, 110, 116, 114, 111, 108, 83, 116, 114, 105, 110, 103, 81, 67, 79, 77, 0,
                103, 108, 71, 101, 116, 69, 114, 114, 111, 114, 0,
                103, 108, 71, 101, 116, 70, 101, 110, 99, 101, 105, 118, 78, 86, 0,
                103, 108, 71, 101, 116, 70, 105, 120, 101, 100, 118, 0,
                103, 108, 71, 101, 116, 70, 105, 120, 101, 100, 118, 79, 69, 83, 0,
                103, 108, 71, 101, 116, 70, 108, 111, 97, 116, 118, 0,
                103, 108, 71, 101, 116, 70, 114, 97, 109, 101, 98, 117, 102, 102, 101, 114, 65, 116, 116, 97, 99, 104, 109, 101, 110, 116, 80, 97, 114, 97, 109, 101, 116, 101, 114, 105, 118, 79, 69, 83, 0,
                103, 108, 71, 101, 116, 71, 114, 97, 112, 104, 105, 99, 115, 82, 101, 115, 101, 116, 83, 116, 97, 116, 117, 115, 69, 88, 84, 0,
                103, 108, 71, 101, 116, 72, 105, 115, 116, 111, 103, 114, 97, 109, 80, 97, 114, 97, 109, 101, 116, 101, 114, 120, 118, 79, 69, 83, 0,
                103, 108, 71, 101, 116, 73, 110, 116, 101, 103, 101, 114, 54, 52, 118, 65, 80, 80, 76, 69, 0,
                103, 108, 71, 101, 116, 73, 110, 116, 101, 103, 101, 114, 118, 0,
                103, 108, 71, 101, 116, 76, 105, 103, 104, 116, 102, 118, 0,
                103, 108, 71, 101, 116, 76, 105, 103, 104, 116, 120, 79, 69, 83, 0,
                103, 108, 71, 101, 116, 76, 105, 103, 104, 116, 120, 118, 0,
                103, 108, 71, 101, 116, 76, 105, 103, 104, 116, 120, 118, 79, 69, 83, 0,
                103, 108, 71, 101, 116, 77, 97, 112, 120, 118, 79, 69, 83, 0,
                103, 108, 71, 101, 116, 77, 97, 116, 101, 114, 105, 97, 108, 102, 118, 0,
                103, 108, 71, 101, 116, 77, 97, 116, 101, 114, 105, 97, 108, 120, 79, 69, 83, 0,
                103, 108, 71, 101, 116, 77, 97, 116, 101, 114, 105, 97, 108, 120, 118, 0,
                103, 108, 71, 101, 116, 77, 97, 116, 101, 114, 105, 97, 108, 120, 118, 79, 69, 83, 0,
                103, 108, 71, 101, 116, 110, 85, 110, 105, 102, 111, 114, 109, 102, 118, 69, 88, 84, 0,
                103, 108, 71, 101, 116, 110, 85, 110, 105, 102, 111, 114, 109, 105, 118, 69, 88, 84, 0,
                103, 108, 71, 101, 116, 79, 98, 106, 101, 99, 116, 76, 97, 98, 101, 108, 0,
                103, 108, 71, 101, 116, 79, 98, 106, 101, 99, 116, 76, 97, 98, 101, 108, 75, 72, 82, 0,
                103, 108, 71, 101, 116, 79, 98, 106, 101, 99, 116, 80, 116, 114, 76, 97, 98, 101, 108, 0,
                103, 108, 71, 101, 116, 79, 98, 106, 101, 99, 116, 80, 116, 114, 76, 97, 98, 101, 108, 75, 72, 82, 0,
                103, 108, 71, 101, 116, 80, 105, 120, 101, 108, 77, 97, 112, 120, 118, 0,
                103, 108, 71, 101, 116, 80, 111, 105, 110, 116, 101, 114, 118, 0,
                103, 108, 71, 101, 116, 80, 111, 105, 110, 116, 101, 114, 118, 75, 72, 82, 0,
                103, 108, 71, 101, 116, 82, 101, 110, 100, 101, 114, 98, 117, 102, 102, 101, 114, 80, 97, 114, 97, 109, 101, 116, 101, 114, 105, 118, 79, 69, 83, 0,
                103, 108, 71, 101, 116, 83, 116, 114, 105, 110, 103, 0,
                103, 108, 71, 101, 116, 83, 121, 110, 99, 105, 118, 65, 80, 80, 76, 69, 0,
                103, 108, 71, 101, 116, 84, 101, 120, 69, 110, 118, 102, 118, 0,
                103, 108, 71, 101, 116, 84, 101, 120, 69, 110, 118, 105, 118, 0,
                103, 108, 71, 101, 116, 84, 101, 120, 69, 110, 118, 120, 118, 0,
                103, 108, 71, 101, 116, 84, 101, 120, 69, 110, 118, 120, 118, 79, 69, 83, 0,
                103, 108, 71, 101, 116, 84, 101, 120, 71, 101, 110, 102, 118, 79, 69, 83, 0,
                103, 108, 71, 101, 116, 84, 101, 120, 71, 101, 110, 105, 118, 79, 69, 83, 0,
                103, 108, 71, 101, 116, 84, 101, 120, 71, 101, 110, 120, 118, 79, 69, 83, 0,
                103, 108, 71, 101, 116, 84, 101, 120, 76, 101, 118, 101, 108, 80, 97, 114, 97, 109, 101, 116, 101, 114, 120, 118, 79, 69, 83, 0,
                103, 108, 71, 101, 116, 84, 101, 120, 80, 97, 114, 97, 109, 101, 116, 101, 114, 102, 118, 0,
                103, 108, 71, 101, 116, 84, 101, 120, 80, 97, 114, 97, 109, 101, 116, 101, 114, 105, 118, 0,
                103, 108, 71, 101, 116, 84, 101, 120, 80, 97, 114, 97, 109, 101, 116, 101, 114, 120, 118, 0,
                103, 108, 71, 101, 116, 84, 101, 120, 80, 97, 114, 97, 109, 101, 116, 101, 114, 120, 118, 79, 69, 83, 0,
                103, 108, 72, 105, 110, 116, 0,
                103, 108, 73, 110, 100, 101, 120, 120, 79, 69, 83, 0,
                103, 108, 73, 110, 100, 101, 120, 120, 118, 79, 69, 83, 0,
                103, 108, 73, 110, 115, 101, 114, 116, 69, 118, 101, 110, 116, 77, 97, 114, 107, 101, 114, 69, 88, 84, 0,
                103, 108, 73, 115, 66, 117, 102, 102, 101, 114, 0,
                103, 108, 73, 115, 69, 110, 97, 98, 108, 101, 100, 0,
                103, 108, 73, 115, 70, 101, 110, 99, 101, 78, 86, 0,
                103, 108, 73, 115, 70, 114, 97, 109, 101, 98, 117, 102, 102, 101, 114, 79, 69, 83, 0,
                103, 108, 73, 115, 82, 101, 110, 100, 101, 114, 98, 117, 102, 102, 101, 114, 79, 69, 83, 0,
                103, 108, 73, 115, 83, 121, 110, 99, 65, 80, 80, 76, 69, 0,
                103, 108, 73, 115, 84, 101, 120, 116, 117, 114, 101, 0,
                103, 108, 73, 115, 86, 101, 114, 116, 101, 120, 65, 114, 114, 97, 121, 79, 69, 83, 0,
                103, 108, 76, 105, 103, 104, 116, 102, 0,
                103, 108, 76, 105, 103, 104, 116, 102, 118, 0,
                103, 108, 76, 105, 103, 104, 116, 77, 111, 100, 101, 108, 102, 0,
                103, 108, 76, 105, 103, 104, 116, 77, 111, 100, 101, 108, 102, 118, 0,
                103, 108, 76, 105, 103, 104, 116, 77, 111, 100, 101, 108, 120, 0,
                103, 108, 76, 105, 103, 104, 116, 77, 111, 100, 101, 108, 120, 79, 69, 83, 0,
                103, 108, 76, 105, 103, 104, 116, 77, 111, 100, 101, 108, 120, 118, 0,
                103, 108, 76, 105, 103, 104, 116, 77, 111, 100, 101, 108, 120, 118, 79, 69, 83, 0,
                103, 108, 76, 105, 103, 104, 116, 120, 0,
                103, 108, 76, 105, 103, 104, 116, 120, 79, 69, 83, 0,
                103, 108, 76, 105, 103, 104, 116, 120, 118, 0,
                103, 108, 76, 105, 103, 104, 116, 120, 118, 79, 69, 83, 0,
                103, 108, 76, 105, 110, 101, 87, 105, 100, 116, 104, 0,
                103, 108, 76, 105, 110, 101, 87, 105, 100, 116, 104, 120, 0,
                103, 108, 76, 105, 110, 101, 87, 105, 100, 116, 104, 120, 79, 69, 83, 0,
                103, 108, 76, 111, 97, 100, 73, 100, 101, 110, 116, 105, 116, 121, 0,
                103, 108, 76, 111, 97, 100, 77, 97, 116, 114, 105, 120, 102, 0,
                103, 108, 76, 111, 97, 100, 77, 97, 116, 114, 105, 120, 120, 0,
                103, 108, 76, 111, 97, 100, 77, 97, 116, 114, 105, 120, 120, 79, 69, 83, 0,
                103, 108, 76, 111, 97, 100, 80, 97, 108, 101, 116, 116, 101, 70, 114, 111, 109, 77, 111, 100, 101, 108, 86, 105, 101, 119, 77, 97, 116, 114, 105, 120, 79, 69, 83, 0,
                103, 108, 76, 111, 97, 100, 84, 114, 97, 110, 115, 112, 111, 115, 101, 77, 97, 116, 114, 105, 120, 120, 79, 69, 83, 0,
                103, 108, 76, 111, 103, 105, 99, 79, 112, 0,
                103, 108, 77, 97, 112, 49, 120, 79, 69, 83, 0,
                103, 108, 77, 97, 112, 50, 120, 79, 69, 83, 0,
                103, 108, 77, 97, 112, 66, 117, 102, 102, 101, 114, 79, 69, 83, 0,
                103, 108, 77, 97, 112, 66, 117, 102, 102, 101, 114, 82, 97, 110, 103, 101, 69, 88, 84, 0,
                103, 108, 77, 97, 112, 71, 114, 105, 100, 49, 120, 79, 69, 83, 0,
                103, 108, 77, 97, 112, 71, 114, 105, 100, 50, 120, 79, 69, 83, 0,
                103, 108, 77, 97, 116, 101, 114, 105, 97, 108, 102, 0,
                103, 108, 77, 97, 116, 101, 114, 105, 97, 108, 102, 118, 0,
                103, 108, 77, 97, 116, 101, 114, 105, 97, 108, 120, 0,
                103, 108, 77, 97, 116, 101, 114, 105, 97, 108, 120, 79, 69, 83, 0,
                103, 108, 77, 97, 116, 101, 114, 105, 97, 108, 120, 118, 0,
                103, 108, 77, 97, 116, 101, 114, 105, 97, 108, 120, 118, 79, 69, 83, 0,
                103, 108, 77, 97, 116, 114, 105, 120, 73, 110, 100, 101, 120, 80, 111, 105, 110, 116, 101, 114, 79, 69, 83, 0,
                103, 108, 77, 97, 116, 114, 105, 120, 77, 111, 100, 101, 0,
                103, 108, 77, 117, 108, 116, 105, 68, 114, 97, 119, 65, 114, 114, 97, 121, 115, 69, 88, 84, 0,
                103, 108, 77, 117, 108, 116, 105, 68, 114, 97, 119, 69, 108, 101, 109, 101, 110, 116, 115, 69, 88, 84, 0,
                103, 108, 77, 117, 108, 116, 105, 84, 101, 120, 67, 111, 111, 114, 100, 49, 98, 79, 69, 83, 0,
                103, 108, 77, 117, 108, 116, 105, 84, 101, 120, 67, 111, 111, 114, 100, 49, 98, 118, 79, 69, 83, 0,
                103, 108, 77, 117, 108, 116, 105, 84, 101, 120, 67, 111, 111, 114, 100, 49, 120, 79, 69, 83, 0,
                103, 108, 77, 117, 108, 116, 105, 84, 101, 120, 67, 111, 111, 114, 100, 49, 120, 118, 79, 69, 83, 0,
                103, 108, 77, 117, 108, 116, 105, 84, 101, 120, 67, 111, 111, 114, 100, 50, 98, 79, 69, 83, 0,
                103, 108, 77, 117, 108, 116, 105, 84, 101, 120, 67, 111, 111, 114, 100, 50, 98, 118, 79, 69, 83, 0,
                103, 108, 77, 117, 108, 116, 105, 84, 101, 120, 67, 111, 111, 114, 100, 50, 120, 79, 69, 83, 0,
                103, 108, 77, 117, 108, 116, 105, 84, 101, 120, 67, 111, 111, 114, 100, 50, 120, 118, 79, 69, 83, 0,
                103, 108, 77, 117, 108, 116, 105, 84, 101, 120, 67, 111, 111, 114, 100, 51, 98, 79, 69, 83, 0,
                103, 108, 77, 117, 108, 116, 105, 84, 101, 120, 67, 111, 111, 114, 100, 51, 98, 118, 79, 69, 83, 0,
                103, 108, 77, 117, 108, 116, 105, 84, 101, 120, 67, 111, 111, 114, 100, 51, 120, 79, 69, 83, 0,
                103, 108, 77, 117, 108, 116, 105, 84, 101, 120, 67, 111, 111, 114, 100, 51, 120, 118, 79, 69, 83, 0,
                103, 108, 77, 117, 108, 116, 105, 84, 101, 120, 67, 111, 111, 114, 100, 52, 98, 79, 69, 83, 0,
                103, 108, 77, 117, 108, 116, 105, 84, 101, 120, 67, 111, 111, 114, 100, 52, 98, 118, 79, 69, 83, 0,
                103, 108, 77, 117, 108, 116, 105, 84, 101, 120, 67, 111, 111, 114, 100, 52, 102, 0,
                103, 108, 77, 117, 108, 116, 105, 84, 101, 120, 67, 111, 111, 114, 100, 52, 120, 0,
                103, 108, 77, 117, 108, 116, 105, 84, 101, 120, 67, 111, 111, 114, 100, 52, 120, 79, 69, 83, 0,
                103, 108, 77, 117, 108, 116, 105, 84, 101, 120, 67, 111, 111, 114, 100, 52, 120, 118, 79, 69, 83, 0,
                103, 108, 77, 117, 108, 116, 77, 97, 116, 114, 105, 120, 102, 0,
                103, 108, 77, 117, 108, 116, 77, 97, 116, 114, 105, 120, 120, 0,
                103, 108, 77, 117, 108, 116, 77, 97, 116, 114, 105, 120, 120, 79, 69, 83, 0,
                103, 108, 77, 117, 108, 116, 84, 114, 97, 110, 115, 112, 111, 115, 101, 77, 97, 116, 114, 105, 120, 120, 79, 69, 83, 0,
                103, 108, 78, 111, 114, 109, 97, 108, 51, 102, 0,
                103, 108, 78, 111, 114, 109, 97, 108, 51, 120, 0,
                103, 108, 78, 111, 114, 109, 97, 108, 51, 120, 79, 69, 83, 0,
                103, 108, 78, 111, 114, 109, 97, 108, 51, 120, 118, 79, 69, 83, 0,
                103, 108, 78, 111, 114, 109, 97, 108, 80, 111, 105, 110, 116, 101, 114, 0,
                103, 108, 79, 98, 106, 101, 99, 116, 76, 97, 98, 101, 108, 0,
                103, 108, 79, 98, 106, 101, 99, 116, 76, 97, 98, 101, 108, 75, 72, 82, 0,
                103, 108, 79, 98, 106, 101, 99, 116, 80, 116, 114, 76, 97, 98, 101, 108, 0,
                103, 108, 79, 98, 106, 101, 99, 116, 80, 116, 114, 76, 97, 98, 101, 108, 75, 72, 82, 0,
                103, 108, 79, 114, 116, 104, 111, 102, 0,
                103, 108, 79, 114, 116, 104, 111, 102, 79, 69, 83, 0,
                103, 108, 79, 114, 116, 104, 111, 120, 0,
                103, 108, 79, 114, 116, 104, 111, 120, 79, 69, 83, 0,
                103, 108, 80, 97, 115, 115, 84, 104, 114, 111, 117, 103, 104, 120, 79, 69, 83, 0,
                103, 108, 80, 105, 120, 101, 108, 77, 97, 112, 120, 0,
                103, 108, 80, 105, 120, 101, 108, 83, 116, 111, 114, 101, 105, 0,
                103, 108, 80, 105, 120, 101, 108, 83, 116, 111, 114, 101, 120, 0,
                103, 108, 80, 105, 120, 101, 108, 84, 114, 97, 110, 115, 102, 101, 114, 120, 79, 69, 83, 0,
                103, 108, 80, 105, 120, 101, 108, 90, 111, 111, 109, 120, 79, 69, 83, 0,
                103, 108, 80, 111, 105, 110, 116, 80, 97, 114, 97, 109, 101, 116, 101, 114, 102, 0,
                103, 108, 80, 111, 105, 110, 116, 80, 97, 114, 97, 109, 101, 116, 101, 114, 102, 118, 0,
                103, 108, 80, 111, 105, 110, 116, 80, 97, 114, 97, 109, 101, 116, 101, 114, 120, 0,
                103, 108, 80, 111, 105, 110, 116, 80, 97, 114, 97, 109, 101, 116, 101, 114, 120, 79, 69, 83, 0,
                103, 108, 80, 111, 105, 110, 116, 80, 97, 114, 97, 109, 101, 116, 101, 114, 120, 118, 0,
                103, 108, 80, 111, 105, 110, 116, 80, 97, 114, 97, 109, 101, 116, 101, 114, 120, 118, 79, 69, 83, 0,
                103, 108, 80, 111, 105, 110, 116, 83, 105, 122, 101, 0,
                103, 108, 80, 111, 105, 110, 116, 83, 105, 122, 101, 80, 111, 105, 110, 116, 101, 114, 79, 69, 83, 0,
                103, 108, 80, 111, 105, 110, 116, 83, 105, 122, 101, 120, 0,
                103, 108, 80, 111, 105, 110, 116, 83, 105, 122, 101, 120, 79, 69, 83, 0,
                103, 108, 80, 111, 108, 121, 103, 111, 110, 79, 102, 102, 115, 101, 116, 0,
                103, 108, 80, 111, 108, 121, 103, 111, 110, 79, 102, 102, 115, 101, 116, 120, 0,
                103, 108, 80, 111, 108, 121, 103, 111, 110, 79, 102, 102, 115, 101, 116, 120, 79, 69, 83, 0,
                103, 108, 80, 111, 112, 68, 101, 98, 117, 103, 71, 114, 111, 117, 112, 0,
                103, 108, 80, 111, 112, 68, 101, 98, 117, 103, 71, 114, 111, 117, 112, 75, 72, 82, 0,
                103, 108, 80, 111, 112, 71, 114, 111, 117, 112, 77, 97, 114, 107, 101, 114, 69, 88, 84, 0,
                103, 108, 80, 111, 112, 77, 97, 116, 114, 105, 120, 0,
                103, 108, 80, 114, 105, 111, 114, 105, 116, 105, 122, 101, 84, 101, 120, 116, 117, 114, 101, 115, 120, 79, 69, 83, 0,
                103, 108, 80, 117, 115, 104, 68, 101, 98, 117, 103, 71, 114, 111, 117, 112, 0,
                103, 108, 80, 117, 115, 104, 68, 101, 98, 117, 103, 71, 114, 111, 117, 112, 75, 72, 82, 0,
                103, 108, 80, 117, 115, 104, 71, 114, 111, 117, 112, 77, 97, 114, 107, 101, 114, 69, 88, 84, 0,
                103, 108, 80, 117, 115, 104, 77, 97, 116, 114, 105, 120, 0,
                103, 108, 81, 117, 101, 114, 121, 77, 97, 116, 114, 105, 120, 120, 79, 69, 83, 0,
                103, 108, 82, 97, 115, 116, 101, 114, 80, 111, 115, 50, 120, 79, 69, 83, 0,
                103, 108, 82, 97, 115, 116, 101, 114, 80, 111, 115, 50, 120, 118, 79, 69, 83, 0,
                103, 108, 82, 97, 115, 116, 101, 114, 80, 111, 115, 51, 120, 79, 69, 83, 0,
                103, 108, 82, 97, 115, 116, 101, 114, 80, 111, 115, 51, 120, 118, 79, 69, 83, 0,
                103, 108, 82, 97, 115, 116, 101, 114, 80, 111, 115, 52, 120, 79, 69, 83, 0,
                103, 108, 82, 97, 115, 116, 101, 114, 80, 111, 115, 52, 120, 118, 79, 69, 83, 0,
                103, 108, 82, 101, 97, 100, 110, 80, 105, 120, 101, 108, 115, 69, 88, 84, 0,
                103, 108, 82, 101, 97, 100, 80, 105, 120, 101, 108, 115, 0,
                103, 108, 82, 101, 99, 116, 120, 79, 69, 83, 0,
                103, 108, 82, 101, 99, 116, 120, 118, 79, 69, 83, 0,
                103, 108, 82, 101, 110, 100, 101, 114, 98, 117, 102, 102, 101, 114, 83, 116, 111, 114, 97, 103, 101, 77, 117, 108, 116, 105, 115, 97, 109, 112, 108, 101, 65, 80, 80, 76, 69, 0,
                103, 108, 82, 101, 110, 100, 101, 114, 98, 117, 102, 102, 101, 114, 83, 116, 111, 114, 97, 103, 101, 77, 117, 108, 116, 105, 115, 97, 109, 112, 108, 101, 69, 88, 84, 0,
                103, 108, 82, 101, 110, 100, 101, 114, 98, 117, 102, 102, 101, 114, 83, 116, 111, 114, 97, 103, 101, 77, 117, 108, 116, 105, 115, 97, 109, 112, 108, 101, 73, 77, 71, 0,
                103, 108, 82, 101, 110, 100, 101, 114, 98, 117, 102, 102, 101, 114, 83, 116, 111, 114, 97, 103, 101, 79, 69, 83, 0,
                103, 108, 82, 101, 115, 111, 108, 118, 101, 77, 117, 108, 116, 105, 115, 97, 109, 112, 108, 101, 70, 114, 97, 109, 101, 98, 117, 102, 102, 101, 114, 65, 80, 80, 76, 69, 0,
                103, 108, 82, 111, 116, 97, 116, 101, 102, 0,
                103, 108, 82, 111, 116, 97, 116, 101, 120, 0,
                103, 108, 82, 111, 116, 97, 116, 101, 120, 79, 69, 83, 0,
                103, 108, 83, 97, 109, 112, 108, 101, 67, 111, 118, 101, 114, 97, 103, 101, 0,
                103, 108, 83, 97, 109, 112, 108, 101, 67, 111, 118, 101, 114, 97, 103, 101, 120, 0,
                103, 108, 83, 97, 109, 112, 108, 101, 67, 111, 118, 101, 114, 97, 103, 101, 120, 79, 69, 83, 0,
                103, 108, 83, 99, 97, 108, 101, 102, 0,
                103, 108, 83, 99, 97, 108, 101, 120, 0,
                103, 108, 83, 99, 97, 108, 101, 120, 79, 69, 83, 0,
                103, 108, 83, 99, 105, 115, 115, 111, 114, 0,
                103, 108, 83, 101, 116, 70, 101, 110, 99, 101, 78, 86, 0,
                103, 108, 83, 104, 97, 100, 101, 77, 111, 100, 101, 108, 0,
                103, 108, 83, 116, 97, 114, 116, 84, 105, 108, 105, 110, 103, 81, 67, 79, 77, 0,
                103, 108, 83, 116, 101, 110, 99, 105, 108, 70, 117, 110, 99, 0,
                103, 108, 83, 116, 101, 110, 99, 105, 108, 77, 97, 115, 107, 0,
                103, 108, 83, 116, 101, 110, 99, 105, 108, 79, 112, 0,
                103, 108, 84, 101, 115, 116, 70, 101, 110, 99, 101, 78, 86, 0,
                103, 108, 84, 101, 120, 67, 111, 111, 114, 100, 49, 98, 79, 69, 83, 0,
                103, 108, 84, 101, 120, 67, 111, 111, 114, 100, 49, 98, 118, 79, 69, 83, 0,
                103, 108, 84, 101, 120, 67, 111, 111, 114, 100, 49, 120, 79, 69, 83, 0,
                103, 108, 84, 101, 120, 67, 111, 111, 114, 100, 49, 120, 118, 79, 69, 83, 0,
                103, 108, 84, 101, 120, 67, 111, 111, 114, 100, 50, 98, 79, 69, 83, 0,
                103, 108, 84, 101, 120, 67, 111, 111, 114, 100, 50, 98, 118, 79, 69, 83, 0,
                103, 108, 84, 101, 120, 67, 111, 111, 114, 100, 50, 120, 79, 69, 83, 0,
                103, 108, 84, 101, 120, 67, 111, 111, 114, 100, 50, 120, 118, 79, 69, 83, 0,
                103, 108, 84, 101, 120, 67, 111, 111, 114, 100, 51, 98, 79, 69, 83, 0,
                103, 108, 84, 101, 120, 67, 111, 111, 114, 100, 51, 98, 118, 79, 69, 83, 0,
                103, 108, 84, 101, 120, 67, 111, 111, 114, 100, 51, 120, 79, 69, 83, 0,
                103, 108, 84, 101, 120, 67, 111, 111, 114, 100, 51, 120, 118, 79, 69, 83, 0,
                103, 108, 84, 101, 120, 67, 111, 111, 114, 100, 52, 98, 79, 69, 83, 0,
                103, 108, 84, 101, 120, 67, 111, 111, 114, 100, 52, 98, 118, 79, 69, 83, 0,
                103, 108, 84, 101, 120, 67, 111, 111, 114, 100, 52, 120, 79, 69, 83, 0,
                103, 108, 84, 101, 120, 67, 111, 111, 114, 100, 52, 120, 118, 79, 69, 83, 0,
                103, 108, 84, 101, 120, 67, 111, 111, 114, 100, 80, 111, 105, 110, 116, 101, 114, 0,
                103, 108, 84, 101, 120, 69, 110, 118, 102, 0,
                103, 108, 84, 101, 120, 69, 110, 118, 102, 118, 0,
                103, 108, 84, 101, 120, 69, 110, 118, 105, 0,
                103, 108, 84, 101, 120, 69, 110, 118, 105, 118, 0,
                103, 108, 84, 101, 120, 69, 110, 118, 120, 0,
                103, 108, 84, 101, 120, 69, 110, 118, 120, 79, 69, 83, 0,
                103, 108, 84, 101, 120, 69, 110, 118, 120, 118, 0,
                103, 108, 84, 101, 120, 69, 110, 118, 120, 118, 79, 69, 83, 0,
                103, 108, 84, 101, 120, 71, 101, 110, 102, 79, 69, 83, 0,
                103, 108, 84, 101, 120, 71, 101, 110, 102, 118, 79, 69, 83, 0,
                103, 108, 84, 101, 120, 71, 101, 110, 105, 79, 69, 83, 0,
                103, 108, 84, 101, 120, 71, 101, 110, 105, 118, 79, 69, 83, 0,
                103, 108, 84, 101, 120, 71, 101, 110, 120, 79, 69, 83, 0,
                103, 108, 84, 101, 120, 71, 101, 110, 120, 118, 79, 69, 83, 0,
                103, 108, 84, 101, 120, 73, 109, 97, 103, 101, 50, 68, 0,
                103, 108, 84, 101, 120, 80, 97, 114, 97, 109, 101, 116, 101, 114, 102, 0,
                103, 108, 84, 101, 120, 80, 97, 114, 97, 109, 101, 116, 101, 114, 102, 118, 0,
                103, 108, 84, 101, 120, 80, 97, 114, 97, 109, 101, 116, 101, 114, 105, 0,
                103, 108, 84, 101, 120, 80, 97, 114, 97, 109, 101, 116, 101, 114, 105, 118, 0,
                103, 108, 84, 101, 120, 80, 97, 114, 97, 109, 101, 116, 101, 114, 120, 0,
                103, 108, 84, 101, 120, 80, 97, 114, 97, 109, 101, 116, 101, 114, 120, 79, 69, 83, 0,
                103, 108, 84, 101, 120, 80, 97, 114, 97, 109, 101, 116, 101, 114, 120, 118, 0,
                103, 108, 84, 101, 120, 80, 97, 114, 97, 109, 101, 116, 101, 114, 120, 118, 79, 69, 83, 0,
                103, 108, 84, 101, 120, 83, 116, 111, 114, 97, 103, 101, 49, 68, 69, 88, 84, 0,
                103, 108, 84, 101, 120, 83, 116, 111, 114, 97, 103, 101, 50, 68, 69, 88, 84, 0,
                103, 108, 84, 101, 120, 83, 116, 111, 114, 97, 103, 101, 51, 68, 69, 88, 84, 0,
                103, 108, 84, 101, 120, 83, 117, 98, 73, 109, 97, 103, 101, 50, 68, 0,
                103, 108, 84, 101, 120, 116, 117, 114, 101, 83, 116, 111, 114, 97, 103, 101, 49, 68, 69, 88, 84, 0,
                103, 108, 84, 101, 120, 116, 117, 114, 101, 83, 116, 111, 114, 97, 103, 101, 50, 68, 69, 88, 84, 0,
                103, 108, 84, 101, 120, 116, 117, 114, 101, 83, 116, 111, 114, 97, 103, 101, 51, 68, 69, 88, 84, 0,
                103, 108, 84, 114, 97, 110, 115, 108, 97, 116, 101, 102, 0,
                103, 108, 84, 114, 97, 110, 115, 108, 97, 116, 101, 120, 0,
                103, 108, 84, 114, 97, 110, 115, 108, 97, 116, 101, 120, 79, 69, 83, 0,
                103, 108, 85, 110, 109, 97, 112, 66, 117, 102, 102, 101, 114, 79, 69, 83, 0,
                103, 108, 86, 101, 114, 116, 101, 120, 50, 98, 79, 69, 83, 0,
                103, 108, 86, 101, 114, 116, 101, 120, 50, 98, 118, 79, 69, 83, 0,
                103, 108, 86, 101, 114, 116, 101, 120, 50, 120, 79, 69, 83, 0,
                103, 108, 86, 101, 114, 116, 101, 120, 50, 120, 118, 79, 69, 83, 0,
                103, 108, 86, 101, 114, 116, 101, 120, 51, 98, 79, 69, 83, 0,
                103, 108, 86, 101, 114, 116, 101, 120, 51, 98, 118, 79, 69, 83, 0,
                103, 108, 86, 101, 114, 116, 101, 120, 51, 120, 79, 69, 83, 0,
                103, 108, 86, 101, 114, 116, 101, 120, 51, 120, 118, 79, 69, 83, 0,
                103, 108, 86, 101, 114, 116, 101, 120, 52, 98, 79, 69, 83, 0,
                103, 108, 86, 101, 114, 116, 101, 120, 52, 98, 118, 79, 69, 83, 0,
                103, 108, 86, 101, 114, 116, 101, 120, 52, 120, 79, 69, 83, 0,
                103, 108, 86, 101, 114, 116, 101, 120, 52, 120, 118, 79, 69, 83, 0,
                103, 108, 86, 101, 114, 116, 101, 120, 80, 111, 105, 110, 116, 101, 114, 0,
                103, 108, 86, 105, 101, 119, 112, 111, 114, 116, 0,
                103, 108, 87, 97, 105, 116, 83, 121, 110, 99, 65, 80, 80, 76, 69, 0,
                103, 108, 87, 101, 105, 103, 104, 116, 80, 111, 105, 110, 116, 101, 114, 79, 69, 83, 0,
            };
            EntryPointNameOffsets = new int[]
            {
                0,
                12,
                28,
                40,
                53,
                69,
                82,
                103,
                125,
                139,
                160,
                173,
                190,
                209,
                228,
                255,
                267,
                290,
                303,
                319,
                347,
                355,
                372,
                385,
                399,
                416,
                430,
                447,
                461,
                478,
                493,
                515,
                537,
                550,
                566,
                582,
                595,
                611,
                627,
                640,
                654,
                664,
                675,
                685,
                698,
                712,
                724,
                739,
                762,
                788,
                815,
                843,
                860,
                880,
                905,
                916,
                942,
                965,
                991,
                1013,
                1038,
                1059,
                1083,
                1099,
                1116,
                1140,
                1165,
                1183,
                1200,
                1224,
                1236,
                1248,
                1262,
                1279,
                1293,
                1310,
                1320,
                1341,
                1368,
                1392,
                1405,
                1420,
                1434,
                1449,
                1463,
                1478,
                1492,
                1507,
                1521,
                1536,
                1575,
                1604,
                1613,
                1633,
                1659,
                1675,
                1692,
                1710,
                1727,
                1745,
                1772,
                1792,
                1817,
                1849,
                1870,
                1896,
                1916,
                1948,
                1972,
                1993,
                2018,
                2051,
                2072,
                2089,
                2098,
                2114,
                2122,
                2150,
                2157,
                2165,
                2172,
                2182,
                2190,
                2201,
                2230,
                2267,
                2304,
                2330,
                2342,
                2353,
                2367,
                2378,
                2392,
                2405,
                2425,
                2439,
                2460,
                2482,
                2496,
                2517,
                2531,
                2554,
                2577,
                2593,
                2612,
                2628,
                2647,
                2678,
                2699,
                2723,
                2747,
                2776,
                2787,
                2802,
                2814,
                2829,
                2841,
                2882,
                2910,
                2939,
                2960,
                2974,
                2987,
                3002,
                3015,
                3031,
                3045,
                3061,
                3079,
                3095,
                3114,
                3133,
                3152,
                3169,
                3189,
                3209,
                3232,
                3248,
                3262,
                3279,
                3311,
                3323,
                3340,
                3354,
                3368,
                3382,
                3399,
                3416,
                3433,
                3450,
                3478,
                3498,
                3518,
                3538,
                3561,
                3568,
                3580,
                3593,
                3616,
                3627,
                3639,
                3651,
                3670,
                3690,
                3704,
                3716,
                3735,
                3744,
                3754,
                3768,
                3783,
                3797,
                3814,
                3829,
                3847,
                3856,
                3868,
                3878,
                3891,
                3903,
                3916,
                3932,
                3947,
                3961,
                3975,
                3992,
                4028,
                4054,
                4064,
                4075,
                4086,
                4101,
                4121,
                4136,
                4151,
                4163,
                4176,
                4188,
                4203,
                4216,
                4232,
                4256,
                4269,
                4290,
                4313,
                4334,
                4356,
                4377,
                4399,
                4420,
                4442,
                4463,
                4485,
                4506,
                4528,
                4549,
                4571,
                4592,
                4614,
                4632,
                4650,
                4671,
                4693,
                4707,
                4721,
                4738,
                4764,
                4775,
                4786,
                4800,
                4815,
                4831,
                4845,
                4862,
                4879,
                4899,
                4908,
                4920,
                4929,
                4941,
                4959,
                4971,
                4985,
                4999,
                5019,
                5035,
                5053,
                5072,
                5090,
                5111,
                5130,
                5152,
                5164,
                5186,
                5199,
                5215,
                5231,
                5248,
                5268,
                5284,
                5303,
                5323,
                5335,
                5360,
                5377,
                5397,
                5418,
                5431,
                5449,
                5466,
                5484,
                5501,
                5519,
                5536,
                5554,
                5571,
                5584,
                5595,
                5607,
                5645,
                5681,
                5717,
                5742,
                5779,
                5789,
                5799,
                5812,
                5829,
                5847,
                5868,
                5877,
                5886,
                5898,
                5908,
                5921,
                5934,
                5952,
                5966,
                5980,
                5992,
                6006,
                6022,
                6039,
                6055,
                6072,
                6088,
                6105,
                6121,
                6138,
                6154,
                6171,
                6187,
                6204,
                6220,
                6237,
                6253,
                6270,
                6288,
                6298,
                6309,
                6319,
                6330,
                6340,
                6353,
                6364,
                6378,
                6391,
                6405,
                6418,
                6432,
                6445,
                6459,
                6472,
                6488,
                6505,
                6521,
                6538,
                6554,
                6573,
                6590,
                6610,
                6628,
                6646,
                6664,
                6680,
                6702,
                6724,
                6746,
                6759,
                6772,
                6788,
                6805,
                6819,
                6834,
                6848,
                6863,
                6877,
                6892,
                6906,
                6921,
                6935,
                6950,
                6964,
                6979,
                6995,
                7006,
                7022,
            };
            EntryPoints = new IntPtr[EntryPointNameOffsets.Length];
        }

        public static partial class Apple
        {
            /// <summary>
            /// [requires: APPLE_sync]
            /// Block and wait for a sync object to become signaled
            /// </summary>
            /// <param name="sync">
            /// The sync object whose status to wait on.
            /// </param>
            /// <param name="flags">
            /// A bitfield controlling the command flushing behavior. flags may be SyncFlushCommandsBit.
            /// </param>
            /// <param name="timeout">
            /// The timeout, specified in nanoseconds, for which the implementation should wait for sync to become signaled.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "APPLE_sync", Version = "", EntryPoint = "glClientWaitSyncAPPLE")]
            public static OpenTK.Graphics.ES11.SyncStatus ClientWaitSync(IntPtr sync, OpenTK.Graphics.ES11.All flags, long timeout) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: APPLE_sync]
            /// Block and wait for a sync object to become signaled
            /// </summary>
            /// <param name="sync">
            /// The sync object whose status to wait on.
            /// </param>
            /// <param name="flags">
            /// A bitfield controlling the command flushing behavior. flags may be SyncFlushCommandsBit.
            /// </param>
            /// <param name="timeout">
            /// The timeout, specified in nanoseconds, for which the implementation should wait for sync to become signaled.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "APPLE_sync", Version = "", EntryPoint = "glClientWaitSyncAPPLE")]
            public static OpenTK.Graphics.ES11.SyncStatus ClientWaitSync(IntPtr sync, OpenTK.Graphics.ES11.All flags, ulong timeout) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: APPLE_sync]
            /// Block and wait for a sync object to become signaled
            /// </summary>
            /// <param name="sync">
            /// The sync object whose status to wait on.
            /// </param>
            /// <param name="flags">
            /// A bitfield controlling the command flushing behavior. flags may be SyncFlushCommandsBit.
            /// </param>
            /// <param name="timeout">
            /// The timeout, specified in nanoseconds, for which the implementation should wait for sync to become signaled.
            /// </param>
            [AutoGenerated(Category = "APPLE_sync", Version = "", EntryPoint = "glClientWaitSyncAPPLE")]
            public static OpenTK.Graphics.ES11.SyncStatus ClientWaitSync(IntPtr sync, OpenTK.Graphics.ES11.SyncObjectMask flags, long timeout) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: APPLE_sync]
            /// Block and wait for a sync object to become signaled
            /// </summary>
            /// <param name="sync">
            /// The sync object whose status to wait on.
            /// </param>
            /// <param name="flags">
            /// A bitfield controlling the command flushing behavior. flags may be SyncFlushCommandsBit.
            /// </param>
            /// <param name="timeout">
            /// The timeout, specified in nanoseconds, for which the implementation should wait for sync to become signaled.
            /// </param>
            [AutoGenerated(Category = "APPLE_sync", Version = "", EntryPoint = "glClientWaitSyncAPPLE")]
            public static OpenTK.Graphics.ES11.SyncStatus ClientWaitSync(IntPtr sync, OpenTK.Graphics.ES11.SyncObjectMask flags, ulong timeout) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: APPLE_copy_texture_levels]
            /// </summary>
            /// <param name="destinationTexture">
            /// </param>
            /// <param name="sourceTexture">
            /// </param>
            /// <param name="sourceBaseLevel">
            /// </param>
            /// <param name="sourceLevelCount">
            /// </param>
            [AutoGenerated(Category = "APPLE_copy_texture_levels", Version = "", EntryPoint = "glCopyTextureLevelsAPPLE")]
            public static void CopyTextureLevel(int destinationTexture, int sourceTexture, int sourceBaseLevel, int sourceLevelCount) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: APPLE_copy_texture_levels]
            /// </summary>
            /// <param name="destinationTexture">
            /// </param>
            /// <param name="sourceTexture">
            /// </param>
            /// <param name="sourceBaseLevel">
            /// </param>
            /// <param name="sourceLevelCount">
            /// </param>
            [AutoGenerated(Category = "APPLE_copy_texture_levels", Version = "", EntryPoint = "glCopyTextureLevelsAPPLE")]
            public static void CopyTextureLevel(uint destinationTexture, uint sourceTexture, int sourceBaseLevel, int sourceLevelCount) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: APPLE_sync]
            /// Delete a sync object
            /// </summary>
            /// <param name="sync">
            /// The sync object to be deleted.
            /// </param>
            [AutoGenerated(Category = "APPLE_sync", Version = "", EntryPoint = "glDeleteSyncAPPLE")]
            public static void DeleteSync(IntPtr sync) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: APPLE_sync]
            /// Create a new sync object and insert it into the GL command stream
            /// </summary>
            /// <param name="condition">
            /// Specifies the condition that must be met to set the sync object's state to signaled. condition must be SyncGpuCommandsComplete.
            /// </param>
            /// <param name="flags">
            /// Specifies a bitwise combination of flags controlling the behavior of the sync object. No flags are presently defined for this operation and flags must be zero.flags is a placeholder for anticipated future extensions of fence sync object capabilities.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "APPLE_sync", Version = "", EntryPoint = "glFenceSyncAPPLE")]
            public static IntPtr FenceSync(OpenTK.Graphics.ES11.All condition, int flags) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: APPLE_sync]
            /// Create a new sync object and insert it into the GL command stream
            /// </summary>
            /// <param name="condition">
            /// Specifies the condition that must be met to set the sync object's state to signaled. condition must be SyncGpuCommandsComplete.
            /// </param>
            /// <param name="flags">
            /// Specifies a bitwise combination of flags controlling the behavior of the sync object. No flags are presently defined for this operation and flags must be zero.flags is a placeholder for anticipated future extensions of fence sync object capabilities.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "APPLE_sync", Version = "", EntryPoint = "glFenceSyncAPPLE")]
            public static IntPtr FenceSync(OpenTK.Graphics.ES11.All condition, uint flags) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: APPLE_sync]
            /// Create a new sync object and insert it into the GL command stream
            /// </summary>
            /// <param name="condition">
            /// Specifies the condition that must be met to set the sync object's state to signaled. condition must be SyncGpuCommandsComplete.
            /// </param>
            /// <param name="flags">
            /// Specifies a bitwise combination of flags controlling the behavior of the sync object. No flags are presently defined for this operation and flags must be zero.flags is a placeholder for anticipated future extensions of fence sync object capabilities.
            /// </param>
            [AutoGenerated(Category = "APPLE_sync", Version = "", EntryPoint = "glFenceSyncAPPLE")]
            public static IntPtr FenceSync(OpenTK.Graphics.ES11.SyncCondition condition, int flags) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: APPLE_sync]
            /// Create a new sync object and insert it into the GL command stream
            /// </summary>
            /// <param name="condition">
            /// Specifies the condition that must be met to set the sync object's state to signaled. condition must be SyncGpuCommandsComplete.
            /// </param>
            /// <param name="flags">
            /// Specifies a bitwise combination of flags controlling the behavior of the sync object. No flags are presently defined for this operation and flags must be zero.flags is a placeholder for anticipated future extensions of fence sync object capabilities.
            /// </param>
            [AutoGenerated(Category = "APPLE_sync", Version = "", EntryPoint = "glFenceSyncAPPLE")]
            public static IntPtr FenceSync(OpenTK.Graphics.ES11.SyncCondition condition, uint flags) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: APPLE_sync]
            /// </summary>
            /// <param name="pname">
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "APPLE_sync", Version = "", EntryPoint = "glGetInteger64vAPPLE")]
            public static long GetInteger64(OpenTK.Graphics.ES11.All pname) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: APPLE_sync]
            /// </summary>
            /// <param name="pname">
            /// </param>
            [AutoGenerated(Category = "APPLE_sync", Version = "", EntryPoint = "glGetInteger64vAPPLE")]
            public static long GetInteger64(OpenTK.Graphics.ES11.GetPName pname) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: APPLE_sync]
            /// </summary>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "APPLE_sync", Version = "", EntryPoint = "glGetInteger64vAPPLE")]
            public static void GetInteger64(OpenTK.Graphics.ES11.All pname, [OutAttribute] long[] @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: APPLE_sync]
            /// </summary>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "APPLE_sync", Version = "", EntryPoint = "glGetInteger64vAPPLE")]
            public static void GetInteger64(OpenTK.Graphics.ES11.All pname, [OutAttribute] out long @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: APPLE_sync]
            /// </summary>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "APPLE_sync", Version = "", EntryPoint = "glGetInteger64vAPPLE")]
            public static unsafe void GetInteger64(OpenTK.Graphics.ES11.All pname, [OutAttribute] long* @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: APPLE_sync]
            /// </summary>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// </param>
            [AutoGenerated(Category = "APPLE_sync", Version = "", EntryPoint = "glGetInteger64vAPPLE")]
            public static void GetInteger64(OpenTK.Graphics.ES11.GetPName pname, [OutAttribute] long[] @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: APPLE_sync]
            /// </summary>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// </param>
            [AutoGenerated(Category = "APPLE_sync", Version = "", EntryPoint = "glGetInteger64vAPPLE")]
            public static void GetInteger64(OpenTK.Graphics.ES11.GetPName pname, [OutAttribute] out long @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: APPLE_sync]
            /// </summary>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// </param>
            [AutoGenerated(Category = "APPLE_sync", Version = "", EntryPoint = "glGetInteger64vAPPLE")]
            public static unsafe void GetInteger64(OpenTK.Graphics.ES11.GetPName pname, [OutAttribute] long* @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: APPLE_sync]
            /// Query the properties of a sync object
            /// </summary>
            /// <param name="sync">
            /// Specifies the sync object whose properties to query.
            /// </param>
            /// <param name="pname">
            /// Specifies the parameter whose value to retrieve from the sync object specified in sync.
            /// </param>
            /// <param name="bufSize">
            /// Specifies the size of the buffer whose address is given in values.
            /// </param>
            /// <param name="length">
            /// Specifies the address of an variable to receive the number of integers placed in values.
            /// </param>
            /// <param name="values">
            /// [length: bufSize]
            /// Specifies the address of an array to receive the values of the queried parameter.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "APPLE_sync", Version = "", EntryPoint = "glGetSyncivAPPLE")]
            public static void GetSync(IntPtr sync, OpenTK.Graphics.ES11.All pname, int bufSize, [OutAttribute] int[] length, [OutAttribute, CountAttribute(Parameter = "bufSize")] int[] values) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: APPLE_sync]
            /// Query the properties of a sync object
            /// </summary>
            /// <param name="sync">
            /// Specifies the sync object whose properties to query.
            /// </param>
            /// <param name="pname">
            /// Specifies the parameter whose value to retrieve from the sync object specified in sync.
            /// </param>
            /// <param name="bufSize">
            /// Specifies the size of the buffer whose address is given in values.
            /// </param>
            /// <param name="length">
            /// Specifies the address of an variable to receive the number of integers placed in values.
            /// </param>
            /// <param name="values">
            /// [length: bufSize]
            /// Specifies the address of an array to receive the values of the queried parameter.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "APPLE_sync", Version = "", EntryPoint = "glGetSyncivAPPLE")]
            public static void GetSync(IntPtr sync, OpenTK.Graphics.ES11.All pname, int bufSize, [OutAttribute] out int length, [OutAttribute, CountAttribute(Parameter = "bufSize")] out int values) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: APPLE_sync]
            /// Query the properties of a sync object
            /// </summary>
            /// <param name="sync">
            /// Specifies the sync object whose properties to query.
            /// </param>
            /// <param name="pname">
            /// Specifies the parameter whose value to retrieve from the sync object specified in sync.
            /// </param>
            /// <param name="bufSize">
            /// Specifies the size of the buffer whose address is given in values.
            /// </param>
            /// <param name="length">
            /// Specifies the address of an variable to receive the number of integers placed in values.
            /// </param>
            /// <param name="values">
            /// [length: bufSize]
            /// Specifies the address of an array to receive the values of the queried parameter.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "APPLE_sync", Version = "", EntryPoint = "glGetSyncivAPPLE")]
            public static unsafe void GetSync(IntPtr sync, OpenTK.Graphics.ES11.All pname, int bufSize, [OutAttribute] int* length, [OutAttribute, CountAttribute(Parameter = "bufSize")] int* values) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: APPLE_sync]
            /// Query the properties of a sync object
            /// </summary>
            /// <param name="sync">
            /// Specifies the sync object whose properties to query.
            /// </param>
            /// <param name="pname">
            /// Specifies the parameter whose value to retrieve from the sync object specified in sync.
            /// </param>
            /// <param name="bufSize">
            /// Specifies the size of the buffer whose address is given in values.
            /// </param>
            /// <param name="length">
            /// Specifies the address of an variable to receive the number of integers placed in values.
            /// </param>
            /// <param name="values">
            /// [length: bufSize]
            /// Specifies the address of an array to receive the values of the queried parameter.
            /// </param>
            [AutoGenerated(Category = "APPLE_sync", Version = "", EntryPoint = "glGetSyncivAPPLE")]
            public static void GetSync(IntPtr sync, OpenTK.Graphics.ES11.SyncParameterName pname, int bufSize, [OutAttribute] int[] length, [OutAttribute, CountAttribute(Parameter = "bufSize")] int[] values) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: APPLE_sync]
            /// Query the properties of a sync object
            /// </summary>
            /// <param name="sync">
            /// Specifies the sync object whose properties to query.
            /// </param>
            /// <param name="pname">
            /// Specifies the parameter whose value to retrieve from the sync object specified in sync.
            /// </param>
            /// <param name="bufSize">
            /// Specifies the size of the buffer whose address is given in values.
            /// </param>
            /// <param name="length">
            /// Specifies the address of an variable to receive the number of integers placed in values.
            /// </param>
            /// <param name="values">
            /// [length: bufSize]
            /// Specifies the address of an array to receive the values of the queried parameter.
            /// </param>
            [AutoGenerated(Category = "APPLE_sync", Version = "", EntryPoint = "glGetSyncivAPPLE")]
            public static void GetSync(IntPtr sync, OpenTK.Graphics.ES11.SyncParameterName pname, int bufSize, [OutAttribute] out int length, [OutAttribute, CountAttribute(Parameter = "bufSize")] out int values) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: APPLE_sync]
            /// Query the properties of a sync object
            /// </summary>
            /// <param name="sync">
            /// Specifies the sync object whose properties to query.
            /// </param>
            /// <param name="pname">
            /// Specifies the parameter whose value to retrieve from the sync object specified in sync.
            /// </param>
            /// <param name="bufSize">
            /// Specifies the size of the buffer whose address is given in values.
            /// </param>
            /// <param name="length">
            /// Specifies the address of an variable to receive the number of integers placed in values.
            /// </param>
            /// <param name="values">
            /// [length: bufSize]
            /// Specifies the address of an array to receive the values of the queried parameter.
            /// </param>
            [AutoGenerated(Category = "APPLE_sync", Version = "", EntryPoint = "glGetSyncivAPPLE")]
            public static unsafe void GetSync(IntPtr sync, OpenTK.Graphics.ES11.SyncParameterName pname, int bufSize, [OutAttribute] int* length, [OutAttribute, CountAttribute(Parameter = "bufSize")] int* values) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: APPLE_sync]
            /// Determine if a name corresponds to a sync object
            /// </summary>
            /// <param name="sync">
            /// Specifies a value that may be the name of a sync object.
            /// </param>
            [AutoGenerated(Category = "APPLE_sync", Version = "", EntryPoint = "glIsSyncAPPLE")]
            public static bool IsSync(IntPtr sync) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: APPLE_framebuffer_multisample]
            /// Establish data storage, format, dimensions and sample count of a renderbuffer object's image
            /// </summary>
            /// <param name="target">
            /// Specifies a binding to which the target of the allocation and must be Renderbuffer.
            /// </param>
            /// <param name="samples">
            /// Specifies the number of samples to be used for the renderbuffer object's storage.
            /// </param>
            /// <param name="internalformat">
            /// Specifies the internal format to use for the renderbuffer object's image.
            /// </param>
            /// <param name="width">
            /// Specifies the width of the renderbuffer, in pixels.
            /// </param>
            /// <param name="height">
            /// Specifies the height of the renderbuffer, in pixels.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "APPLE_framebuffer_multisample", Version = "", EntryPoint = "glRenderbufferStorageMultisampleAPPLE")]
            public static void RenderbufferStorageMultisample(OpenTK.Graphics.ES11.All target, int samples, OpenTK.Graphics.ES11.All internalformat, int width, int height) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: APPLE_framebuffer_multisample]
            /// Establish data storage, format, dimensions and sample count of a renderbuffer object's image
            /// </summary>
            /// <param name="target">
            /// Specifies a binding to which the target of the allocation and must be Renderbuffer.
            /// </param>
            /// <param name="samples">
            /// Specifies the number of samples to be used for the renderbuffer object's storage.
            /// </param>
            /// <param name="internalformat">
            /// Specifies the internal format to use for the renderbuffer object's image.
            /// </param>
            /// <param name="width">
            /// Specifies the width of the renderbuffer, in pixels.
            /// </param>
            /// <param name="height">
            /// Specifies the height of the renderbuffer, in pixels.
            /// </param>
            [AutoGenerated(Category = "APPLE_framebuffer_multisample", Version = "", EntryPoint = "glRenderbufferStorageMultisampleAPPLE")]
            public static void RenderbufferStorageMultisample(OpenTK.Graphics.ES11.RenderbufferTarget target, int samples, OpenTK.Graphics.ES11.InternalFormat internalformat, int width, int height) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: APPLE_framebuffer_multisample]
            /// </summary>
            [AutoGenerated(Category = "APPLE_framebuffer_multisample", Version = "", EntryPoint = "glResolveMultisampleFramebufferAPPLE")]
            public static void ResolveMultisampleFramebuffer() { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: APPLE_sync]
            /// Instruct the GL server to block until the specified sync object becomes signaled
            /// </summary>
            /// <param name="sync">
            /// Specifies the sync object whose status to wait on.
            /// </param>
            /// <param name="flags">
            /// A bitfield controlling the command flushing behavior. flags may be zero.
            /// </param>
            /// <param name="timeout">
            /// Specifies the timeout that the server should wait before continuing. timeout must be TimeoutIgnored.
            /// </param>
            [AutoGenerated(Category = "APPLE_sync", Version = "", EntryPoint = "glWaitSyncAPPLE")]
            public static void WaitSync(IntPtr sync, int flags, long timeout) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: APPLE_sync]
            /// Instruct the GL server to block until the specified sync object becomes signaled
            /// </summary>
            /// <param name="sync">
            /// Specifies the sync object whose status to wait on.
            /// </param>
            /// <param name="flags">
            /// A bitfield controlling the command flushing behavior. flags may be zero.
            /// </param>
            /// <param name="timeout">
            /// Specifies the timeout that the server should wait before continuing. timeout must be TimeoutIgnored.
            /// </param>
            [AutoGenerated(Category = "APPLE_sync", Version = "", EntryPoint = "glWaitSyncAPPLE")]
            public static void WaitSync(IntPtr sync, uint flags, ulong timeout) { throw new BindingsNotRewrittenException(); }

        }

        /// <summary>
        /// [requires: v1.0]
        /// Select active texture unit
        /// </summary>
        /// <param name="texture">
        /// Specifies which texture unit to make active. The number of texture units is implementation dependent, but must be at least 8. texture must be one of Texture, where i ranges from 0 to (MaxCombinedTextureImageUnits - 1). The initial value is Texture0.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glActiveTexture")]
        public static void ActiveTexture(OpenTK.Graphics.ES11.All texture) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Select active texture unit
        /// </summary>
        /// <param name="texture">
        /// Specifies which texture unit to make active. The number of texture units is implementation dependent, but must be at least 8. texture must be one of Texture, where i ranges from 0 to (MaxCombinedTextureImageUnits - 1). The initial value is Texture0.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glActiveTexture")]
        public static void ActiveTexture(OpenTK.Graphics.ES11.TextureUnit texture) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Specify the alpha test function
        /// </summary>
        /// <param name="func">
        /// Specifies the alpha comparison function. Symbolic constants Never, Less, Equal, Lequal, Greater, Notequal, Gequal, and Always are accepted. The initial value is Always.
        /// </param>
        /// <param name="@ref">
        /// Specifies the reference value that incoming alpha values are compared to. This value is clamped to the range [0,1], where 0 represents the lowest possible alpha value and 1 the highest possible value. The initial reference value is 0.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glAlphaFunc")]
        public static void AlphaFunc(OpenTK.Graphics.ES11.All func, float @ref) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Specify the alpha test function
        /// </summary>
        /// <param name="func">
        /// Specifies the alpha comparison function. Symbolic constants Never, Less, Equal, Lequal, Greater, Notequal, Gequal, and Always are accepted. The initial value is Always.
        /// </param>
        /// <param name="@ref">
        /// Specifies the reference value that incoming alpha values are compared to. This value is clamped to the range [0,1], where 0 represents the lowest possible alpha value and 1 the highest possible value. The initial reference value is 0.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glAlphaFunc")]
        public static void AlphaFunc(OpenTK.Graphics.ES11.AlphaFunction func, float @ref) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="func">
        /// </param>
        /// <param name="@ref">
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glAlphaFuncx")]
        public static void AlphaFuncx(OpenTK.Graphics.ES11.All func, int @ref) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="func">
        /// </param>
        /// <param name="@ref">
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glAlphaFuncx")]
        public static void AlphaFuncx(OpenTK.Graphics.ES11.AlphaFunction func, int @ref) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Bind a named buffer object
        /// </summary>
        /// <param name="target">
        /// Specifies the target to which the buffer object is bound. The symbolic constant must be ArrayBuffer or ElementArrayBuffer.
        /// </param>
        /// <param name="buffer">
        /// Specifies the name of a buffer object.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glBindBuffer")]
        public static void BindBuffer(OpenTK.Graphics.ES11.All target, int buffer) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Bind a named buffer object
        /// </summary>
        /// <param name="target">
        /// Specifies the target to which the buffer object is bound. The symbolic constant must be ArrayBuffer or ElementArrayBuffer.
        /// </param>
        /// <param name="buffer">
        /// Specifies the name of a buffer object.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glBindBuffer")]
        public static void BindBuffer(OpenTK.Graphics.ES11.All target, uint buffer) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Bind a named buffer object
        /// </summary>
        /// <param name="target">
        /// Specifies the target to which the buffer object is bound. The symbolic constant must be ArrayBuffer or ElementArrayBuffer.
        /// </param>
        /// <param name="buffer">
        /// Specifies the name of a buffer object.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glBindBuffer")]
        public static void BindBuffer(OpenTK.Graphics.ES11.BufferTargetArb target, int buffer) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Bind a named buffer object
        /// </summary>
        /// <param name="target">
        /// Specifies the target to which the buffer object is bound. The symbolic constant must be ArrayBuffer or ElementArrayBuffer.
        /// </param>
        /// <param name="buffer">
        /// Specifies the name of a buffer object.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glBindBuffer")]
        public static void BindBuffer(OpenTK.Graphics.ES11.BufferTargetArb target, uint buffer) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Bind a named texture to a texturing target
        /// </summary>
        /// <param name="target">
        /// Specifies the target of the active texture unit to which the texture is bound. Must be either Texture2D or TextureCubeMap.
        /// </param>
        /// <param name="texture">
        /// Specifies the name of a texture.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glBindTexture")]
        public static void BindTexture(OpenTK.Graphics.ES11.All target, int texture) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Bind a named texture to a texturing target
        /// </summary>
        /// <param name="target">
        /// Specifies the target of the active texture unit to which the texture is bound. Must be either Texture2D or TextureCubeMap.
        /// </param>
        /// <param name="texture">
        /// Specifies the name of a texture.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glBindTexture")]
        public static void BindTexture(OpenTK.Graphics.ES11.All target, uint texture) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Bind a named texture to a texturing target
        /// </summary>
        /// <param name="target">
        /// Specifies the target of the active texture unit to which the texture is bound. Must be either Texture2D or TextureCubeMap.
        /// </param>
        /// <param name="texture">
        /// Specifies the name of a texture.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glBindTexture")]
        public static void BindTexture(OpenTK.Graphics.ES11.TextureTarget target, int texture) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Bind a named texture to a texturing target
        /// </summary>
        /// <param name="target">
        /// Specifies the target of the active texture unit to which the texture is bound. Must be either Texture2D or TextureCubeMap.
        /// </param>
        /// <param name="texture">
        /// Specifies the name of a texture.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glBindTexture")]
        public static void BindTexture(OpenTK.Graphics.ES11.TextureTarget target, uint texture) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Specify pixel arithmetic
        /// </summary>
        /// <param name="sfactor">
        /// Specifies how the red, green, blue, and alpha source blending factors are computed. The following symbolic constants are accepted: Zero, One, SrcColor, OneMinusSrcColor, DstColor, OneMinusDstColor, SrcAlpha, OneMinusSrcAlpha, DstAlpha, OneMinusDstAlpha, ConstantColor, OneMinusConstantColor, ConstantAlpha, OneMinusConstantAlpha, and SrcAlphaSaturate. The initial value is One.
        /// </param>
        /// <param name="dfactor">
        /// Specifies how the red, green, blue, and alpha destination blending factors are computed. The following symbolic constants are accepted: Zero, One, SrcColor, OneMinusSrcColor, DstColor, OneMinusDstColor, SrcAlpha, OneMinusSrcAlpha, DstAlpha, OneMinusDstAlpha. ConstantColor, OneMinusConstantColor, ConstantAlpha, and OneMinusConstantAlpha. The initial value is Zero.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glBlendFunc")]
        public static void BlendFunc(OpenTK.Graphics.ES11.All sfactor, OpenTK.Graphics.ES11.All dfactor) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Specify pixel arithmetic
        /// </summary>
        /// <param name="sfactor">
        /// Specifies how the red, green, blue, and alpha source blending factors are computed. The following symbolic constants are accepted: Zero, One, SrcColor, OneMinusSrcColor, DstColor, OneMinusDstColor, SrcAlpha, OneMinusSrcAlpha, DstAlpha, OneMinusDstAlpha, ConstantColor, OneMinusConstantColor, ConstantAlpha, OneMinusConstantAlpha, and SrcAlphaSaturate. The initial value is One.
        /// </param>
        /// <param name="dfactor">
        /// Specifies how the red, green, blue, and alpha destination blending factors are computed. The following symbolic constants are accepted: Zero, One, SrcColor, OneMinusSrcColor, DstColor, OneMinusDstColor, SrcAlpha, OneMinusSrcAlpha, DstAlpha, OneMinusDstAlpha. ConstantColor, OneMinusConstantColor, ConstantAlpha, and OneMinusConstantAlpha. The initial value is Zero.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glBlendFunc")]
        public static void BlendFunc(OpenTK.Graphics.ES11.BlendingFactor sfactor, OpenTK.Graphics.ES11.BlendingFactor dfactor) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Create and initialize a buffer object's data store
        /// </summary>
        /// <param name="target">
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer or ElementArrayBuffer.
        /// </param>
        /// <param name="size">
        /// Specifies the size in bytes of the buffer object's new data store.
        /// </param>
        /// <param name="data">
        /// [length: size]
        /// Specifies a pointer to data that will be copied into the data store for initialization, or Null if no data is to be copied.
        /// </param>
        /// <param name="usage">
        /// Specifies the expected usage pattern of the data store. The symbolic constant must be StreamDraw, StaticDraw, or DynamicDraw.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glBufferData")]
        public static void BufferData(OpenTK.Graphics.ES11.All target, int size, [CountAttribute(Parameter = "size")] IntPtr data, OpenTK.Graphics.ES11.All usage) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Create and initialize a buffer object's data store
        /// </summary>
        /// <param name="target">
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer or ElementArrayBuffer.
        /// </param>
        /// <param name="size">
        /// Specifies the size in bytes of the buffer object's new data store.
        /// </param>
        /// <param name="data">
        /// [length: size]
        /// Specifies a pointer to data that will be copied into the data store for initialization, or Null if no data is to be copied.
        /// </param>
        /// <param name="usage">
        /// Specifies the expected usage pattern of the data store. The symbolic constant must be StreamDraw, StaticDraw, or DynamicDraw.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glBufferData")]
        public static void BufferData<T2>(OpenTK.Graphics.ES11.All target, int size, [InAttribute, OutAttribute, CountAttribute(Parameter = "size")] T2[] data, OpenTK.Graphics.ES11.All usage)
            where T2 : struct
         { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Create and initialize a buffer object's data store
        /// </summary>
        /// <param name="target">
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer or ElementArrayBuffer.
        /// </param>
        /// <param name="size">
        /// Specifies the size in bytes of the buffer object's new data store.
        /// </param>
        /// <param name="data">
        /// [length: size]
        /// Specifies a pointer to data that will be copied into the data store for initialization, or Null if no data is to be copied.
        /// </param>
        /// <param name="usage">
        /// Specifies the expected usage pattern of the data store. The symbolic constant must be StreamDraw, StaticDraw, or DynamicDraw.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glBufferData")]
        public static void BufferData<T2>(OpenTK.Graphics.ES11.All target, int size, [InAttribute, OutAttribute, CountAttribute(Parameter = "size")] T2[,] data, OpenTK.Graphics.ES11.All usage)
            where T2 : struct
         { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Create and initialize a buffer object's data store
        /// </summary>
        /// <param name="target">
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer or ElementArrayBuffer.
        /// </param>
        /// <param name="size">
        /// Specifies the size in bytes of the buffer object's new data store.
        /// </param>
        /// <param name="data">
        /// [length: size]
        /// Specifies a pointer to data that will be copied into the data store for initialization, or Null if no data is to be copied.
        /// </param>
        /// <param name="usage">
        /// Specifies the expected usage pattern of the data store. The symbolic constant must be StreamDraw, StaticDraw, or DynamicDraw.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glBufferData")]
        public static void BufferData<T2>(OpenTK.Graphics.ES11.All target, int size, [InAttribute, OutAttribute, CountAttribute(Parameter = "size")] T2[,,] data, OpenTK.Graphics.ES11.All usage)
            where T2 : struct
         { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Create and initialize a buffer object's data store
        /// </summary>
        /// <param name="target">
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer or ElementArrayBuffer.
        /// </param>
        /// <param name="size">
        /// Specifies the size in bytes of the buffer object's new data store.
        /// </param>
        /// <param name="data">
        /// [length: size]
        /// Specifies a pointer to data that will be copied into the data store for initialization, or Null if no data is to be copied.
        /// </param>
        /// <param name="usage">
        /// Specifies the expected usage pattern of the data store. The symbolic constant must be StreamDraw, StaticDraw, or DynamicDraw.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glBufferData")]
        public static void BufferData<T2>(OpenTK.Graphics.ES11.All target, int size, [InAttribute, OutAttribute, CountAttribute(Parameter = "size")] ref T2 data, OpenTK.Graphics.ES11.All usage)
            where T2 : struct
         { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Create and initialize a buffer object's data store
        /// </summary>
        /// <param name="target">
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer or ElementArrayBuffer.
        /// </param>
        /// <param name="size">
        /// Specifies the size in bytes of the buffer object's new data store.
        /// </param>
        /// <param name="data">
        /// [length: size]
        /// Specifies a pointer to data that will be copied into the data store for initialization, or Null if no data is to be copied.
        /// </param>
        /// <param name="usage">
        /// Specifies the expected usage pattern of the data store. The symbolic constant must be StreamDraw, StaticDraw, or DynamicDraw.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glBufferData")]
        public static void BufferData(OpenTK.Graphics.ES11.All target, IntPtr size, [CountAttribute(Parameter = "size")] IntPtr data, OpenTK.Graphics.ES11.All usage) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Create and initialize a buffer object's data store
        /// </summary>
        /// <param name="target">
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer or ElementArrayBuffer.
        /// </param>
        /// <param name="size">
        /// Specifies the size in bytes of the buffer object's new data store.
        /// </param>
        /// <param name="data">
        /// [length: size]
        /// Specifies a pointer to data that will be copied into the data store for initialization, or Null if no data is to be copied.
        /// </param>
        /// <param name="usage">
        /// Specifies the expected usage pattern of the data store. The symbolic constant must be StreamDraw, StaticDraw, or DynamicDraw.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glBufferData")]
        public static void BufferData<T2>(OpenTK.Graphics.ES11.All target, IntPtr size, [InAttribute, OutAttribute, CountAttribute(Parameter = "size")] T2[] data, OpenTK.Graphics.ES11.All usage)
            where T2 : struct
         { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Create and initialize a buffer object's data store
        /// </summary>
        /// <param name="target">
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer or ElementArrayBuffer.
        /// </param>
        /// <param name="size">
        /// Specifies the size in bytes of the buffer object's new data store.
        /// </param>
        /// <param name="data">
        /// [length: size]
        /// Specifies a pointer to data that will be copied into the data store for initialization, or Null if no data is to be copied.
        /// </param>
        /// <param name="usage">
        /// Specifies the expected usage pattern of the data store. The symbolic constant must be StreamDraw, StaticDraw, or DynamicDraw.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glBufferData")]
        public static void BufferData<T2>(OpenTK.Graphics.ES11.All target, IntPtr size, [InAttribute, OutAttribute, CountAttribute(Parameter = "size")] T2[,] data, OpenTK.Graphics.ES11.All usage)
            where T2 : struct
         { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Create and initialize a buffer object's data store
        /// </summary>
        /// <param name="target">
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer or ElementArrayBuffer.
        /// </param>
        /// <param name="size">
        /// Specifies the size in bytes of the buffer object's new data store.
        /// </param>
        /// <param name="data">
        /// [length: size]
        /// Specifies a pointer to data that will be copied into the data store for initialization, or Null if no data is to be copied.
        /// </param>
        /// <param name="usage">
        /// Specifies the expected usage pattern of the data store. The symbolic constant must be StreamDraw, StaticDraw, or DynamicDraw.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glBufferData")]
        public static void BufferData<T2>(OpenTK.Graphics.ES11.All target, IntPtr size, [InAttribute, OutAttribute, CountAttribute(Parameter = "size")] T2[,,] data, OpenTK.Graphics.ES11.All usage)
            where T2 : struct
         { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Create and initialize a buffer object's data store
        /// </summary>
        /// <param name="target">
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer or ElementArrayBuffer.
        /// </param>
        /// <param name="size">
        /// Specifies the size in bytes of the buffer object's new data store.
        /// </param>
        /// <param name="data">
        /// [length: size]
        /// Specifies a pointer to data that will be copied into the data store for initialization, or Null if no data is to be copied.
        /// </param>
        /// <param name="usage">
        /// Specifies the expected usage pattern of the data store. The symbolic constant must be StreamDraw, StaticDraw, or DynamicDraw.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glBufferData")]
        public static void BufferData<T2>(OpenTK.Graphics.ES11.All target, IntPtr size, [InAttribute, OutAttribute, CountAttribute(Parameter = "size")] ref T2 data, OpenTK.Graphics.ES11.All usage)
            where T2 : struct
         { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Create and initialize a buffer object's data store
        /// </summary>
        /// <param name="target">
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer or ElementArrayBuffer.
        /// </param>
        /// <param name="size">
        /// Specifies the size in bytes of the buffer object's new data store.
        /// </param>
        /// <param name="data">
        /// [length: size]
        /// Specifies a pointer to data that will be copied into the data store for initialization, or Null if no data is to be copied.
        /// </param>
        /// <param name="usage">
        /// Specifies the expected usage pattern of the data store. The symbolic constant must be StreamDraw, StaticDraw, or DynamicDraw.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glBufferData")]
        public static void BufferData(OpenTK.Graphics.ES11.BufferTargetArb target, int size, [CountAttribute(Parameter = "size")] IntPtr data, OpenTK.Graphics.ES11.BufferUsageArb usage) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Create and initialize a buffer object's data store
        /// </summary>
        /// <param name="target">
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer or ElementArrayBuffer.
        /// </param>
        /// <param name="size">
        /// Specifies the size in bytes of the buffer object's new data store.
        /// </param>
        /// <param name="data">
        /// [length: size]
        /// Specifies a pointer to data that will be copied into the data store for initialization, or Null if no data is to be copied.
        /// </param>
        /// <param name="usage">
        /// Specifies the expected usage pattern of the data store. The symbolic constant must be StreamDraw, StaticDraw, or DynamicDraw.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glBufferData")]
        public static void BufferData<T2>(OpenTK.Graphics.ES11.BufferTargetArb target, int size, [InAttribute, OutAttribute, CountAttribute(Parameter = "size")] T2[] data, OpenTK.Graphics.ES11.BufferUsageArb usage)
            where T2 : struct
         { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Create and initialize a buffer object's data store
        /// </summary>
        /// <param name="target">
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer or ElementArrayBuffer.
        /// </param>
        /// <param name="size">
        /// Specifies the size in bytes of the buffer object's new data store.
        /// </param>
        /// <param name="data">
        /// [length: size]
        /// Specifies a pointer to data that will be copied into the data store for initialization, or Null if no data is to be copied.
        /// </param>
        /// <param name="usage">
        /// Specifies the expected usage pattern of the data store. The symbolic constant must be StreamDraw, StaticDraw, or DynamicDraw.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glBufferData")]
        public static void BufferData<T2>(OpenTK.Graphics.ES11.BufferTargetArb target, int size, [InAttribute, OutAttribute, CountAttribute(Parameter = "size")] T2[,] data, OpenTK.Graphics.ES11.BufferUsageArb usage)
            where T2 : struct
         { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Create and initialize a buffer object's data store
        /// </summary>
        /// <param name="target">
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer or ElementArrayBuffer.
        /// </param>
        /// <param name="size">
        /// Specifies the size in bytes of the buffer object's new data store.
        /// </param>
        /// <param name="data">
        /// [length: size]
        /// Specifies a pointer to data that will be copied into the data store for initialization, or Null if no data is to be copied.
        /// </param>
        /// <param name="usage">
        /// Specifies the expected usage pattern of the data store. The symbolic constant must be StreamDraw, StaticDraw, or DynamicDraw.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glBufferData")]
        public static void BufferData<T2>(OpenTK.Graphics.ES11.BufferTargetArb target, int size, [InAttribute, OutAttribute, CountAttribute(Parameter = "size")] T2[,,] data, OpenTK.Graphics.ES11.BufferUsageArb usage)
            where T2 : struct
         { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Create and initialize a buffer object's data store
        /// </summary>
        /// <param name="target">
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer or ElementArrayBuffer.
        /// </param>
        /// <param name="size">
        /// Specifies the size in bytes of the buffer object's new data store.
        /// </param>
        /// <param name="data">
        /// [length: size]
        /// Specifies a pointer to data that will be copied into the data store for initialization, or Null if no data is to be copied.
        /// </param>
        /// <param name="usage">
        /// Specifies the expected usage pattern of the data store. The symbolic constant must be StreamDraw, StaticDraw, or DynamicDraw.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glBufferData")]
        public static void BufferData<T2>(OpenTK.Graphics.ES11.BufferTargetArb target, int size, [InAttribute, OutAttribute, CountAttribute(Parameter = "size")] ref T2 data, OpenTK.Graphics.ES11.BufferUsageArb usage)
            where T2 : struct
         { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Create and initialize a buffer object's data store
        /// </summary>
        /// <param name="target">
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer or ElementArrayBuffer.
        /// </param>
        /// <param name="size">
        /// Specifies the size in bytes of the buffer object's new data store.
        /// </param>
        /// <param name="data">
        /// [length: size]
        /// Specifies a pointer to data that will be copied into the data store for initialization, or Null if no data is to be copied.
        /// </param>
        /// <param name="usage">
        /// Specifies the expected usage pattern of the data store. The symbolic constant must be StreamDraw, StaticDraw, or DynamicDraw.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glBufferData")]
        public static void BufferData(OpenTK.Graphics.ES11.BufferTargetArb target, IntPtr size, [CountAttribute(Parameter = "size")] IntPtr data, OpenTK.Graphics.ES11.BufferUsageArb usage) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Create and initialize a buffer object's data store
        /// </summary>
        /// <param name="target">
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer or ElementArrayBuffer.
        /// </param>
        /// <param name="size">
        /// Specifies the size in bytes of the buffer object's new data store.
        /// </param>
        /// <param name="data">
        /// [length: size]
        /// Specifies a pointer to data that will be copied into the data store for initialization, or Null if no data is to be copied.
        /// </param>
        /// <param name="usage">
        /// Specifies the expected usage pattern of the data store. The symbolic constant must be StreamDraw, StaticDraw, or DynamicDraw.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glBufferData")]
        public static void BufferData<T2>(OpenTK.Graphics.ES11.BufferTargetArb target, IntPtr size, [InAttribute, OutAttribute, CountAttribute(Parameter = "size")] T2[] data, OpenTK.Graphics.ES11.BufferUsageArb usage)
            where T2 : struct
         { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Create and initialize a buffer object's data store
        /// </summary>
        /// <param name="target">
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer or ElementArrayBuffer.
        /// </param>
        /// <param name="size">
        /// Specifies the size in bytes of the buffer object's new data store.
        /// </param>
        /// <param name="data">
        /// [length: size]
        /// Specifies a pointer to data that will be copied into the data store for initialization, or Null if no data is to be copied.
        /// </param>
        /// <param name="usage">
        /// Specifies the expected usage pattern of the data store. The symbolic constant must be StreamDraw, StaticDraw, or DynamicDraw.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glBufferData")]
        public static void BufferData<T2>(OpenTK.Graphics.ES11.BufferTargetArb target, IntPtr size, [InAttribute, OutAttribute, CountAttribute(Parameter = "size")] T2[,] data, OpenTK.Graphics.ES11.BufferUsageArb usage)
            where T2 : struct
         { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Create and initialize a buffer object's data store
        /// </summary>
        /// <param name="target">
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer or ElementArrayBuffer.
        /// </param>
        /// <param name="size">
        /// Specifies the size in bytes of the buffer object's new data store.
        /// </param>
        /// <param name="data">
        /// [length: size]
        /// Specifies a pointer to data that will be copied into the data store for initialization, or Null if no data is to be copied.
        /// </param>
        /// <param name="usage">
        /// Specifies the expected usage pattern of the data store. The symbolic constant must be StreamDraw, StaticDraw, or DynamicDraw.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glBufferData")]
        public static void BufferData<T2>(OpenTK.Graphics.ES11.BufferTargetArb target, IntPtr size, [InAttribute, OutAttribute, CountAttribute(Parameter = "size")] T2[,,] data, OpenTK.Graphics.ES11.BufferUsageArb usage)
            where T2 : struct
         { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Create and initialize a buffer object's data store
        /// </summary>
        /// <param name="target">
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer or ElementArrayBuffer.
        /// </param>
        /// <param name="size">
        /// Specifies the size in bytes of the buffer object's new data store.
        /// </param>
        /// <param name="data">
        /// [length: size]
        /// Specifies a pointer to data that will be copied into the data store for initialization, or Null if no data is to be copied.
        /// </param>
        /// <param name="usage">
        /// Specifies the expected usage pattern of the data store. The symbolic constant must be StreamDraw, StaticDraw, or DynamicDraw.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glBufferData")]
        public static void BufferData<T2>(OpenTK.Graphics.ES11.BufferTargetArb target, IntPtr size, [InAttribute, OutAttribute, CountAttribute(Parameter = "size")] ref T2 data, OpenTK.Graphics.ES11.BufferUsageArb usage)
            where T2 : struct
         { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Update a subset of a buffer object's data store
        /// </summary>
        /// <param name="target">
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer or ElementArrayBuffer.
        /// </param>
        /// <param name="offset">
        /// Specifies the offset into the buffer object's data store where data replacement will begin, measured in bytes.
        /// </param>
        /// <param name="size">
        /// Specifies the size in bytes of the data store region being replaced.
        /// </param>
        /// <param name="data">
        /// [length: size]
        /// Specifies a pointer to the new data that will be copied into the data store.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glBufferSubData")]
        public static void BufferSubData(OpenTK.Graphics.ES11.All target, IntPtr offset, int size, [CountAttribute(Parameter = "size")] IntPtr data) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Update a subset of a buffer object's data store
        /// </summary>
        /// <param name="target">
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer or ElementArrayBuffer.
        /// </param>
        /// <param name="offset">
        /// Specifies the offset into the buffer object's data store where data replacement will begin, measured in bytes.
        /// </param>
        /// <param name="size">
        /// Specifies the size in bytes of the data store region being replaced.
        /// </param>
        /// <param name="data">
        /// [length: size]
        /// Specifies a pointer to the new data that will be copied into the data store.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glBufferSubData")]
        public static void BufferSubData<T3>(OpenTK.Graphics.ES11.All target, IntPtr offset, int size, [InAttribute, OutAttribute, CountAttribute(Parameter = "size")] T3[] data)
            where T3 : struct
         { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Update a subset of a buffer object's data store
        /// </summary>
        /// <param name="target">
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer or ElementArrayBuffer.
        /// </param>
        /// <param name="offset">
        /// Specifies the offset into the buffer object's data store where data replacement will begin, measured in bytes.
        /// </param>
        /// <param name="size">
        /// Specifies the size in bytes of the data store region being replaced.
        /// </param>
        /// <param name="data">
        /// [length: size]
        /// Specifies a pointer to the new data that will be copied into the data store.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glBufferSubData")]
        public static void BufferSubData<T3>(OpenTK.Graphics.ES11.All target, IntPtr offset, int size, [InAttribute, OutAttribute, CountAttribute(Parameter = "size")] T3[,] data)
            where T3 : struct
         { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Update a subset of a buffer object's data store
        /// </summary>
        /// <param name="target">
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer or ElementArrayBuffer.
        /// </param>
        /// <param name="offset">
        /// Specifies the offset into the buffer object's data store where data replacement will begin, measured in bytes.
        /// </param>
        /// <param name="size">
        /// Specifies the size in bytes of the data store region being replaced.
        /// </param>
        /// <param name="data">
        /// [length: size]
        /// Specifies a pointer to the new data that will be copied into the data store.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glBufferSubData")]
        public static void BufferSubData<T3>(OpenTK.Graphics.ES11.All target, IntPtr offset, int size, [InAttribute, OutAttribute, CountAttribute(Parameter = "size")] T3[,,] data)
            where T3 : struct
         { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Update a subset of a buffer object's data store
        /// </summary>
        /// <param name="target">
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer or ElementArrayBuffer.
        /// </param>
        /// <param name="offset">
        /// Specifies the offset into the buffer object's data store where data replacement will begin, measured in bytes.
        /// </param>
        /// <param name="size">
        /// Specifies the size in bytes of the data store region being replaced.
        /// </param>
        /// <param name="data">
        /// [length: size]
        /// Specifies a pointer to the new data that will be copied into the data store.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glBufferSubData")]
        public static void BufferSubData<T3>(OpenTK.Graphics.ES11.All target, IntPtr offset, int size, [InAttribute, OutAttribute, CountAttribute(Parameter = "size")] ref T3 data)
            where T3 : struct
         { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Update a subset of a buffer object's data store
        /// </summary>
        /// <param name="target">
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer or ElementArrayBuffer.
        /// </param>
        /// <param name="offset">
        /// Specifies the offset into the buffer object's data store where data replacement will begin, measured in bytes.
        /// </param>
        /// <param name="size">
        /// Specifies the size in bytes of the data store region being replaced.
        /// </param>
        /// <param name="data">
        /// [length: size]
        /// Specifies a pointer to the new data that will be copied into the data store.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glBufferSubData")]
        public static void BufferSubData(OpenTK.Graphics.ES11.All target, IntPtr offset, IntPtr size, [CountAttribute(Parameter = "size")] IntPtr data) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Update a subset of a buffer object's data store
        /// </summary>
        /// <param name="target">
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer or ElementArrayBuffer.
        /// </param>
        /// <param name="offset">
        /// Specifies the offset into the buffer object's data store where data replacement will begin, measured in bytes.
        /// </param>
        /// <param name="size">
        /// Specifies the size in bytes of the data store region being replaced.
        /// </param>
        /// <param name="data">
        /// [length: size]
        /// Specifies a pointer to the new data that will be copied into the data store.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glBufferSubData")]
        public static void BufferSubData<T3>(OpenTK.Graphics.ES11.All target, IntPtr offset, IntPtr size, [InAttribute, OutAttribute, CountAttribute(Parameter = "size")] T3[] data)
            where T3 : struct
         { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Update a subset of a buffer object's data store
        /// </summary>
        /// <param name="target">
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer or ElementArrayBuffer.
        /// </param>
        /// <param name="offset">
        /// Specifies the offset into the buffer object's data store where data replacement will begin, measured in bytes.
        /// </param>
        /// <param name="size">
        /// Specifies the size in bytes of the data store region being replaced.
        /// </param>
        /// <param name="data">
        /// [length: size]
        /// Specifies a pointer to the new data that will be copied into the data store.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glBufferSubData")]
        public static void BufferSubData<T3>(OpenTK.Graphics.ES11.All target, IntPtr offset, IntPtr size, [InAttribute, OutAttribute, CountAttribute(Parameter = "size")] T3[,] data)
            where T3 : struct
         { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Update a subset of a buffer object's data store
        /// </summary>
        /// <param name="target">
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer or ElementArrayBuffer.
        /// </param>
        /// <param name="offset">
        /// Specifies the offset into the buffer object's data store where data replacement will begin, measured in bytes.
        /// </param>
        /// <param name="size">
        /// Specifies the size in bytes of the data store region being replaced.
        /// </param>
        /// <param name="data">
        /// [length: size]
        /// Specifies a pointer to the new data that will be copied into the data store.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glBufferSubData")]
        public static void BufferSubData<T3>(OpenTK.Graphics.ES11.All target, IntPtr offset, IntPtr size, [InAttribute, OutAttribute, CountAttribute(Parameter = "size")] T3[,,] data)
            where T3 : struct
         { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Update a subset of a buffer object's data store
        /// </summary>
        /// <param name="target">
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer or ElementArrayBuffer.
        /// </param>
        /// <param name="offset">
        /// Specifies the offset into the buffer object's data store where data replacement will begin, measured in bytes.
        /// </param>
        /// <param name="size">
        /// Specifies the size in bytes of the data store region being replaced.
        /// </param>
        /// <param name="data">
        /// [length: size]
        /// Specifies a pointer to the new data that will be copied into the data store.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glBufferSubData")]
        public static void BufferSubData<T3>(OpenTK.Graphics.ES11.All target, IntPtr offset, IntPtr size, [InAttribute, OutAttribute, CountAttribute(Parameter = "size")] ref T3 data)
            where T3 : struct
         { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Update a subset of a buffer object's data store
        /// </summary>
        /// <param name="target">
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer or ElementArrayBuffer.
        /// </param>
        /// <param name="offset">
        /// Specifies the offset into the buffer object's data store where data replacement will begin, measured in bytes.
        /// </param>
        /// <param name="size">
        /// Specifies the size in bytes of the data store region being replaced.
        /// </param>
        /// <param name="data">
        /// [length: size]
        /// Specifies a pointer to the new data that will be copied into the data store.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glBufferSubData")]
        public static void BufferSubData(OpenTK.Graphics.ES11.BufferTargetArb target, IntPtr offset, int size, [CountAttribute(Parameter = "size")] IntPtr data) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Update a subset of a buffer object's data store
        /// </summary>
        /// <param name="target">
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer or ElementArrayBuffer.
        /// </param>
        /// <param name="offset">
        /// Specifies the offset into the buffer object's data store where data replacement will begin, measured in bytes.
        /// </param>
        /// <param name="size">
        /// Specifies the size in bytes of the data store region being replaced.
        /// </param>
        /// <param name="data">
        /// [length: size]
        /// Specifies a pointer to the new data that will be copied into the data store.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glBufferSubData")]
        public static void BufferSubData<T3>(OpenTK.Graphics.ES11.BufferTargetArb target, IntPtr offset, int size, [InAttribute, OutAttribute, CountAttribute(Parameter = "size")] T3[] data)
            where T3 : struct
         { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Update a subset of a buffer object's data store
        /// </summary>
        /// <param name="target">
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer or ElementArrayBuffer.
        /// </param>
        /// <param name="offset">
        /// Specifies the offset into the buffer object's data store where data replacement will begin, measured in bytes.
        /// </param>
        /// <param name="size">
        /// Specifies the size in bytes of the data store region being replaced.
        /// </param>
        /// <param name="data">
        /// [length: size]
        /// Specifies a pointer to the new data that will be copied into the data store.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glBufferSubData")]
        public static void BufferSubData<T3>(OpenTK.Graphics.ES11.BufferTargetArb target, IntPtr offset, int size, [InAttribute, OutAttribute, CountAttribute(Parameter = "size")] T3[,] data)
            where T3 : struct
         { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Update a subset of a buffer object's data store
        /// </summary>
        /// <param name="target">
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer or ElementArrayBuffer.
        /// </param>
        /// <param name="offset">
        /// Specifies the offset into the buffer object's data store where data replacement will begin, measured in bytes.
        /// </param>
        /// <param name="size">
        /// Specifies the size in bytes of the data store region being replaced.
        /// </param>
        /// <param name="data">
        /// [length: size]
        /// Specifies a pointer to the new data that will be copied into the data store.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glBufferSubData")]
        public static void BufferSubData<T3>(OpenTK.Graphics.ES11.BufferTargetArb target, IntPtr offset, int size, [InAttribute, OutAttribute, CountAttribute(Parameter = "size")] T3[,,] data)
            where T3 : struct
         { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Update a subset of a buffer object's data store
        /// </summary>
        /// <param name="target">
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer or ElementArrayBuffer.
        /// </param>
        /// <param name="offset">
        /// Specifies the offset into the buffer object's data store where data replacement will begin, measured in bytes.
        /// </param>
        /// <param name="size">
        /// Specifies the size in bytes of the data store region being replaced.
        /// </param>
        /// <param name="data">
        /// [length: size]
        /// Specifies a pointer to the new data that will be copied into the data store.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glBufferSubData")]
        public static void BufferSubData<T3>(OpenTK.Graphics.ES11.BufferTargetArb target, IntPtr offset, int size, [InAttribute, OutAttribute, CountAttribute(Parameter = "size")] ref T3 data)
            where T3 : struct
         { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Update a subset of a buffer object's data store
        /// </summary>
        /// <param name="target">
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer or ElementArrayBuffer.
        /// </param>
        /// <param name="offset">
        /// Specifies the offset into the buffer object's data store where data replacement will begin, measured in bytes.
        /// </param>
        /// <param name="size">
        /// Specifies the size in bytes of the data store region being replaced.
        /// </param>
        /// <param name="data">
        /// [length: size]
        /// Specifies a pointer to the new data that will be copied into the data store.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glBufferSubData")]
        public static void BufferSubData(OpenTK.Graphics.ES11.BufferTargetArb target, IntPtr offset, IntPtr size, [CountAttribute(Parameter = "size")] IntPtr data) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Update a subset of a buffer object's data store
        /// </summary>
        /// <param name="target">
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer or ElementArrayBuffer.
        /// </param>
        /// <param name="offset">
        /// Specifies the offset into the buffer object's data store where data replacement will begin, measured in bytes.
        /// </param>
        /// <param name="size">
        /// Specifies the size in bytes of the data store region being replaced.
        /// </param>
        /// <param name="data">
        /// [length: size]
        /// Specifies a pointer to the new data that will be copied into the data store.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glBufferSubData")]
        public static void BufferSubData<T3>(OpenTK.Graphics.ES11.BufferTargetArb target, IntPtr offset, IntPtr size, [InAttribute, OutAttribute, CountAttribute(Parameter = "size")] T3[] data)
            where T3 : struct
         { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Update a subset of a buffer object's data store
        /// </summary>
        /// <param name="target">
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer or ElementArrayBuffer.
        /// </param>
        /// <param name="offset">
        /// Specifies the offset into the buffer object's data store where data replacement will begin, measured in bytes.
        /// </param>
        /// <param name="size">
        /// Specifies the size in bytes of the data store region being replaced.
        /// </param>
        /// <param name="data">
        /// [length: size]
        /// Specifies a pointer to the new data that will be copied into the data store.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glBufferSubData")]
        public static void BufferSubData<T3>(OpenTK.Graphics.ES11.BufferTargetArb target, IntPtr offset, IntPtr size, [InAttribute, OutAttribute, CountAttribute(Parameter = "size")] T3[,] data)
            where T3 : struct
         { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Update a subset of a buffer object's data store
        /// </summary>
        /// <param name="target">
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer or ElementArrayBuffer.
        /// </param>
        /// <param name="offset">
        /// Specifies the offset into the buffer object's data store where data replacement will begin, measured in bytes.
        /// </param>
        /// <param name="size">
        /// Specifies the size in bytes of the data store region being replaced.
        /// </param>
        /// <param name="data">
        /// [length: size]
        /// Specifies a pointer to the new data that will be copied into the data store.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glBufferSubData")]
        public static void BufferSubData<T3>(OpenTK.Graphics.ES11.BufferTargetArb target, IntPtr offset, IntPtr size, [InAttribute, OutAttribute, CountAttribute(Parameter = "size")] T3[,,] data)
            where T3 : struct
         { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Update a subset of a buffer object's data store
        /// </summary>
        /// <param name="target">
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer or ElementArrayBuffer.
        /// </param>
        /// <param name="offset">
        /// Specifies the offset into the buffer object's data store where data replacement will begin, measured in bytes.
        /// </param>
        /// <param name="size">
        /// Specifies the size in bytes of the data store region being replaced.
        /// </param>
        /// <param name="data">
        /// [length: size]
        /// Specifies a pointer to the new data that will be copied into the data store.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glBufferSubData")]
        public static void BufferSubData<T3>(OpenTK.Graphics.ES11.BufferTargetArb target, IntPtr offset, IntPtr size, [InAttribute, OutAttribute, CountAttribute(Parameter = "size")] ref T3 data)
            where T3 : struct
         { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Clear buffers to preset values
        /// </summary>
        /// <param name="mask">
        /// Bitwise OR of masks that indicate the buffers to be cleared. The three masks are ColorBufferBit, DepthBufferBit, and StencilBufferBit.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glClear")]
        public static void Clear(OpenTK.Graphics.ES11.All mask) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Clear buffers to preset values
        /// </summary>
        /// <param name="mask">
        /// Bitwise OR of masks that indicate the buffers to be cleared. The three masks are ColorBufferBit, DepthBufferBit, and StencilBufferBit.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glClear")]
        public static void Clear(OpenTK.Graphics.ES11.ClearBufferMask mask) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Clear buffers to preset values
        /// </summary>
        /// <param name="mask">
        /// Bitwise OR of masks that indicate the buffers to be cleared. The three masks are ColorBufferBit, DepthBufferBit, and StencilBufferBit.
        /// </param>
        [Obsolete("Use ClearMask overload instead")]
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glClear")]
        public static void Clear(int mask) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Clear buffers to preset values
        /// </summary>
        /// <param name="mask">
        /// Bitwise OR of masks that indicate the buffers to be cleared. The three masks are ColorBufferBit, DepthBufferBit, and StencilBufferBit.
        /// </param>
        [Obsolete("Use ClearMask overload instead")]
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glClear")]
        public static void Clear(uint mask) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Specify clear values for the color buffers
        /// </summary>
        /// <param name="red">
        /// Specify the red, green, blue, and alpha values used when the color buffers are cleared. The initial values are all 0.
        /// </param>
        /// <param name="green">
        /// Specify the red, green, blue, and alpha values used when the color buffers are cleared. The initial values are all 0.
        /// </param>
        /// <param name="blue">
        /// Specify the red, green, blue, and alpha values used when the color buffers are cleared. The initial values are all 0.
        /// </param>
        /// <param name="alpha">
        /// Specify the red, green, blue, and alpha values used when the color buffers are cleared. The initial values are all 0.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glClearColor")]
        public static void ClearColor(float red, float green, float blue, float alpha) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="red">
        /// </param>
        /// <param name="green">
        /// </param>
        /// <param name="blue">
        /// </param>
        /// <param name="alpha">
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glClearColorx")]
        public static void ClearColorx(int red, int green, int blue, int alpha) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Specify the clear value for the depth buffer
        /// </summary>
        /// <param name="d">
        /// Specifies the depth value used when the depth buffer is cleared. The initial value is 1.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glClearDepthf")]
        public static void ClearDepth(float d) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="depth">
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glClearDepthx")]
        public static void ClearDepthx(int depth) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Specify the clear value for the stencil buffer
        /// </summary>
        /// <param name="s">
        /// Specifies the index used when the stencil buffer is cleared. The initial value is 0.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glClearStencil")]
        public static void ClearStencil(int s) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Select active texture unit
        /// </summary>
        /// <param name="texture">
        /// Specifies which texture unit to make active. The number of texture units is implementation dependent, but must be at least two. texture must be one of Texture, where i ranges from 0 to the value of MaxTextureCoords - 1, which is an implementation-dependent value.  The initial value is Texture0.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glClientActiveTexture")]
        public static void ClientActiveTexture(OpenTK.Graphics.ES11.All texture) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Select active texture unit
        /// </summary>
        /// <param name="texture">
        /// Specifies which texture unit to make active. The number of texture units is implementation dependent, but must be at least two. texture must be one of Texture, where i ranges from 0 to the value of MaxTextureCoords - 1, which is an implementation-dependent value.  The initial value is Texture0.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glClientActiveTexture")]
        public static void ClientActiveTexture(OpenTK.Graphics.ES11.TextureUnit texture) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Specify a plane against which all geometry is clipped
        /// </summary>
        /// <param name="p">
        /// Specifies which clipping plane is being positioned. Symbolic names of the form ClipPlanei, where i is an integer between 0 and MaxClipPlanes - 1, are accepted.
        /// </param>
        /// <param name="eqn">
        /// [length: 4]
        /// Specifies the address of an array of four double-precision floating-point values. These values are interpreted as a plane equation.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glClipPlanef")]
        public static void ClipPlane(OpenTK.Graphics.ES11.All p, [CountAttribute(Count = 4)] float[] eqn) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Specify a plane against which all geometry is clipped
        /// </summary>
        /// <param name="p">
        /// Specifies which clipping plane is being positioned. Symbolic names of the form ClipPlanei, where i is an integer between 0 and MaxClipPlanes - 1, are accepted.
        /// </param>
        /// <param name="eqn">
        /// [length: 4]
        /// Specifies the address of an array of four double-precision floating-point values. These values are interpreted as a plane equation.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glClipPlanef")]
        public static void ClipPlane(OpenTK.Graphics.ES11.All p, [CountAttribute(Count = 4)] ref float eqn) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Specify a plane against which all geometry is clipped
        /// </summary>
        /// <param name="p">
        /// Specifies which clipping plane is being positioned. Symbolic names of the form ClipPlanei, where i is an integer between 0 and MaxClipPlanes - 1, are accepted.
        /// </param>
        /// <param name="eqn">
        /// [length: 4]
        /// Specifies the address of an array of four double-precision floating-point values. These values are interpreted as a plane equation.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glClipPlanef")]
        public static unsafe void ClipPlane(OpenTK.Graphics.ES11.All p, [CountAttribute(Count = 4)] float* eqn) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Specify a plane against which all geometry is clipped
        /// </summary>
        /// <param name="p">
        /// Specifies which clipping plane is being positioned. Symbolic names of the form ClipPlanei, where i is an integer between 0 and MaxClipPlanes - 1, are accepted.
        /// </param>
        /// <param name="eqn">
        /// [length: 4]
        /// Specifies the address of an array of four double-precision floating-point values. These values are interpreted as a plane equation.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glClipPlanef")]
        public static void ClipPlane(OpenTK.Graphics.ES11.ClipPlaneName p, [CountAttribute(Count = 4)] float[] eqn) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Specify a plane against which all geometry is clipped
        /// </summary>
        /// <param name="p">
        /// Specifies which clipping plane is being positioned. Symbolic names of the form ClipPlanei, where i is an integer between 0 and MaxClipPlanes - 1, are accepted.
        /// </param>
        /// <param name="eqn">
        /// [length: 4]
        /// Specifies the address of an array of four double-precision floating-point values. These values are interpreted as a plane equation.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glClipPlanef")]
        public static void ClipPlane(OpenTK.Graphics.ES11.ClipPlaneName p, [CountAttribute(Count = 4)] ref float eqn) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Specify a plane against which all geometry is clipped
        /// </summary>
        /// <param name="p">
        /// Specifies which clipping plane is being positioned. Symbolic names of the form ClipPlanei, where i is an integer between 0 and MaxClipPlanes - 1, are accepted.
        /// </param>
        /// <param name="eqn">
        /// [length: 4]
        /// Specifies the address of an array of four double-precision floating-point values. These values are interpreted as a plane equation.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glClipPlanef")]
        public static unsafe void ClipPlane(OpenTK.Graphics.ES11.ClipPlaneName p, [CountAttribute(Count = 4)] float* eqn) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="plane">
        /// </param>
        /// <param name="equation">
        /// [length: 4]
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glClipPlanex")]
        public static void ClipPlanex(OpenTK.Graphics.ES11.All plane, [CountAttribute(Count = 4)] int[] equation) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="plane">
        /// </param>
        /// <param name="equation">
        /// [length: 4]
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glClipPlanex")]
        public static void ClipPlanex(OpenTK.Graphics.ES11.All plane, [CountAttribute(Count = 4)] ref int equation) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="plane">
        /// </param>
        /// <param name="equation">
        /// [length: 4]
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glClipPlanex")]
        public static unsafe void ClipPlanex(OpenTK.Graphics.ES11.All plane, [CountAttribute(Count = 4)] int* equation) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="plane">
        /// </param>
        /// <param name="equation">
        /// [length: 4]
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glClipPlanex")]
        public static void ClipPlanex(OpenTK.Graphics.ES11.ClipPlaneName plane, [CountAttribute(Count = 4)] int[] equation) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="plane">
        /// </param>
        /// <param name="equation">
        /// [length: 4]
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glClipPlanex")]
        public static void ClipPlanex(OpenTK.Graphics.ES11.ClipPlaneName plane, [CountAttribute(Count = 4)] ref int equation) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="plane">
        /// </param>
        /// <param name="equation">
        /// [length: 4]
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glClipPlanex")]
        public static unsafe void ClipPlanex(OpenTK.Graphics.ES11.ClipPlaneName plane, [CountAttribute(Count = 4)] int* equation) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Set the current color
        /// </summary>
        /// <param name="red">
        /// Specify new red, green, and blue values for the current color.
        /// </param>
        /// <param name="green">
        /// Specify new red, green, and blue values for the current color.
        /// </param>
        /// <param name="blue">
        /// Specify new red, green, and blue values for the current color.
        /// </param>
        /// <param name="alpha">
        /// Specifies a new alpha value for the current color. Included only in the four-argument glColor4 commands.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glColor4f")]
        public static void Color4(float red, float green, float blue, float alpha) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Set the current color
        /// </summary>
        /// <param name="red">
        /// Specify new red, green, and blue values for the current color.
        /// </param>
        /// <param name="green">
        /// Specify new red, green, and blue values for the current color.
        /// </param>
        /// <param name="blue">
        /// Specify new red, green, and blue values for the current color.
        /// </param>
        /// <param name="alpha">
        /// Specifies a new alpha value for the current color. Included only in the four-argument glColor4 commands.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glColor4ub")]
        public static void Color4(Byte red, Byte green, Byte blue, Byte alpha) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="red">
        /// </param>
        /// <param name="green">
        /// </param>
        /// <param name="blue">
        /// </param>
        /// <param name="alpha">
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glColor4x")]
        public static void Color4x(int red, int green, int blue, int alpha) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Enable and disable writing of frame buffer color components
        /// </summary>
        /// <param name="red">
        /// Specify whether red, green, blue, and alpha can or cannot be written into the frame buffer. The initial values are all True, indicating that the color components can be written.
        /// </param>
        /// <param name="green">
        /// Specify whether red, green, blue, and alpha can or cannot be written into the frame buffer. The initial values are all True, indicating that the color components can be written.
        /// </param>
        /// <param name="blue">
        /// Specify whether red, green, blue, and alpha can or cannot be written into the frame buffer. The initial values are all True, indicating that the color components can be written.
        /// </param>
        /// <param name="alpha">
        /// Specify whether red, green, blue, and alpha can or cannot be written into the frame buffer. The initial values are all True, indicating that the color components can be written.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glColorMask")]
        public static void ColorMask(bool red, bool green, bool blue, bool alpha) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Define an array of colors
        /// </summary>
        /// <param name="size">
        /// Specifies the number of components per color. Must be 3 or 4. The initial value is 4.
        /// </param>
        /// <param name="type">
        /// Specifies the data type of each color component in the array. Symbolic constants Byte, UnsignedByte, Short, UnsignedShort, Int, UnsignedInt, Float, and Double are accepted. The initial value is Float.
        /// </param>
        /// <param name="stride">
        /// Specifies the byte offset between consecutive colors. If stride is 0, the colors are understood to be tightly packed in the array. The initial value is 0.
        /// </param>
        /// <param name="pointer">
        /// [length: COMPSIZE(size,type,stride)]
        /// Specifies a pointer to the first component of the first color element in the array. The initial value is 0.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glColorPointer")]
        public static void ColorPointer(int size, OpenTK.Graphics.ES11.All type, int stride, [CountAttribute(Computed = "size,type,stride")] IntPtr pointer) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Define an array of colors
        /// </summary>
        /// <param name="size">
        /// Specifies the number of components per color. Must be 3 or 4. The initial value is 4.
        /// </param>
        /// <param name="type">
        /// Specifies the data type of each color component in the array. Symbolic constants Byte, UnsignedByte, Short, UnsignedShort, Int, UnsignedInt, Float, and Double are accepted. The initial value is Float.
        /// </param>
        /// <param name="stride">
        /// Specifies the byte offset between consecutive colors. If stride is 0, the colors are understood to be tightly packed in the array. The initial value is 0.
        /// </param>
        /// <param name="pointer">
        /// [length: COMPSIZE(size,type,stride)]
        /// Specifies a pointer to the first component of the first color element in the array. The initial value is 0.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glColorPointer")]
        public static void ColorPointer<T3>(int size, OpenTK.Graphics.ES11.All type, int stride, [InAttribute, OutAttribute, CountAttribute(Computed = "size,type,stride")] T3[] pointer)
            where T3 : struct
         { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Define an array of colors
        /// </summary>
        /// <param name="size">
        /// Specifies the number of components per color. Must be 3 or 4. The initial value is 4.
        /// </param>
        /// <param name="type">
        /// Specifies the data type of each color component in the array. Symbolic constants Byte, UnsignedByte, Short, UnsignedShort, Int, UnsignedInt, Float, and Double are accepted. The initial value is Float.
        /// </param>
        /// <param name="stride">
        /// Specifies the byte offset between consecutive colors. If stride is 0, the colors are understood to be tightly packed in the array. The initial value is 0.
        /// </param>
        /// <param name="pointer">
        /// [length: COMPSIZE(size,type,stride)]
        /// Specifies a pointer to the first component of the first color element in the array. The initial value is 0.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glColorPointer")]
        public static void ColorPointer<T3>(int size, OpenTK.Graphics.ES11.All type, int stride, [InAttribute, OutAttribute, CountAttribute(Computed = "size,type,stride")] T3[,] pointer)
            where T3 : struct
         { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Define an array of colors
        /// </summary>
        /// <param name="size">
        /// Specifies the number of components per color. Must be 3 or 4. The initial value is 4.
        /// </param>
        /// <param name="type">
        /// Specifies the data type of each color component in the array. Symbolic constants Byte, UnsignedByte, Short, UnsignedShort, Int, UnsignedInt, Float, and Double are accepted. The initial value is Float.
        /// </param>
        /// <param name="stride">
        /// Specifies the byte offset between consecutive colors. If stride is 0, the colors are understood to be tightly packed in the array. The initial value is 0.
        /// </param>
        /// <param name="pointer">
        /// [length: COMPSIZE(size,type,stride)]
        /// Specifies a pointer to the first component of the first color element in the array. The initial value is 0.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glColorPointer")]
        public static void ColorPointer<T3>(int size, OpenTK.Graphics.ES11.All type, int stride, [InAttribute, OutAttribute, CountAttribute(Computed = "size,type,stride")] T3[,,] pointer)
            where T3 : struct
         { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Define an array of colors
        /// </summary>
        /// <param name="size">
        /// Specifies the number of components per color. Must be 3 or 4. The initial value is 4.
        /// </param>
        /// <param name="type">
        /// Specifies the data type of each color component in the array. Symbolic constants Byte, UnsignedByte, Short, UnsignedShort, Int, UnsignedInt, Float, and Double are accepted. The initial value is Float.
        /// </param>
        /// <param name="stride">
        /// Specifies the byte offset between consecutive colors. If stride is 0, the colors are understood to be tightly packed in the array. The initial value is 0.
        /// </param>
        /// <param name="pointer">
        /// [length: COMPSIZE(size,type,stride)]
        /// Specifies a pointer to the first component of the first color element in the array. The initial value is 0.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glColorPointer")]
        public static void ColorPointer<T3>(int size, OpenTK.Graphics.ES11.All type, int stride, [InAttribute, OutAttribute, CountAttribute(Computed = "size,type,stride")] ref T3 pointer)
            where T3 : struct
         { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Define an array of colors
        /// </summary>
        /// <param name="size">
        /// Specifies the number of components per color. Must be 3 or 4. The initial value is 4.
        /// </param>
        /// <param name="type">
        /// Specifies the data type of each color component in the array. Symbolic constants Byte, UnsignedByte, Short, UnsignedShort, Int, UnsignedInt, Float, and Double are accepted. The initial value is Float.
        /// </param>
        /// <param name="stride">
        /// Specifies the byte offset between consecutive colors. If stride is 0, the colors are understood to be tightly packed in the array. The initial value is 0.
        /// </param>
        /// <param name="pointer">
        /// [length: COMPSIZE(size,type,stride)]
        /// Specifies a pointer to the first component of the first color element in the array. The initial value is 0.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glColorPointer")]
        public static void ColorPointer(int size, OpenTK.Graphics.ES11.ColorPointerType type, int stride, [CountAttribute(Computed = "size,type,stride")] IntPtr pointer) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Define an array of colors
        /// </summary>
        /// <param name="size">
        /// Specifies the number of components per color. Must be 3 or 4. The initial value is 4.
        /// </param>
        /// <param name="type">
        /// Specifies the data type of each color component in the array. Symbolic constants Byte, UnsignedByte, Short, UnsignedShort, Int, UnsignedInt, Float, and Double are accepted. The initial value is Float.
        /// </param>
        /// <param name="stride">
        /// Specifies the byte offset between consecutive colors. If stride is 0, the colors are understood to be tightly packed in the array. The initial value is 0.
        /// </param>
        /// <param name="pointer">
        /// [length: COMPSIZE(size,type,stride)]
        /// Specifies a pointer to the first component of the first color element in the array. The initial value is 0.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glColorPointer")]
        public static void ColorPointer<T3>(int size, OpenTK.Graphics.ES11.ColorPointerType type, int stride, [InAttribute, OutAttribute, CountAttribute(Computed = "size,type,stride")] T3[] pointer)
            where T3 : struct
         { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Define an array of colors
        /// </summary>
        /// <param name="size">
        /// Specifies the number of components per color. Must be 3 or 4. The initial value is 4.
        /// </param>
        /// <param name="type">
        /// Specifies the data type of each color component in the array. Symbolic constants Byte, UnsignedByte, Short, UnsignedShort, Int, UnsignedInt, Float, and Double are accepted. The initial value is Float.
        /// </param>
        /// <param name="stride">
        /// Specifies the byte offset between consecutive colors. If stride is 0, the colors are understood to be tightly packed in the array. The initial value is 0.
        /// </param>
        /// <param name="pointer">
        /// [length: COMPSIZE(size,type,stride)]
        /// Specifies a pointer to the first component of the first color element in the array. The initial value is 0.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glColorPointer")]
        public static void ColorPointer<T3>(int size, OpenTK.Graphics.ES11.ColorPointerType type, int stride, [InAttribute, OutAttribute, CountAttribute(Computed = "size,type,stride")] T3[,] pointer)
            where T3 : struct
         { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Define an array of colors
        /// </summary>
        /// <param name="size">
        /// Specifies the number of components per color. Must be 3 or 4. The initial value is 4.
        /// </param>
        /// <param name="type">
        /// Specifies the data type of each color component in the array. Symbolic constants Byte, UnsignedByte, Short, UnsignedShort, Int, UnsignedInt, Float, and Double are accepted. The initial value is Float.
        /// </param>
        /// <param name="stride">
        /// Specifies the byte offset between consecutive colors. If stride is 0, the colors are understood to be tightly packed in the array. The initial value is 0.
        /// </param>
        /// <param name="pointer">
        /// [length: COMPSIZE(size,type,stride)]
        /// Specifies a pointer to the first component of the first color element in the array. The initial value is 0.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glColorPointer")]
        public static void ColorPointer<T3>(int size, OpenTK.Graphics.ES11.ColorPointerType type, int stride, [InAttribute, OutAttribute, CountAttribute(Computed = "size,type,stride")] T3[,,] pointer)
            where T3 : struct
         { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Define an array of colors
        /// </summary>
        /// <param name="size">
        /// Specifies the number of components per color. Must be 3 or 4. The initial value is 4.
        /// </param>
        /// <param name="type">
        /// Specifies the data type of each color component in the array. Symbolic constants Byte, UnsignedByte, Short, UnsignedShort, Int, UnsignedInt, Float, and Double are accepted. The initial value is Float.
        /// </param>
        /// <param name="stride">
        /// Specifies the byte offset between consecutive colors. If stride is 0, the colors are understood to be tightly packed in the array. The initial value is 0.
        /// </param>
        /// <param name="pointer">
        /// [length: COMPSIZE(size,type,stride)]
        /// Specifies a pointer to the first component of the first color element in the array. The initial value is 0.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glColorPointer")]
        public static void ColorPointer<T3>(int size, OpenTK.Graphics.ES11.ColorPointerType type, int stride, [InAttribute, OutAttribute, CountAttribute(Computed = "size,type,stride")] ref T3 pointer)
            where T3 : struct
         { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Specify a two-dimensional texture image in a compressed format
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture of the active texture unit. Must be Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="internalformat">
        /// Specifies the format of the compressed image data stored at address data.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture image. All implementations support 2D texture images that are at least 64 texels wide and cube-mapped texture images that are at least 16 texels wide.
        /// </param>
        /// <param name="height">
        /// Specifies the height of the texture image. All implementations support 2D texture images that are at least 64 texels high and cube-mapped texture images that are at least 16 texels high.
        /// </param>
        /// <param name="border">
        /// Specifies the width of the border. Must be 0.
        /// </param>
        /// <param name="imageSize">
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </param>
        /// <param name="data">
        /// [length: imageSize]
        /// Specifies a pointer to the compressed image data in memory.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glCompressedTexImage2D")]
        public static void CompressedTexImage2D(OpenTK.Graphics.ES11.All target, int level, OpenTK.Graphics.ES11.All internalformat, int width, int height, int border, int imageSize, [CountAttribute(Parameter = "imageSize")] IntPtr data) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Specify a two-dimensional texture image in a compressed format
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture of the active texture unit. Must be Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="internalformat">
        /// Specifies the format of the compressed image data stored at address data.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture image. All implementations support 2D texture images that are at least 64 texels wide and cube-mapped texture images that are at least 16 texels wide.
        /// </param>
        /// <param name="height">
        /// Specifies the height of the texture image. All implementations support 2D texture images that are at least 64 texels high and cube-mapped texture images that are at least 16 texels high.
        /// </param>
        /// <param name="border">
        /// Specifies the width of the border. Must be 0.
        /// </param>
        /// <param name="imageSize">
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </param>
        /// <param name="data">
        /// [length: imageSize]
        /// Specifies a pointer to the compressed image data in memory.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glCompressedTexImage2D")]
        public static void CompressedTexImage2D<T7>(OpenTK.Graphics.ES11.All target, int level, OpenTK.Graphics.ES11.All internalformat, int width, int height, int border, int imageSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "imageSize")] T7[] data)
            where T7 : struct
         { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Specify a two-dimensional texture image in a compressed format
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture of the active texture unit. Must be Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="internalformat">
        /// Specifies the format of the compressed image data stored at address data.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture image. All implementations support 2D texture images that are at least 64 texels wide and cube-mapped texture images that are at least 16 texels wide.
        /// </param>
        /// <param name="height">
        /// Specifies the height of the texture image. All implementations support 2D texture images that are at least 64 texels high and cube-mapped texture images that are at least 16 texels high.
        /// </param>
        /// <param name="border">
        /// Specifies the width of the border. Must be 0.
        /// </param>
        /// <param name="imageSize">
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </param>
        /// <param name="data">
        /// [length: imageSize]
        /// Specifies a pointer to the compressed image data in memory.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glCompressedTexImage2D")]
        public static void CompressedTexImage2D<T7>(OpenTK.Graphics.ES11.All target, int level, OpenTK.Graphics.ES11.All internalformat, int width, int height, int border, int imageSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "imageSize")] T7[,] data)
            where T7 : struct
         { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Specify a two-dimensional texture image in a compressed format
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture of the active texture unit. Must be Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="internalformat">
        /// Specifies the format of the compressed image data stored at address data.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture image. All implementations support 2D texture images that are at least 64 texels wide and cube-mapped texture images that are at least 16 texels wide.
        /// </param>
        /// <param name="height">
        /// Specifies the height of the texture image. All implementations support 2D texture images that are at least 64 texels high and cube-mapped texture images that are at least 16 texels high.
        /// </param>
        /// <param name="border">
        /// Specifies the width of the border. Must be 0.
        /// </param>
        /// <param name="imageSize">
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </param>
        /// <param name="data">
        /// [length: imageSize]
        /// Specifies a pointer to the compressed image data in memory.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glCompressedTexImage2D")]
        public static void CompressedTexImage2D<T7>(OpenTK.Graphics.ES11.All target, int level, OpenTK.Graphics.ES11.All internalformat, int width, int height, int border, int imageSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "imageSize")] T7[,,] data)
            where T7 : struct
         { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Specify a two-dimensional texture image in a compressed format
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture of the active texture unit. Must be Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="internalformat">
        /// Specifies the format of the compressed image data stored at address data.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture image. All implementations support 2D texture images that are at least 64 texels wide and cube-mapped texture images that are at least 16 texels wide.
        /// </param>
        /// <param name="height">
        /// Specifies the height of the texture image. All implementations support 2D texture images that are at least 64 texels high and cube-mapped texture images that are at least 16 texels high.
        /// </param>
        /// <param name="border">
        /// Specifies the width of the border. Must be 0.
        /// </param>
        /// <param name="imageSize">
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </param>
        /// <param name="data">
        /// [length: imageSize]
        /// Specifies a pointer to the compressed image data in memory.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glCompressedTexImage2D")]
        public static void CompressedTexImage2D<T7>(OpenTK.Graphics.ES11.All target, int level, OpenTK.Graphics.ES11.All internalformat, int width, int height, int border, int imageSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "imageSize")] ref T7 data)
            where T7 : struct
         { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Specify a two-dimensional texture image in a compressed format
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture of the active texture unit. Must be Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="internalformat">
        /// Specifies the format of the compressed image data stored at address data.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture image. All implementations support 2D texture images that are at least 64 texels wide and cube-mapped texture images that are at least 16 texels wide.
        /// </param>
        /// <param name="height">
        /// Specifies the height of the texture image. All implementations support 2D texture images that are at least 64 texels high and cube-mapped texture images that are at least 16 texels high.
        /// </param>
        /// <param name="border">
        /// Specifies the width of the border. Must be 0.
        /// </param>
        /// <param name="imageSize">
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </param>
        /// <param name="data">
        /// [length: imageSize]
        /// Specifies a pointer to the compressed image data in memory.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glCompressedTexImage2D")]
        public static void CompressedTexImage2D(OpenTK.Graphics.ES11.TextureTarget target, int level, OpenTK.Graphics.ES11.InternalFormat internalformat, int width, int height, int border, int imageSize, [CountAttribute(Parameter = "imageSize")] IntPtr data) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Specify a two-dimensional texture image in a compressed format
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture of the active texture unit. Must be Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="internalformat">
        /// Specifies the format of the compressed image data stored at address data.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture image. All implementations support 2D texture images that are at least 64 texels wide and cube-mapped texture images that are at least 16 texels wide.
        /// </param>
        /// <param name="height">
        /// Specifies the height of the texture image. All implementations support 2D texture images that are at least 64 texels high and cube-mapped texture images that are at least 16 texels high.
        /// </param>
        /// <param name="border">
        /// Specifies the width of the border. Must be 0.
        /// </param>
        /// <param name="imageSize">
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </param>
        /// <param name="data">
        /// [length: imageSize]
        /// Specifies a pointer to the compressed image data in memory.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glCompressedTexImage2D")]
        public static void CompressedTexImage2D<T7>(OpenTK.Graphics.ES11.TextureTarget target, int level, OpenTK.Graphics.ES11.InternalFormat internalformat, int width, int height, int border, int imageSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "imageSize")] T7[] data)
            where T7 : struct
         { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Specify a two-dimensional texture image in a compressed format
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture of the active texture unit. Must be Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="internalformat">
        /// Specifies the format of the compressed image data stored at address data.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture image. All implementations support 2D texture images that are at least 64 texels wide and cube-mapped texture images that are at least 16 texels wide.
        /// </param>
        /// <param name="height">
        /// Specifies the height of the texture image. All implementations support 2D texture images that are at least 64 texels high and cube-mapped texture images that are at least 16 texels high.
        /// </param>
        /// <param name="border">
        /// Specifies the width of the border. Must be 0.
        /// </param>
        /// <param name="imageSize">
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </param>
        /// <param name="data">
        /// [length: imageSize]
        /// Specifies a pointer to the compressed image data in memory.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glCompressedTexImage2D")]
        public static void CompressedTexImage2D<T7>(OpenTK.Graphics.ES11.TextureTarget target, int level, OpenTK.Graphics.ES11.InternalFormat internalformat, int width, int height, int border, int imageSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "imageSize")] T7[,] data)
            where T7 : struct
         { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Specify a two-dimensional texture image in a compressed format
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture of the active texture unit. Must be Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="internalformat">
        /// Specifies the format of the compressed image data stored at address data.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture image. All implementations support 2D texture images that are at least 64 texels wide and cube-mapped texture images that are at least 16 texels wide.
        /// </param>
        /// <param name="height">
        /// Specifies the height of the texture image. All implementations support 2D texture images that are at least 64 texels high and cube-mapped texture images that are at least 16 texels high.
        /// </param>
        /// <param name="border">
        /// Specifies the width of the border. Must be 0.
        /// </param>
        /// <param name="imageSize">
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </param>
        /// <param name="data">
        /// [length: imageSize]
        /// Specifies a pointer to the compressed image data in memory.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glCompressedTexImage2D")]
        public static void CompressedTexImage2D<T7>(OpenTK.Graphics.ES11.TextureTarget target, int level, OpenTK.Graphics.ES11.InternalFormat internalformat, int width, int height, int border, int imageSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "imageSize")] T7[,,] data)
            where T7 : struct
         { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Specify a two-dimensional texture image in a compressed format
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture of the active texture unit. Must be Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="internalformat">
        /// Specifies the format of the compressed image data stored at address data.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture image. All implementations support 2D texture images that are at least 64 texels wide and cube-mapped texture images that are at least 16 texels wide.
        /// </param>
        /// <param name="height">
        /// Specifies the height of the texture image. All implementations support 2D texture images that are at least 64 texels high and cube-mapped texture images that are at least 16 texels high.
        /// </param>
        /// <param name="border">
        /// Specifies the width of the border. Must be 0.
        /// </param>
        /// <param name="imageSize">
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </param>
        /// <param name="data">
        /// [length: imageSize]
        /// Specifies a pointer to the compressed image data in memory.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glCompressedTexImage2D")]
        public static void CompressedTexImage2D<T7>(OpenTK.Graphics.ES11.TextureTarget target, int level, OpenTK.Graphics.ES11.InternalFormat internalformat, int width, int height, int border, int imageSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "imageSize")] ref T7 data)
            where T7 : struct
         { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Specify a two-dimensional texture subimage in a compressed format
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture of the active texture unit. Must be Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="xoffset">
        /// Specifies a texel offset in the x direction within the texture array.
        /// </param>
        /// <param name="yoffset">
        /// Specifies a texel offset in the y direction within the texture array.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture subimage.
        /// </param>
        /// <param name="height">
        /// Specifies the height of the texture subimage.
        /// </param>
        /// <param name="format">
        /// Specifies the format of the compressed image data stored at address data.
        /// </param>
        /// <param name="imageSize">
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </param>
        /// <param name="data">
        /// [length: imageSize]
        /// Specifies a pointer to the compressed image data in memory.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glCompressedTexSubImage2D")]
        public static void CompressedTexSubImage2D(OpenTK.Graphics.ES11.All target, int level, int xoffset, int yoffset, int width, int height, OpenTK.Graphics.ES11.All format, int imageSize, [CountAttribute(Parameter = "imageSize")] IntPtr data) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Specify a two-dimensional texture subimage in a compressed format
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture of the active texture unit. Must be Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="xoffset">
        /// Specifies a texel offset in the x direction within the texture array.
        /// </param>
        /// <param name="yoffset">
        /// Specifies a texel offset in the y direction within the texture array.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture subimage.
        /// </param>
        /// <param name="height">
        /// Specifies the height of the texture subimage.
        /// </param>
        /// <param name="format">
        /// Specifies the format of the compressed image data stored at address data.
        /// </param>
        /// <param name="imageSize">
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </param>
        /// <param name="data">
        /// [length: imageSize]
        /// Specifies a pointer to the compressed image data in memory.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glCompressedTexSubImage2D")]
        public static void CompressedTexSubImage2D<T8>(OpenTK.Graphics.ES11.All target, int level, int xoffset, int yoffset, int width, int height, OpenTK.Graphics.ES11.All format, int imageSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "imageSize")] T8[] data)
            where T8 : struct
         { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Specify a two-dimensional texture subimage in a compressed format
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture of the active texture unit. Must be Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="xoffset">
        /// Specifies a texel offset in the x direction within the texture array.
        /// </param>
        /// <param name="yoffset">
        /// Specifies a texel offset in the y direction within the texture array.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture subimage.
        /// </param>
        /// <param name="height">
        /// Specifies the height of the texture subimage.
        /// </param>
        /// <param name="format">
        /// Specifies the format of the compressed image data stored at address data.
        /// </param>
        /// <param name="imageSize">
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </param>
        /// <param name="data">
        /// [length: imageSize]
        /// Specifies a pointer to the compressed image data in memory.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glCompressedTexSubImage2D")]
        public static void CompressedTexSubImage2D<T8>(OpenTK.Graphics.ES11.All target, int level, int xoffset, int yoffset, int width, int height, OpenTK.Graphics.ES11.All format, int imageSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "imageSize")] T8[,] data)
            where T8 : struct
         { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Specify a two-dimensional texture subimage in a compressed format
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture of the active texture unit. Must be Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="xoffset">
        /// Specifies a texel offset in the x direction within the texture array.
        /// </param>
        /// <param name="yoffset">
        /// Specifies a texel offset in the y direction within the texture array.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture subimage.
        /// </param>
        /// <param name="height">
        /// Specifies the height of the texture subimage.
        /// </param>
        /// <param name="format">
        /// Specifies the format of the compressed image data stored at address data.
        /// </param>
        /// <param name="imageSize">
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </param>
        /// <param name="data">
        /// [length: imageSize]
        /// Specifies a pointer to the compressed image data in memory.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glCompressedTexSubImage2D")]
        public static void CompressedTexSubImage2D<T8>(OpenTK.Graphics.ES11.All target, int level, int xoffset, int yoffset, int width, int height, OpenTK.Graphics.ES11.All format, int imageSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "imageSize")] T8[,,] data)
            where T8 : struct
         { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Specify a two-dimensional texture subimage in a compressed format
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture of the active texture unit. Must be Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="xoffset">
        /// Specifies a texel offset in the x direction within the texture array.
        /// </param>
        /// <param name="yoffset">
        /// Specifies a texel offset in the y direction within the texture array.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture subimage.
        /// </param>
        /// <param name="height">
        /// Specifies the height of the texture subimage.
        /// </param>
        /// <param name="format">
        /// Specifies the format of the compressed image data stored at address data.
        /// </param>
        /// <param name="imageSize">
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </param>
        /// <param name="data">
        /// [length: imageSize]
        /// Specifies a pointer to the compressed image data in memory.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glCompressedTexSubImage2D")]
        public static void CompressedTexSubImage2D<T8>(OpenTK.Graphics.ES11.All target, int level, int xoffset, int yoffset, int width, int height, OpenTK.Graphics.ES11.All format, int imageSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "imageSize")] ref T8 data)
            where T8 : struct
         { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Specify a two-dimensional texture subimage in a compressed format
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture of the active texture unit. Must be Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="xoffset">
        /// Specifies a texel offset in the x direction within the texture array.
        /// </param>
        /// <param name="yoffset">
        /// Specifies a texel offset in the y direction within the texture array.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture subimage.
        /// </param>
        /// <param name="height">
        /// Specifies the height of the texture subimage.
        /// </param>
        /// <param name="format">
        /// Specifies the format of the compressed image data stored at address data.
        /// </param>
        /// <param name="imageSize">
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </param>
        /// <param name="data">
        /// [length: imageSize]
        /// Specifies a pointer to the compressed image data in memory.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glCompressedTexSubImage2D")]
        public static void CompressedTexSubImage2D(OpenTK.Graphics.ES11.TextureTarget target, int level, int xoffset, int yoffset, int width, int height, OpenTK.Graphics.ES11.PixelFormat format, int imageSize, [CountAttribute(Parameter = "imageSize")] IntPtr data) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Specify a two-dimensional texture subimage in a compressed format
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture of the active texture unit. Must be Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="xoffset">
        /// Specifies a texel offset in the x direction within the texture array.
        /// </param>
        /// <param name="yoffset">
        /// Specifies a texel offset in the y direction within the texture array.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture subimage.
        /// </param>
        /// <param name="height">
        /// Specifies the height of the texture subimage.
        /// </param>
        /// <param name="format">
        /// Specifies the format of the compressed image data stored at address data.
        /// </param>
        /// <param name="imageSize">
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </param>
        /// <param name="data">
        /// [length: imageSize]
        /// Specifies a pointer to the compressed image data in memory.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glCompressedTexSubImage2D")]
        public static void CompressedTexSubImage2D<T8>(OpenTK.Graphics.ES11.TextureTarget target, int level, int xoffset, int yoffset, int width, int height, OpenTK.Graphics.ES11.PixelFormat format, int imageSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "imageSize")] T8[] data)
            where T8 : struct
         { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Specify a two-dimensional texture subimage in a compressed format
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture of the active texture unit. Must be Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="xoffset">
        /// Specifies a texel offset in the x direction within the texture array.
        /// </param>
        /// <param name="yoffset">
        /// Specifies a texel offset in the y direction within the texture array.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture subimage.
        /// </param>
        /// <param name="height">
        /// Specifies the height of the texture subimage.
        /// </param>
        /// <param name="format">
        /// Specifies the format of the compressed image data stored at address data.
        /// </param>
        /// <param name="imageSize">
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </param>
        /// <param name="data">
        /// [length: imageSize]
        /// Specifies a pointer to the compressed image data in memory.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glCompressedTexSubImage2D")]
        public static void CompressedTexSubImage2D<T8>(OpenTK.Graphics.ES11.TextureTarget target, int level, int xoffset, int yoffset, int width, int height, OpenTK.Graphics.ES11.PixelFormat format, int imageSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "imageSize")] T8[,] data)
            where T8 : struct
         { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Specify a two-dimensional texture subimage in a compressed format
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture of the active texture unit. Must be Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="xoffset">
        /// Specifies a texel offset in the x direction within the texture array.
        /// </param>
        /// <param name="yoffset">
        /// Specifies a texel offset in the y direction within the texture array.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture subimage.
        /// </param>
        /// <param name="height">
        /// Specifies the height of the texture subimage.
        /// </param>
        /// <param name="format">
        /// Specifies the format of the compressed image data stored at address data.
        /// </param>
        /// <param name="imageSize">
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </param>
        /// <param name="data">
        /// [length: imageSize]
        /// Specifies a pointer to the compressed image data in memory.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glCompressedTexSubImage2D")]
        public static void CompressedTexSubImage2D<T8>(OpenTK.Graphics.ES11.TextureTarget target, int level, int xoffset, int yoffset, int width, int height, OpenTK.Graphics.ES11.PixelFormat format, int imageSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "imageSize")] T8[,,] data)
            where T8 : struct
         { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Specify a two-dimensional texture subimage in a compressed format
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture of the active texture unit. Must be Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="xoffset">
        /// Specifies a texel offset in the x direction within the texture array.
        /// </param>
        /// <param name="yoffset">
        /// Specifies a texel offset in the y direction within the texture array.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture subimage.
        /// </param>
        /// <param name="height">
        /// Specifies the height of the texture subimage.
        /// </param>
        /// <param name="format">
        /// Specifies the format of the compressed image data stored at address data.
        /// </param>
        /// <param name="imageSize">
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </param>
        /// <param name="data">
        /// [length: imageSize]
        /// Specifies a pointer to the compressed image data in memory.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glCompressedTexSubImage2D")]
        public static void CompressedTexSubImage2D<T8>(OpenTK.Graphics.ES11.TextureTarget target, int level, int xoffset, int yoffset, int width, int height, OpenTK.Graphics.ES11.PixelFormat format, int imageSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "imageSize")] ref T8 data)
            where T8 : struct
         { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Copy pixels into a 2D texture image
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture of the active texture unit. Must be Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="internalformat">
        /// Specifies the internal format of the texture. Must be one of the following symbolic constants: Alpha, Luminance, LuminanceAlpha, Rgb, or Rgba.
        /// </param>
        /// <param name="x">
        /// Specify the window coordinates of the lower left corner of the rectangular region of pixels to be copied.
        /// </param>
        /// <param name="y">
        /// Specify the window coordinates of the lower left corner of the rectangular region of pixels to be copied.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture image. All implementations support 2D texture images that are at least 64 texels wide and cube-mapped texture images that are at least 16 texels wide.
        /// </param>
        /// <param name="height">
        /// Specifies the height of the texture image. All implementations support 2D texture images that are at least 64 texels high and cube-mapped texture images that are at least 16 texels high.
        /// </param>
        /// <param name="border">
        /// Specifies the width of the border. Must be 0.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glCopyTexImage2D")]
        public static void CopyTexImage2D(OpenTK.Graphics.ES11.All target, int level, OpenTK.Graphics.ES11.All internalformat, int x, int y, int width, int height, int border) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Copy pixels into a 2D texture image
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture of the active texture unit. Must be Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="internalformat">
        /// Specifies the internal format of the texture. Must be one of the following symbolic constants: Alpha, Luminance, LuminanceAlpha, Rgb, or Rgba.
        /// </param>
        /// <param name="x">
        /// Specify the window coordinates of the lower left corner of the rectangular region of pixels to be copied.
        /// </param>
        /// <param name="y">
        /// Specify the window coordinates of the lower left corner of the rectangular region of pixels to be copied.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture image. All implementations support 2D texture images that are at least 64 texels wide and cube-mapped texture images that are at least 16 texels wide.
        /// </param>
        /// <param name="height">
        /// Specifies the height of the texture image. All implementations support 2D texture images that are at least 64 texels high and cube-mapped texture images that are at least 16 texels high.
        /// </param>
        /// <param name="border">
        /// Specifies the width of the border. Must be 0.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glCopyTexImage2D")]
        public static void CopyTexImage2D(OpenTK.Graphics.ES11.TextureTarget target, int level, OpenTK.Graphics.ES11.InternalFormat internalformat, int x, int y, int width, int height, int border) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Copy a two-dimensional texture subimage
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture of the active texture unit. Must be Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="xoffset">
        /// Specifies a texel offset in the x direction within the texture array.
        /// </param>
        /// <param name="yoffset">
        /// Specifies a texel offset in the y direction within the texture array.
        /// </param>
        /// <param name="x">
        /// Specify the window coordinates of the lower left corner of the rectangular region of pixels to be copied.
        /// </param>
        /// <param name="y">
        /// Specify the window coordinates of the lower left corner of the rectangular region of pixels to be copied.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture subimage.
        /// </param>
        /// <param name="height">
        /// Specifies the height of the texture subimage.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glCopyTexSubImage2D")]
        public static void CopyTexSubImage2D(OpenTK.Graphics.ES11.All target, int level, int xoffset, int yoffset, int x, int y, int width, int height) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Copy a two-dimensional texture subimage
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture of the active texture unit. Must be Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="xoffset">
        /// Specifies a texel offset in the x direction within the texture array.
        /// </param>
        /// <param name="yoffset">
        /// Specifies a texel offset in the y direction within the texture array.
        /// </param>
        /// <param name="x">
        /// Specify the window coordinates of the lower left corner of the rectangular region of pixels to be copied.
        /// </param>
        /// <param name="y">
        /// Specify the window coordinates of the lower left corner of the rectangular region of pixels to be copied.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture subimage.
        /// </param>
        /// <param name="height">
        /// Specifies the height of the texture subimage.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glCopyTexSubImage2D")]
        public static void CopyTexSubImage2D(OpenTK.Graphics.ES11.TextureTarget target, int level, int xoffset, int yoffset, int x, int y, int width, int height) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Specify whether front- or back-facing polygons can be culled
        /// </summary>
        /// <param name="mode">
        /// Specifies whether front- or back-facing polygons are candidates for culling. Symbolic constants Front, Back, and FrontAndBack are accepted. The initial value is Back.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glCullFace")]
        public static void CullFace(OpenTK.Graphics.ES11.All mode) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Specify whether front- or back-facing polygons can be culled
        /// </summary>
        /// <param name="mode">
        /// Specifies whether front- or back-facing polygons are candidates for culling. Symbolic constants Front, Back, and FrontAndBack are accepted. The initial value is Back.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glCullFace")]
        public static void CullFace(OpenTK.Graphics.ES11.CullFaceMode mode) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// Specify a callback to receive debugging messages from the GL
        /// </summary>
        /// <param name="callback">
        /// The address of a callback function that will be called when a debug message is generated.
        /// </param>
        /// <param name="userParam">
        /// A user supplied pointer that will be passed on each invocation of callback.
        /// </param>
        [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glDebugMessageCallback")]
        public static void DebugMessageCallback(DebugProc callback, IntPtr userParam) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// Specify a callback to receive debugging messages from the GL
        /// </summary>
        /// <param name="callback">
        /// The address of a callback function that will be called when a debug message is generated.
        /// </param>
        /// <param name="userParam">
        /// A user supplied pointer that will be passed on each invocation of callback.
        /// </param>
        [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glDebugMessageCallback")]
        public static void DebugMessageCallback<T1>(DebugProc callback, [InAttribute, OutAttribute] T1[] userParam)
            where T1 : struct
         { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// Specify a callback to receive debugging messages from the GL
        /// </summary>
        /// <param name="callback">
        /// The address of a callback function that will be called when a debug message is generated.
        /// </param>
        /// <param name="userParam">
        /// A user supplied pointer that will be passed on each invocation of callback.
        /// </param>
        [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glDebugMessageCallback")]
        public static void DebugMessageCallback<T1>(DebugProc callback, [InAttribute, OutAttribute] T1[,] userParam)
            where T1 : struct
         { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// Specify a callback to receive debugging messages from the GL
        /// </summary>
        /// <param name="callback">
        /// The address of a callback function that will be called when a debug message is generated.
        /// </param>
        /// <param name="userParam">
        /// A user supplied pointer that will be passed on each invocation of callback.
        /// </param>
        [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glDebugMessageCallback")]
        public static void DebugMessageCallback<T1>(DebugProc callback, [InAttribute, OutAttribute] T1[,,] userParam)
            where T1 : struct
         { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// Specify a callback to receive debugging messages from the GL
        /// </summary>
        /// <param name="callback">
        /// The address of a callback function that will be called when a debug message is generated.
        /// </param>
        /// <param name="userParam">
        /// A user supplied pointer that will be passed on each invocation of callback.
        /// </param>
        [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glDebugMessageCallback")]
        public static void DebugMessageCallback<T1>(DebugProc callback, [InAttribute, OutAttribute] ref T1 userParam)
            where T1 : struct
         { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// Control the reporting of debug messages in a debug context
        /// </summary>
        /// <param name="source">
        /// The source of debug messages to enable or disable.
        /// </param>
        /// <param name="type">
        /// The type of debug messages to enable or disable.
        /// </param>
        /// <param name="severity">
        /// The severity of debug messages to enable or disable.
        /// </param>
        /// <param name="count">
        /// The length of the array ids.
        /// </param>
        /// <param name="ids">
        /// [length: count]
        /// The address of an array of unsigned integers contianing the ids of the messages to enable or disable.
        /// </param>
        /// <param name="enabled">
        /// A Boolean flag determining whether the selected messages should be enabled or disabled.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glDebugMessageControl")]
        public static void DebugMessageControl(OpenTK.Graphics.ES11.All source, OpenTK.Graphics.ES11.All type, OpenTK.Graphics.ES11.All severity, int count, [CountAttribute(Parameter = "count")] int[] ids, bool enabled) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// Control the reporting of debug messages in a debug context
        /// </summary>
        /// <param name="source">
        /// The source of debug messages to enable or disable.
        /// </param>
        /// <param name="type">
        /// The type of debug messages to enable or disable.
        /// </param>
        /// <param name="severity">
        /// The severity of debug messages to enable or disable.
        /// </param>
        /// <param name="count">
        /// The length of the array ids.
        /// </param>
        /// <param name="ids">
        /// [length: count]
        /// The address of an array of unsigned integers contianing the ids of the messages to enable or disable.
        /// </param>
        /// <param name="enabled">
        /// A Boolean flag determining whether the selected messages should be enabled or disabled.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glDebugMessageControl")]
        public static void DebugMessageControl(OpenTK.Graphics.ES11.All source, OpenTK.Graphics.ES11.All type, OpenTK.Graphics.ES11.All severity, int count, [CountAttribute(Parameter = "count")] ref int ids, bool enabled) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// Control the reporting of debug messages in a debug context
        /// </summary>
        /// <param name="source">
        /// The source of debug messages to enable or disable.
        /// </param>
        /// <param name="type">
        /// The type of debug messages to enable or disable.
        /// </param>
        /// <param name="severity">
        /// The severity of debug messages to enable or disable.
        /// </param>
        /// <param name="count">
        /// The length of the array ids.
        /// </param>
        /// <param name="ids">
        /// [length: count]
        /// The address of an array of unsigned integers contianing the ids of the messages to enable or disable.
        /// </param>
        /// <param name="enabled">
        /// A Boolean flag determining whether the selected messages should be enabled or disabled.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glDebugMessageControl")]
        public static unsafe void DebugMessageControl(OpenTK.Graphics.ES11.All source, OpenTK.Graphics.ES11.All type, OpenTK.Graphics.ES11.All severity, int count, [CountAttribute(Parameter = "count")] int* ids, bool enabled) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// Control the reporting of debug messages in a debug context
        /// </summary>
        /// <param name="source">
        /// The source of debug messages to enable or disable.
        /// </param>
        /// <param name="type">
        /// The type of debug messages to enable or disable.
        /// </param>
        /// <param name="severity">
        /// The severity of debug messages to enable or disable.
        /// </param>
        /// <param name="count">
        /// The length of the array ids.
        /// </param>
        /// <param name="ids">
        /// [length: count]
        /// The address of an array of unsigned integers contianing the ids of the messages to enable or disable.
        /// </param>
        /// <param name="enabled">
        /// A Boolean flag determining whether the selected messages should be enabled or disabled.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glDebugMessageControl")]
        public static void DebugMessageControl(OpenTK.Graphics.ES11.All source, OpenTK.Graphics.ES11.All type, OpenTK.Graphics.ES11.All severity, int count, [CountAttribute(Parameter = "count")] uint[] ids, bool enabled) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// Control the reporting of debug messages in a debug context
        /// </summary>
        /// <param name="source">
        /// The source of debug messages to enable or disable.
        /// </param>
        /// <param name="type">
        /// The type of debug messages to enable or disable.
        /// </param>
        /// <param name="severity">
        /// The severity of debug messages to enable or disable.
        /// </param>
        /// <param name="count">
        /// The length of the array ids.
        /// </param>
        /// <param name="ids">
        /// [length: count]
        /// The address of an array of unsigned integers contianing the ids of the messages to enable or disable.
        /// </param>
        /// <param name="enabled">
        /// A Boolean flag determining whether the selected messages should be enabled or disabled.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glDebugMessageControl")]
        public static void DebugMessageControl(OpenTK.Graphics.ES11.All source, OpenTK.Graphics.ES11.All type, OpenTK.Graphics.ES11.All severity, int count, [CountAttribute(Parameter = "count")] ref uint ids, bool enabled) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// Control the reporting of debug messages in a debug context
        /// </summary>
        /// <param name="source">
        /// The source of debug messages to enable or disable.
        /// </param>
        /// <param name="type">
        /// The type of debug messages to enable or disable.
        /// </param>
        /// <param name="severity">
        /// The severity of debug messages to enable or disable.
        /// </param>
        /// <param name="count">
        /// The length of the array ids.
        /// </param>
        /// <param name="ids">
        /// [length: count]
        /// The address of an array of unsigned integers contianing the ids of the messages to enable or disable.
        /// </param>
        /// <param name="enabled">
        /// A Boolean flag determining whether the selected messages should be enabled or disabled.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glDebugMessageControl")]
        public static unsafe void DebugMessageControl(OpenTK.Graphics.ES11.All source, OpenTK.Graphics.ES11.All type, OpenTK.Graphics.ES11.All severity, int count, [CountAttribute(Parameter = "count")] uint* ids, bool enabled) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// Control the reporting of debug messages in a debug context
        /// </summary>
        /// <param name="source">
        /// The source of debug messages to enable or disable.
        /// </param>
        /// <param name="type">
        /// The type of debug messages to enable or disable.
        /// </param>
        /// <param name="severity">
        /// The severity of debug messages to enable or disable.
        /// </param>
        /// <param name="count">
        /// The length of the array ids.
        /// </param>
        /// <param name="ids">
        /// [length: count]
        /// The address of an array of unsigned integers contianing the ids of the messages to enable or disable.
        /// </param>
        /// <param name="enabled">
        /// A Boolean flag determining whether the selected messages should be enabled or disabled.
        /// </param>
        [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glDebugMessageControl")]
        public static void DebugMessageControl(OpenTK.Graphics.ES11.DebugSource source, OpenTK.Graphics.ES11.DebugType type, OpenTK.Graphics.ES11.DebugSeverity severity, int count, [CountAttribute(Parameter = "count")] int[] ids, bool enabled) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// Control the reporting of debug messages in a debug context
        /// </summary>
        /// <param name="source">
        /// The source of debug messages to enable or disable.
        /// </param>
        /// <param name="type">
        /// The type of debug messages to enable or disable.
        /// </param>
        /// <param name="severity">
        /// The severity of debug messages to enable or disable.
        /// </param>
        /// <param name="count">
        /// The length of the array ids.
        /// </param>
        /// <param name="ids">
        /// [length: count]
        /// The address of an array of unsigned integers contianing the ids of the messages to enable or disable.
        /// </param>
        /// <param name="enabled">
        /// A Boolean flag determining whether the selected messages should be enabled or disabled.
        /// </param>
        [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glDebugMessageControl")]
        public static void DebugMessageControl(OpenTK.Graphics.ES11.DebugSource source, OpenTK.Graphics.ES11.DebugType type, OpenTK.Graphics.ES11.DebugSeverity severity, int count, [CountAttribute(Parameter = "count")] ref int ids, bool enabled) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// Control the reporting of debug messages in a debug context
        /// </summary>
        /// <param name="source">
        /// The source of debug messages to enable or disable.
        /// </param>
        /// <param name="type">
        /// The type of debug messages to enable or disable.
        /// </param>
        /// <param name="severity">
        /// The severity of debug messages to enable or disable.
        /// </param>
        /// <param name="count">
        /// The length of the array ids.
        /// </param>
        /// <param name="ids">
        /// [length: count]
        /// The address of an array of unsigned integers contianing the ids of the messages to enable or disable.
        /// </param>
        /// <param name="enabled">
        /// A Boolean flag determining whether the selected messages should be enabled or disabled.
        /// </param>
        [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glDebugMessageControl")]
        public static unsafe void DebugMessageControl(OpenTK.Graphics.ES11.DebugSource source, OpenTK.Graphics.ES11.DebugType type, OpenTK.Graphics.ES11.DebugSeverity severity, int count, [CountAttribute(Parameter = "count")] int* ids, bool enabled) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// Control the reporting of debug messages in a debug context
        /// </summary>
        /// <param name="source">
        /// The source of debug messages to enable or disable.
        /// </param>
        /// <param name="type">
        /// The type of debug messages to enable or disable.
        /// </param>
        /// <param name="severity">
        /// The severity of debug messages to enable or disable.
        /// </param>
        /// <param name="count">
        /// The length of the array ids.
        /// </param>
        /// <param name="ids">
        /// [length: count]
        /// The address of an array of unsigned integers contianing the ids of the messages to enable or disable.
        /// </param>
        /// <param name="enabled">
        /// A Boolean flag determining whether the selected messages should be enabled or disabled.
        /// </param>
        [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glDebugMessageControl")]
        public static void DebugMessageControl(OpenTK.Graphics.ES11.DebugSource source, OpenTK.Graphics.ES11.DebugType type, OpenTK.Graphics.ES11.DebugSeverity severity, int count, [CountAttribute(Parameter = "count")] uint[] ids, bool enabled) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// Control the reporting of debug messages in a debug context
        /// </summary>
        /// <param name="source">
        /// The source of debug messages to enable or disable.
        /// </param>
        /// <param name="type">
        /// The type of debug messages to enable or disable.
        /// </param>
        /// <param name="severity">
        /// The severity of debug messages to enable or disable.
        /// </param>
        /// <param name="count">
        /// The length of the array ids.
        /// </param>
        /// <param name="ids">
        /// [length: count]
        /// The address of an array of unsigned integers contianing the ids of the messages to enable or disable.
        /// </param>
        /// <param name="enabled">
        /// A Boolean flag determining whether the selected messages should be enabled or disabled.
        /// </param>
        [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glDebugMessageControl")]
        public static void DebugMessageControl(OpenTK.Graphics.ES11.DebugSource source, OpenTK.Graphics.ES11.DebugType type, OpenTK.Graphics.ES11.DebugSeverity severity, int count, [CountAttribute(Parameter = "count")] ref uint ids, bool enabled) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// Control the reporting of debug messages in a debug context
        /// </summary>
        /// <param name="source">
        /// The source of debug messages to enable or disable.
        /// </param>
        /// <param name="type">
        /// The type of debug messages to enable or disable.
        /// </param>
        /// <param name="severity">
        /// The severity of debug messages to enable or disable.
        /// </param>
        /// <param name="count">
        /// The length of the array ids.
        /// </param>
        /// <param name="ids">
        /// [length: count]
        /// The address of an array of unsigned integers contianing the ids of the messages to enable or disable.
        /// </param>
        /// <param name="enabled">
        /// A Boolean flag determining whether the selected messages should be enabled or disabled.
        /// </param>
        [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glDebugMessageControl")]
        public static unsafe void DebugMessageControl(OpenTK.Graphics.ES11.DebugSource source, OpenTK.Graphics.ES11.DebugType type, OpenTK.Graphics.ES11.DebugSeverity severity, int count, [CountAttribute(Parameter = "count")] uint* ids, bool enabled) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// Inject an application-supplied message into the debug message queue
        /// </summary>
        /// <param name="source">
        /// The source of the debug message to insert.
        /// </param>
        /// <param name="type">
        /// The type of the debug message insert.
        /// </param>
        /// <param name="id">
        /// The user-supplied identifier of the message to insert.
        /// </param>
        /// <param name="severity">
        /// The severity of the debug messages to insert.
        /// </param>
        /// <param name="length">
        /// The length string contained in the character array whose address is given by message.
        /// </param>
        /// <param name="buf">
        /// [length: COMPSIZE(buf,length)]
        /// The address of a character array containing the message to insert.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glDebugMessageInsert")]
        public static void DebugMessageInsert(OpenTK.Graphics.ES11.All source, OpenTK.Graphics.ES11.All type, int id, OpenTK.Graphics.ES11.All severity, int length, [CountAttribute(Computed = "buf,length")] String buf) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// Inject an application-supplied message into the debug message queue
        /// </summary>
        /// <param name="source">
        /// The source of the debug message to insert.
        /// </param>
        /// <param name="type">
        /// The type of the debug message insert.
        /// </param>
        /// <param name="id">
        /// The user-supplied identifier of the message to insert.
        /// </param>
        /// <param name="severity">
        /// The severity of the debug messages to insert.
        /// </param>
        /// <param name="length">
        /// The length string contained in the character array whose address is given by message.
        /// </param>
        /// <param name="buf">
        /// [length: COMPSIZE(buf,length)]
        /// The address of a character array containing the message to insert.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glDebugMessageInsert")]
        public static void DebugMessageInsert(OpenTK.Graphics.ES11.All source, OpenTK.Graphics.ES11.All type, uint id, OpenTK.Graphics.ES11.All severity, int length, [CountAttribute(Computed = "buf,length")] String buf) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// Inject an application-supplied message into the debug message queue
        /// </summary>
        /// <param name="source">
        /// The source of the debug message to insert.
        /// </param>
        /// <param name="type">
        /// The type of the debug message insert.
        /// </param>
        /// <param name="id">
        /// The user-supplied identifier of the message to insert.
        /// </param>
        /// <param name="severity">
        /// The severity of the debug messages to insert.
        /// </param>
        /// <param name="length">
        /// The length string contained in the character array whose address is given by message.
        /// </param>
        /// <param name="buf">
        /// [length: COMPSIZE(buf,length)]
        /// The address of a character array containing the message to insert.
        /// </param>
        [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glDebugMessageInsert")]
        public static void DebugMessageInsert(OpenTK.Graphics.ES11.DebugSource source, OpenTK.Graphics.ES11.DebugType type, int id, OpenTK.Graphics.ES11.DebugSeverity severity, int length, [CountAttribute(Computed = "buf,length")] String buf) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// Inject an application-supplied message into the debug message queue
        /// </summary>
        /// <param name="source">
        /// The source of the debug message to insert.
        /// </param>
        /// <param name="type">
        /// The type of the debug message insert.
        /// </param>
        /// <param name="id">
        /// The user-supplied identifier of the message to insert.
        /// </param>
        /// <param name="severity">
        /// The severity of the debug messages to insert.
        /// </param>
        /// <param name="length">
        /// The length string contained in the character array whose address is given by message.
        /// </param>
        /// <param name="buf">
        /// [length: COMPSIZE(buf,length)]
        /// The address of a character array containing the message to insert.
        /// </param>
        [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glDebugMessageInsert")]
        public static void DebugMessageInsert(OpenTK.Graphics.ES11.DebugSource source, OpenTK.Graphics.ES11.DebugType type, uint id, OpenTK.Graphics.ES11.DebugSeverity severity, int length, [CountAttribute(Computed = "buf,length")] String buf) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Delete named buffer objects
        /// </summary>
        /// <param name="buffers">
        /// [length: n]
        /// Specifies an array of buffer objects to be deleted.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glDeleteBuffers")]
        public static void DeleteBuffer([CountAttribute(Parameter = "n")] int buffers) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Delete named buffer objects
        /// </summary>
        /// <param name="buffers">
        /// [length: n]
        /// Specifies an array of buffer objects to be deleted.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glDeleteBuffers")]
        public static void DeleteBuffer([CountAttribute(Parameter = "n")] uint buffers) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Delete named buffer objects
        /// </summary>
        /// <param name="n">
        /// Specifies the number of buffer objects to be deleted.
        /// </param>
        /// <param name="buffers">
        /// [length: n]
        /// Specifies an array of buffer objects to be deleted.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glDeleteBuffers")]
        public static void DeleteBuffers(int n, [CountAttribute(Parameter = "n")] int[] buffers) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Delete named buffer objects
        /// </summary>
        /// <param name="n">
        /// Specifies the number of buffer objects to be deleted.
        /// </param>
        /// <param name="buffers">
        /// [length: n]
        /// Specifies an array of buffer objects to be deleted.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glDeleteBuffers")]
        public static void DeleteBuffers(int n, [CountAttribute(Parameter = "n")] ref int buffers) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Delete named buffer objects
        /// </summary>
        /// <param name="n">
        /// Specifies the number of buffer objects to be deleted.
        /// </param>
        /// <param name="buffers">
        /// [length: n]
        /// Specifies an array of buffer objects to be deleted.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glDeleteBuffers")]
        public static unsafe void DeleteBuffers(int n, [CountAttribute(Parameter = "n")] int* buffers) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Delete named buffer objects
        /// </summary>
        /// <param name="n">
        /// Specifies the number of buffer objects to be deleted.
        /// </param>
        /// <param name="buffers">
        /// [length: n]
        /// Specifies an array of buffer objects to be deleted.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glDeleteBuffers")]
        public static void DeleteBuffers(int n, [CountAttribute(Parameter = "n")] uint[] buffers) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Delete named buffer objects
        /// </summary>
        /// <param name="n">
        /// Specifies the number of buffer objects to be deleted.
        /// </param>
        /// <param name="buffers">
        /// [length: n]
        /// Specifies an array of buffer objects to be deleted.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glDeleteBuffers")]
        public static void DeleteBuffers(int n, [CountAttribute(Parameter = "n")] ref uint buffers) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Delete named buffer objects
        /// </summary>
        /// <param name="n">
        /// Specifies the number of buffer objects to be deleted.
        /// </param>
        /// <param name="buffers">
        /// [length: n]
        /// Specifies an array of buffer objects to be deleted.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glDeleteBuffers")]
        public static unsafe void DeleteBuffers(int n, [CountAttribute(Parameter = "n")] uint* buffers) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Delete named textures
        /// </summary>
        /// <param name="textures">
        /// [length: n]
        /// Specifies an array of textures to be deleted.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glDeleteTextures")]
        public static void DeleteTexture([CountAttribute(Parameter = "n")] int textures) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Delete named textures
        /// </summary>
        /// <param name="textures">
        /// [length: n]
        /// Specifies an array of textures to be deleted.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glDeleteTextures")]
        public static void DeleteTexture([CountAttribute(Parameter = "n")] uint textures) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Delete named textures
        /// </summary>
        /// <param name="n">
        /// Specifies the number of textures to be deleted.
        /// </param>
        /// <param name="textures">
        /// [length: n]
        /// Specifies an array of textures to be deleted.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glDeleteTextures")]
        public static void DeleteTextures(int n, [CountAttribute(Parameter = "n")] int[] textures) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Delete named textures
        /// </summary>
        /// <param name="n">
        /// Specifies the number of textures to be deleted.
        /// </param>
        /// <param name="textures">
        /// [length: n]
        /// Specifies an array of textures to be deleted.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glDeleteTextures")]
        public static void DeleteTextures(int n, [CountAttribute(Parameter = "n")] ref int textures) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Delete named textures
        /// </summary>
        /// <param name="n">
        /// Specifies the number of textures to be deleted.
        /// </param>
        /// <param name="textures">
        /// [length: n]
        /// Specifies an array of textures to be deleted.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glDeleteTextures")]
        public static unsafe void DeleteTextures(int n, [CountAttribute(Parameter = "n")] int* textures) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Delete named textures
        /// </summary>
        /// <param name="n">
        /// Specifies the number of textures to be deleted.
        /// </param>
        /// <param name="textures">
        /// [length: n]
        /// Specifies an array of textures to be deleted.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glDeleteTextures")]
        public static void DeleteTextures(int n, [CountAttribute(Parameter = "n")] uint[] textures) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Delete named textures
        /// </summary>
        /// <param name="n">
        /// Specifies the number of textures to be deleted.
        /// </param>
        /// <param name="textures">
        /// [length: n]
        /// Specifies an array of textures to be deleted.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glDeleteTextures")]
        public static void DeleteTextures(int n, [CountAttribute(Parameter = "n")] ref uint textures) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Delete named textures
        /// </summary>
        /// <param name="n">
        /// Specifies the number of textures to be deleted.
        /// </param>
        /// <param name="textures">
        /// [length: n]
        /// Specifies an array of textures to be deleted.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glDeleteTextures")]
        public static unsafe void DeleteTextures(int n, [CountAttribute(Parameter = "n")] uint* textures) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Specify the value used for depth buffer comparisons
        /// </summary>
        /// <param name="func">
        /// Specifies the depth comparison function. Symbolic constants Never, Less, Equal, Lequal, Greater, Notequal, Gequal, and Always are accepted. The initial value is Less.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glDepthFunc")]
        public static void DepthFunc(OpenTK.Graphics.ES11.All func) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Specify the value used for depth buffer comparisons
        /// </summary>
        /// <param name="func">
        /// Specifies the depth comparison function. Symbolic constants Never, Less, Equal, Lequal, Greater, Notequal, Gequal, and Always are accepted. The initial value is Less.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glDepthFunc")]
        public static void DepthFunc(OpenTK.Graphics.ES11.DepthFunction func) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Enable or disable writing into the depth buffer
        /// </summary>
        /// <param name="flag">
        /// Specifies whether the depth buffer is enabled for writing. If flag is False, depth buffer writing is disabled. Otherwise, it is enabled. Initially, depth buffer writing is enabled.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glDepthMask")]
        public static void DepthMask(bool flag) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Specify mapping of depth values from normalized device coordinates to window coordinates
        /// </summary>
        /// <param name="n">
        /// Specifies the mapping of the near clipping plane to window coordinates. The initial value is 0.
        /// </param>
        /// <param name="f">
        /// Specifies the mapping of the far clipping plane to window coordinates. The initial value is 1.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glDepthRangef")]
        public static void DepthRange(float n, float f) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="n">
        /// </param>
        /// <param name="f">
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glDepthRangex")]
        public static void DepthRangex(int n, int f) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="cap">
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glDisable")]
        public static void Disable(OpenTK.Graphics.ES11.All cap) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="cap">
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glDisable")]
        public static void Disable(OpenTK.Graphics.ES11.EnableCap cap) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="array">
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glDisableClientState")]
        public static void DisableClientState(OpenTK.Graphics.ES11.All array) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="array">
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glDisableClientState")]
        public static void DisableClientState(OpenTK.Graphics.ES11.EnableCap array) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Render primitives from array data
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, TriangleStrip, TriangleFan, and Triangles are accepted.
        /// </param>
        /// <param name="first">
        /// Specifies the starting index in the enabled arrays.
        /// </param>
        /// <param name="count">
        /// Specifies the number of indices to be rendered.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glDrawArrays")]
        public static void DrawArrays(OpenTK.Graphics.ES11.All mode, int first, int count) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Render primitives from array data
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, TriangleStrip, TriangleFan, and Triangles are accepted.
        /// </param>
        /// <param name="first">
        /// Specifies the starting index in the enabled arrays.
        /// </param>
        /// <param name="count">
        /// Specifies the number of indices to be rendered.
        /// </param>
        [Obsolete("Use PrimitiveType overload instead")]
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glDrawArrays")]
        public static void DrawArrays(OpenTK.Graphics.ES11.BeginMode mode, int first, int count) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Render primitives from array data
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, TriangleStrip, TriangleFan, and Triangles are accepted.
        /// </param>
        /// <param name="first">
        /// Specifies the starting index in the enabled arrays.
        /// </param>
        /// <param name="count">
        /// Specifies the number of indices to be rendered.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glDrawArrays")]
        public static void DrawArrays(OpenTK.Graphics.ES11.PrimitiveType mode, int first, int count) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Render primitives from array data
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, TriangleStrip, TriangleFan, and Triangles are accepted.
        /// </param>
        /// <param name="count">
        /// Specifies the number of elements to be rendered.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be UnsignedByte or UnsignedShort.
        /// </param>
        /// <param name="indices">
        /// [length: COMPSIZE(count,type)]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glDrawElements")]
        public static void DrawElements(OpenTK.Graphics.ES11.All mode, int count, OpenTK.Graphics.ES11.All type, [CountAttribute(Computed = "count,type")] IntPtr indices) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Render primitives from array data
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, TriangleStrip, TriangleFan, and Triangles are accepted.
        /// </param>
        /// <param name="count">
        /// Specifies the number of elements to be rendered.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be UnsignedByte or UnsignedShort.
        /// </param>
        /// <param name="indices">
        /// [length: COMPSIZE(count,type)]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glDrawElements")]
        public static void DrawElements<T3>(OpenTK.Graphics.ES11.All mode, int count, OpenTK.Graphics.ES11.All type, [InAttribute, OutAttribute, CountAttribute(Computed = "count,type")] T3[] indices)
            where T3 : struct
         { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Render primitives from array data
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, TriangleStrip, TriangleFan, and Triangles are accepted.
        /// </param>
        /// <param name="count">
        /// Specifies the number of elements to be rendered.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be UnsignedByte or UnsignedShort.
        /// </param>
        /// <param name="indices">
        /// [length: COMPSIZE(count,type)]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glDrawElements")]
        public static void DrawElements<T3>(OpenTK.Graphics.ES11.All mode, int count, OpenTK.Graphics.ES11.All type, [InAttribute, OutAttribute, CountAttribute(Computed = "count,type")] T3[,] indices)
            where T3 : struct
         { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Render primitives from array data
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, TriangleStrip, TriangleFan, and Triangles are accepted.
        /// </param>
        /// <param name="count">
        /// Specifies the number of elements to be rendered.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be UnsignedByte or UnsignedShort.
        /// </param>
        /// <param name="indices">
        /// [length: COMPSIZE(count,type)]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glDrawElements")]
        public static void DrawElements<T3>(OpenTK.Graphics.ES11.All mode, int count, OpenTK.Graphics.ES11.All type, [InAttribute, OutAttribute, CountAttribute(Computed = "count,type")] T3[,,] indices)
            where T3 : struct
         { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Render primitives from array data
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, TriangleStrip, TriangleFan, and Triangles are accepted.
        /// </param>
        /// <param name="count">
        /// Specifies the number of elements to be rendered.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be UnsignedByte or UnsignedShort.
        /// </param>
        /// <param name="indices">
        /// [length: COMPSIZE(count,type)]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glDrawElements")]
        public static void DrawElements<T3>(OpenTK.Graphics.ES11.All mode, int count, OpenTK.Graphics.ES11.All type, [InAttribute, OutAttribute, CountAttribute(Computed = "count,type")] ref T3 indices)
            where T3 : struct
         { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Render primitives from array data
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, TriangleStrip, TriangleFan, and Triangles are accepted.
        /// </param>
        /// <param name="count">
        /// Specifies the number of elements to be rendered.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be UnsignedByte or UnsignedShort.
        /// </param>
        /// <param name="indices">
        /// [length: COMPSIZE(count,type)]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        [Obsolete("Use PrimitiveType overload instead")]
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glDrawElements")]
        public static void DrawElements(OpenTK.Graphics.ES11.BeginMode mode, int count, OpenTK.Graphics.ES11.DrawElementsType type, [CountAttribute(Computed = "count,type")] IntPtr indices) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Render primitives from array data
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, TriangleStrip, TriangleFan, and Triangles are accepted.
        /// </param>
        /// <param name="count">
        /// Specifies the number of elements to be rendered.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be UnsignedByte or UnsignedShort.
        /// </param>
        /// <param name="indices">
        /// [length: COMPSIZE(count,type)]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        [Obsolete("Use PrimitiveType overload instead")]
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glDrawElements")]
        public static void DrawElements<T3>(OpenTK.Graphics.ES11.BeginMode mode, int count, OpenTK.Graphics.ES11.DrawElementsType type, [InAttribute, OutAttribute, CountAttribute(Computed = "count,type")] T3[] indices)
            where T3 : struct
         { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Render primitives from array data
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, TriangleStrip, TriangleFan, and Triangles are accepted.
        /// </param>
        /// <param name="count">
        /// Specifies the number of elements to be rendered.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be UnsignedByte or UnsignedShort.
        /// </param>
        /// <param name="indices">
        /// [length: COMPSIZE(count,type)]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        [Obsolete("Use PrimitiveType overload instead")]
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glDrawElements")]
        public static void DrawElements<T3>(OpenTK.Graphics.ES11.BeginMode mode, int count, OpenTK.Graphics.ES11.DrawElementsType type, [InAttribute, OutAttribute, CountAttribute(Computed = "count,type")] T3[,] indices)
            where T3 : struct
         { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Render primitives from array data
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, TriangleStrip, TriangleFan, and Triangles are accepted.
        /// </param>
        /// <param name="count">
        /// Specifies the number of elements to be rendered.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be UnsignedByte or UnsignedShort.
        /// </param>
        /// <param name="indices">
        /// [length: COMPSIZE(count,type)]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        [Obsolete("Use PrimitiveType overload instead")]
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glDrawElements")]
        public static void DrawElements<T3>(OpenTK.Graphics.ES11.BeginMode mode, int count, OpenTK.Graphics.ES11.DrawElementsType type, [InAttribute, OutAttribute, CountAttribute(Computed = "count,type")] T3[,,] indices)
            where T3 : struct
         { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Render primitives from array data
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, TriangleStrip, TriangleFan, and Triangles are accepted.
        /// </param>
        /// <param name="count">
        /// Specifies the number of elements to be rendered.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be UnsignedByte or UnsignedShort.
        /// </param>
        /// <param name="indices">
        /// [length: COMPSIZE(count,type)]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        [Obsolete("Use PrimitiveType overload instead")]
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glDrawElements")]
        public static void DrawElements<T3>(OpenTK.Graphics.ES11.BeginMode mode, int count, OpenTK.Graphics.ES11.DrawElementsType type, [InAttribute, OutAttribute, CountAttribute(Computed = "count,type")] ref T3 indices)
            where T3 : struct
         { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Render primitives from array data
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, TriangleStrip, TriangleFan, and Triangles are accepted.
        /// </param>
        /// <param name="count">
        /// Specifies the number of elements to be rendered.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be UnsignedByte or UnsignedShort.
        /// </param>
        /// <param name="indices">
        /// [length: COMPSIZE(count,type)]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glDrawElements")]
        public static void DrawElements(OpenTK.Graphics.ES11.PrimitiveType mode, int count, OpenTK.Graphics.ES11.DrawElementsType type, [CountAttribute(Computed = "count,type")] IntPtr indices) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Render primitives from array data
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, TriangleStrip, TriangleFan, and Triangles are accepted.
        /// </param>
        /// <param name="count">
        /// Specifies the number of elements to be rendered.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be UnsignedByte or UnsignedShort.
        /// </param>
        /// <param name="indices">
        /// [length: COMPSIZE(count,type)]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glDrawElements")]
        public static void DrawElements<T3>(OpenTK.Graphics.ES11.PrimitiveType mode, int count, OpenTK.Graphics.ES11.DrawElementsType type, [InAttribute, OutAttribute, CountAttribute(Computed = "count,type")] T3[] indices)
            where T3 : struct
         { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Render primitives from array data
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, TriangleStrip, TriangleFan, and Triangles are accepted.
        /// </param>
        /// <param name="count">
        /// Specifies the number of elements to be rendered.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be UnsignedByte or UnsignedShort.
        /// </param>
        /// <param name="indices">
        /// [length: COMPSIZE(count,type)]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glDrawElements")]
        public static void DrawElements<T3>(OpenTK.Graphics.ES11.PrimitiveType mode, int count, OpenTK.Graphics.ES11.DrawElementsType type, [InAttribute, OutAttribute, CountAttribute(Computed = "count,type")] T3[,] indices)
            where T3 : struct
         { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Render primitives from array data
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, TriangleStrip, TriangleFan, and Triangles are accepted.
        /// </param>
        /// <param name="count">
        /// Specifies the number of elements to be rendered.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be UnsignedByte or UnsignedShort.
        /// </param>
        /// <param name="indices">
        /// [length: COMPSIZE(count,type)]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glDrawElements")]
        public static void DrawElements<T3>(OpenTK.Graphics.ES11.PrimitiveType mode, int count, OpenTK.Graphics.ES11.DrawElementsType type, [InAttribute, OutAttribute, CountAttribute(Computed = "count,type")] T3[,,] indices)
            where T3 : struct
         { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Render primitives from array data
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, TriangleStrip, TriangleFan, and Triangles are accepted.
        /// </param>
        /// <param name="count">
        /// Specifies the number of elements to be rendered.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be UnsignedByte or UnsignedShort.
        /// </param>
        /// <param name="indices">
        /// [length: COMPSIZE(count,type)]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glDrawElements")]
        public static void DrawElements<T3>(OpenTK.Graphics.ES11.PrimitiveType mode, int count, OpenTK.Graphics.ES11.DrawElementsType type, [InAttribute, OutAttribute, CountAttribute(Computed = "count,type")] ref T3 indices)
            where T3 : struct
         { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Enable or disable server-side GL capabilities
        /// </summary>
        /// <param name="cap">
        /// Specifies a symbolic constant indicating a GL capability.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glEnable")]
        public static void Enable(OpenTK.Graphics.ES11.All cap) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Enable or disable server-side GL capabilities
        /// </summary>
        /// <param name="cap">
        /// Specifies a symbolic constant indicating a GL capability.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glEnable")]
        public static void Enable(OpenTK.Graphics.ES11.EnableCap cap) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Enable or disable client-side capability
        /// </summary>
        /// <param name="array">
        /// Specifies the capability to enable. Symbolic constants ColorArray, EdgeFlagArray, FogCoordArray, IndexArray, NormalArray, SecondaryColorArray, TextureCoordArray, and VertexArray are accepted.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glEnableClientState")]
        public static void EnableClientState(OpenTK.Graphics.ES11.All array) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Enable or disable client-side capability
        /// </summary>
        /// <param name="array">
        /// Specifies the capability to enable. Symbolic constants ColorArray, EdgeFlagArray, FogCoordArray, IndexArray, NormalArray, SecondaryColorArray, TextureCoordArray, and VertexArray are accepted.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glEnableClientState")]
        public static void EnableClientState(OpenTK.Graphics.ES11.EnableCap array) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Block until all GL execution is complete
        /// </summary>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glFinish")]
        public static void Finish() { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Force execution of GL commands in finite time
        /// </summary>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glFlush")]
        public static void Flush() { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Specify fog parameters
        /// </summary>
        /// <param name="pname">
        /// Specifies a single-valued fog parameter. FogMode, FogDensity, FogStart, FogEnd, FogIndex, and FogCoordSrc are accepted.
        /// </param>
        /// <param name="param">
        /// Specifies the value that pname will be set to.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glFogf")]
        public static void Fog(OpenTK.Graphics.ES11.All pname, float param) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Specify fog parameters
        /// </summary>
        /// <param name="pname">
        /// Specifies a single-valued fog parameter. FogMode, FogDensity, FogStart, FogEnd, FogIndex, and FogCoordSrc are accepted.
        /// </param>
        /// <param name="param">
        /// Specifies the value that pname will be set to.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glFogf")]
        public static void Fog(OpenTK.Graphics.ES11.FogParameter pname, float param) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Specify fog parameters
        /// </summary>
        /// <param name="pname">
        /// Specifies a single-valued fog parameter. FogMode, FogDensity, FogStart, FogEnd, FogIndex, and FogCoordSrc are accepted.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// Specifies the value that pname will be set to.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glFogfv")]
        public static void Fog(OpenTK.Graphics.ES11.All pname, [CountAttribute(Computed = "pname")] float[] @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Specify fog parameters
        /// </summary>
        /// <param name="pname">
        /// Specifies a single-valued fog parameter. FogMode, FogDensity, FogStart, FogEnd, FogIndex, and FogCoordSrc are accepted.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// Specifies the value that pname will be set to.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glFogfv")]
        public static unsafe void Fog(OpenTK.Graphics.ES11.All pname, [CountAttribute(Computed = "pname")] float* @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Specify fog parameters
        /// </summary>
        /// <param name="pname">
        /// Specifies a single-valued fog parameter. FogMode, FogDensity, FogStart, FogEnd, FogIndex, and FogCoordSrc are accepted.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// Specifies the value that pname will be set to.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glFogfv")]
        public static void Fog(OpenTK.Graphics.ES11.FogParameter pname, [CountAttribute(Computed = "pname")] float[] @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Specify fog parameters
        /// </summary>
        /// <param name="pname">
        /// Specifies a single-valued fog parameter. FogMode, FogDensity, FogStart, FogEnd, FogIndex, and FogCoordSrc are accepted.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// Specifies the value that pname will be set to.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glFogfv")]
        public static unsafe void Fog(OpenTK.Graphics.ES11.FogParameter pname, [CountAttribute(Computed = "pname")] float* @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="pname">
        /// </param>
        /// <param name="param">
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glFogx")]
        public static void Fogx(OpenTK.Graphics.ES11.All pname, int param) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="pname">
        /// </param>
        /// <param name="param">
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glFogx")]
        public static void Fogx(OpenTK.Graphics.ES11.FogPName pname, int param) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="pname">
        /// </param>
        /// <param name="param">
        /// [length: COMPSIZE(pname)]
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glFogxv")]
        public static void Fogx(OpenTK.Graphics.ES11.All pname, [CountAttribute(Computed = "pname")] int[] param) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="pname">
        /// </param>
        /// <param name="param">
        /// [length: COMPSIZE(pname)]
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glFogxv")]
        public static unsafe void Fogx(OpenTK.Graphics.ES11.All pname, [CountAttribute(Computed = "pname")] int* param) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="pname">
        /// </param>
        /// <param name="param">
        /// [length: COMPSIZE(pname)]
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glFogxv")]
        public static void Fogx(OpenTK.Graphics.ES11.FogPName pname, [CountAttribute(Computed = "pname")] int[] param) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="pname">
        /// </param>
        /// <param name="param">
        /// [length: COMPSIZE(pname)]
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glFogxv")]
        public static unsafe void Fogx(OpenTK.Graphics.ES11.FogPName pname, [CountAttribute(Computed = "pname")] int* param) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Define front- and back-facing polygons
        /// </summary>
        /// <param name="mode">
        /// Specifies the orientation of front-facing polygons. Cw and Ccw are accepted. The initial value is Ccw.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glFrontFace")]
        public static void FrontFace(OpenTK.Graphics.ES11.All mode) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Define front- and back-facing polygons
        /// </summary>
        /// <param name="mode">
        /// Specifies the orientation of front-facing polygons. Cw and Ccw are accepted. The initial value is Ccw.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glFrontFace")]
        public static void FrontFace(OpenTK.Graphics.ES11.FrontFaceDirection mode) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Multiply the current matrix by a perspective matrix
        /// </summary>
        /// <param name="l">
        /// Specify the coordinates for the left and right vertical clipping planes.
        /// </param>
        /// <param name="r">
        /// Specify the coordinates for the left and right vertical clipping planes.
        /// </param>
        /// <param name="b">
        /// Specify the coordinates for the bottom and top horizontal clipping planes.
        /// </param>
        /// <param name="t">
        /// Specify the coordinates for the bottom and top horizontal clipping planes.
        /// </param>
        /// <param name="n">
        /// Specify the distances to the near and far depth clipping planes. Both distances must be positive.
        /// </param>
        /// <param name="f">
        /// Specify the distances to the near and far depth clipping planes. Both distances must be positive.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glFrustumf")]
        public static void Frustum(float l, float r, float b, float t, float n, float f) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="l">
        /// </param>
        /// <param name="r">
        /// </param>
        /// <param name="b">
        /// </param>
        /// <param name="t">
        /// </param>
        /// <param name="n">
        /// </param>
        /// <param name="f">
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glFrustumx")]
        public static void Frustumx(int l, int r, int b, int t, int n, int f) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Generate buffer object names
        /// </summary>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glGenBuffers")]
        public static int GenBuffer() { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Generate buffer object names
        /// </summary>
        /// <param name="n">
        /// Specifies the number of buffer object names to be generated.
        /// </param>
        /// <param name="buffers">
        /// [length: n]
        /// Specifies an array in which the generated buffer object names are stored.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glGenBuffers")]
        public static void GenBuffers(int n, [OutAttribute, CountAttribute(Parameter = "n")] int[] buffers) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Generate buffer object names
        /// </summary>
        /// <param name="n">
        /// Specifies the number of buffer object names to be generated.
        /// </param>
        /// <param name="buffers">
        /// [length: n]
        /// Specifies an array in which the generated buffer object names are stored.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glGenBuffers")]
        public static void GenBuffers(int n, [OutAttribute, CountAttribute(Parameter = "n")] out int buffers) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Generate buffer object names
        /// </summary>
        /// <param name="n">
        /// Specifies the number of buffer object names to be generated.
        /// </param>
        /// <param name="buffers">
        /// [length: n]
        /// Specifies an array in which the generated buffer object names are stored.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glGenBuffers")]
        public static unsafe void GenBuffers(int n, [OutAttribute, CountAttribute(Parameter = "n")] int* buffers) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Generate buffer object names
        /// </summary>
        /// <param name="n">
        /// Specifies the number of buffer object names to be generated.
        /// </param>
        /// <param name="buffers">
        /// [length: n]
        /// Specifies an array in which the generated buffer object names are stored.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glGenBuffers")]
        public static void GenBuffers(int n, [OutAttribute, CountAttribute(Parameter = "n")] uint[] buffers) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Generate buffer object names
        /// </summary>
        /// <param name="n">
        /// Specifies the number of buffer object names to be generated.
        /// </param>
        /// <param name="buffers">
        /// [length: n]
        /// Specifies an array in which the generated buffer object names are stored.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glGenBuffers")]
        public static void GenBuffers(int n, [OutAttribute, CountAttribute(Parameter = "n")] out uint buffers) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Generate buffer object names
        /// </summary>
        /// <param name="n">
        /// Specifies the number of buffer object names to be generated.
        /// </param>
        /// <param name="buffers">
        /// [length: n]
        /// Specifies an array in which the generated buffer object names are stored.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glGenBuffers")]
        public static unsafe void GenBuffers(int n, [OutAttribute, CountAttribute(Parameter = "n")] uint* buffers) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Generate texture names
        /// </summary>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glGenTextures")]
        public static int GenTexture() { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Generate texture names
        /// </summary>
        /// <param name="n">
        /// Specifies the number of texture names to be generated.
        /// </param>
        /// <param name="textures">
        /// [length: n]
        /// Specifies an array in which the generated texture names are stored.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glGenTextures")]
        public static void GenTextures(int n, [OutAttribute, CountAttribute(Parameter = "n")] int[] textures) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Generate texture names
        /// </summary>
        /// <param name="n">
        /// Specifies the number of texture names to be generated.
        /// </param>
        /// <param name="textures">
        /// [length: n]
        /// Specifies an array in which the generated texture names are stored.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glGenTextures")]
        public static void GenTextures(int n, [OutAttribute, CountAttribute(Parameter = "n")] out int textures) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Generate texture names
        /// </summary>
        /// <param name="n">
        /// Specifies the number of texture names to be generated.
        /// </param>
        /// <param name="textures">
        /// [length: n]
        /// Specifies an array in which the generated texture names are stored.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glGenTextures")]
        public static unsafe void GenTextures(int n, [OutAttribute, CountAttribute(Parameter = "n")] int* textures) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Generate texture names
        /// </summary>
        /// <param name="n">
        /// Specifies the number of texture names to be generated.
        /// </param>
        /// <param name="textures">
        /// [length: n]
        /// Specifies an array in which the generated texture names are stored.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glGenTextures")]
        public static void GenTextures(int n, [OutAttribute, CountAttribute(Parameter = "n")] uint[] textures) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Generate texture names
        /// </summary>
        /// <param name="n">
        /// Specifies the number of texture names to be generated.
        /// </param>
        /// <param name="textures">
        /// [length: n]
        /// Specifies an array in which the generated texture names are stored.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glGenTextures")]
        public static void GenTextures(int n, [OutAttribute, CountAttribute(Parameter = "n")] out uint textures) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Generate texture names
        /// </summary>
        /// <param name="n">
        /// Specifies the number of texture names to be generated.
        /// </param>
        /// <param name="textures">
        /// [length: n]
        /// Specifies an array in which the generated texture names are stored.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glGenTextures")]
        public static unsafe void GenTextures(int n, [OutAttribute, CountAttribute(Parameter = "n")] uint* textures) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="pname">
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glGetBooleanv")]
        public static bool GetBoolean(OpenTK.Graphics.ES11.All pname) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="pname">
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glGetBooleanv")]
        public static bool GetBoolean(OpenTK.Graphics.ES11.GetPName pname) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="pname">
        /// </param>
        /// <param name="data">
        /// [length: COMPSIZE(pname)]
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glGetBooleanv")]
        public static void GetBoolean(OpenTK.Graphics.ES11.All pname, [OutAttribute, CountAttribute(Computed = "pname")] bool[] data) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="pname">
        /// </param>
        /// <param name="data">
        /// [length: COMPSIZE(pname)]
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glGetBooleanv")]
        public static void GetBoolean(OpenTK.Graphics.ES11.All pname, [OutAttribute, CountAttribute(Computed = "pname")] out bool data) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="pname">
        /// </param>
        /// <param name="data">
        /// [length: COMPSIZE(pname)]
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glGetBooleanv")]
        public static unsafe void GetBoolean(OpenTK.Graphics.ES11.All pname, [OutAttribute, CountAttribute(Computed = "pname")] bool* data) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="pname">
        /// </param>
        /// <param name="data">
        /// [length: COMPSIZE(pname)]
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glGetBooleanv")]
        public static void GetBoolean(OpenTK.Graphics.ES11.GetPName pname, [OutAttribute, CountAttribute(Computed = "pname")] bool[] data) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="pname">
        /// </param>
        /// <param name="data">
        /// [length: COMPSIZE(pname)]
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glGetBooleanv")]
        public static void GetBoolean(OpenTK.Graphics.ES11.GetPName pname, [OutAttribute, CountAttribute(Computed = "pname")] out bool data) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="pname">
        /// </param>
        /// <param name="data">
        /// [length: COMPSIZE(pname)]
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glGetBooleanv")]
        public static unsafe void GetBoolean(OpenTK.Graphics.ES11.GetPName pname, [OutAttribute, CountAttribute(Computed = "pname")] bool* data) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Return parameters of a buffer object
        /// </summary>
        /// <param name="target">
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer or ElementArrayBuffer.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a buffer object parameter. Accepted values are BufferSize or BufferUsage.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// Returns the requested parameter.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glGetBufferParameteriv")]
        public static void GetBufferParameter(OpenTK.Graphics.ES11.All target, OpenTK.Graphics.ES11.All pname, [OutAttribute, CountAttribute(Computed = "pname")] int[] @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Return parameters of a buffer object
        /// </summary>
        /// <param name="target">
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer or ElementArrayBuffer.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a buffer object parameter. Accepted values are BufferSize or BufferUsage.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// Returns the requested parameter.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glGetBufferParameteriv")]
        public static void GetBufferParameter(OpenTK.Graphics.ES11.All target, OpenTK.Graphics.ES11.All pname, [OutAttribute, CountAttribute(Computed = "pname")] out int @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Return parameters of a buffer object
        /// </summary>
        /// <param name="target">
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer or ElementArrayBuffer.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a buffer object parameter. Accepted values are BufferSize or BufferUsage.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// Returns the requested parameter.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glGetBufferParameteriv")]
        public static unsafe void GetBufferParameter(OpenTK.Graphics.ES11.All target, OpenTK.Graphics.ES11.All pname, [OutAttribute, CountAttribute(Computed = "pname")] int* @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Return parameters of a buffer object
        /// </summary>
        /// <param name="target">
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer or ElementArrayBuffer.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a buffer object parameter. Accepted values are BufferSize or BufferUsage.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// Returns the requested parameter.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glGetBufferParameteriv")]
        public static void GetBufferParameter(OpenTK.Graphics.ES11.BufferTargetArb target, OpenTK.Graphics.ES11.All pname, [OutAttribute, CountAttribute(Computed = "pname")] int[] @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Return parameters of a buffer object
        /// </summary>
        /// <param name="target">
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer or ElementArrayBuffer.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a buffer object parameter. Accepted values are BufferSize or BufferUsage.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// Returns the requested parameter.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glGetBufferParameteriv")]
        public static void GetBufferParameter(OpenTK.Graphics.ES11.BufferTargetArb target, OpenTK.Graphics.ES11.All pname, [OutAttribute, CountAttribute(Computed = "pname")] out int @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Return parameters of a buffer object
        /// </summary>
        /// <param name="target">
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer or ElementArrayBuffer.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a buffer object parameter. Accepted values are BufferSize or BufferUsage.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// Returns the requested parameter.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glGetBufferParameteriv")]
        public static unsafe void GetBufferParameter(OpenTK.Graphics.ES11.BufferTargetArb target, OpenTK.Graphics.ES11.All pname, [OutAttribute, CountAttribute(Computed = "pname")] int* @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Return the coefficients of the specified clipping plane
        /// </summary>
        /// <param name="plane">
        /// Specifies a clipping plane. The number of clipping planes depends on the implementation, but at least six clipping planes are supported. They are identified by symbolic names of the form ClipPlane  where i ranges from 0 to the value of MaxClipPlanes - 1.
        /// </param>
        /// <param name="equation">
        /// [length: 4]
        /// Returns four double-precision values that are the coefficients of the plane equation of plane in eye coordinates. The initial value is (0, 0, 0, 0).
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glGetClipPlanef")]
        public static void GetClipPlane(OpenTK.Graphics.ES11.All plane, [OutAttribute, CountAttribute(Count = 4)] float[] equation) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Return the coefficients of the specified clipping plane
        /// </summary>
        /// <param name="plane">
        /// Specifies a clipping plane. The number of clipping planes depends on the implementation, but at least six clipping planes are supported. They are identified by symbolic names of the form ClipPlane  where i ranges from 0 to the value of MaxClipPlanes - 1.
        /// </param>
        /// <param name="equation">
        /// [length: 4]
        /// Returns four double-precision values that are the coefficients of the plane equation of plane in eye coordinates. The initial value is (0, 0, 0, 0).
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glGetClipPlanef")]
        public static void GetClipPlane(OpenTK.Graphics.ES11.All plane, [OutAttribute, CountAttribute(Count = 4)] out float equation) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Return the coefficients of the specified clipping plane
        /// </summary>
        /// <param name="plane">
        /// Specifies a clipping plane. The number of clipping planes depends on the implementation, but at least six clipping planes are supported. They are identified by symbolic names of the form ClipPlane  where i ranges from 0 to the value of MaxClipPlanes - 1.
        /// </param>
        /// <param name="equation">
        /// [length: 4]
        /// Returns four double-precision values that are the coefficients of the plane equation of plane in eye coordinates. The initial value is (0, 0, 0, 0).
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glGetClipPlanef")]
        public static unsafe void GetClipPlane(OpenTK.Graphics.ES11.All plane, [OutAttribute, CountAttribute(Count = 4)] float* equation) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Return the coefficients of the specified clipping plane
        /// </summary>
        /// <param name="plane">
        /// Specifies a clipping plane. The number of clipping planes depends on the implementation, but at least six clipping planes are supported. They are identified by symbolic names of the form ClipPlane  where i ranges from 0 to the value of MaxClipPlanes - 1.
        /// </param>
        /// <param name="equation">
        /// [length: 4]
        /// Returns four double-precision values that are the coefficients of the plane equation of plane in eye coordinates. The initial value is (0, 0, 0, 0).
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glGetClipPlanef")]
        public static void GetClipPlane(OpenTK.Graphics.ES11.ClipPlaneName plane, [OutAttribute, CountAttribute(Count = 4)] float[] equation) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Return the coefficients of the specified clipping plane
        /// </summary>
        /// <param name="plane">
        /// Specifies a clipping plane. The number of clipping planes depends on the implementation, but at least six clipping planes are supported. They are identified by symbolic names of the form ClipPlane  where i ranges from 0 to the value of MaxClipPlanes - 1.
        /// </param>
        /// <param name="equation">
        /// [length: 4]
        /// Returns four double-precision values that are the coefficients of the plane equation of plane in eye coordinates. The initial value is (0, 0, 0, 0).
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glGetClipPlanef")]
        public static void GetClipPlane(OpenTK.Graphics.ES11.ClipPlaneName plane, [OutAttribute, CountAttribute(Count = 4)] out float equation) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Return the coefficients of the specified clipping plane
        /// </summary>
        /// <param name="plane">
        /// Specifies a clipping plane. The number of clipping planes depends on the implementation, but at least six clipping planes are supported. They are identified by symbolic names of the form ClipPlane  where i ranges from 0 to the value of MaxClipPlanes - 1.
        /// </param>
        /// <param name="equation">
        /// [length: 4]
        /// Returns four double-precision values that are the coefficients of the plane equation of plane in eye coordinates. The initial value is (0, 0, 0, 0).
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glGetClipPlanef")]
        public static unsafe void GetClipPlane(OpenTK.Graphics.ES11.ClipPlaneName plane, [OutAttribute, CountAttribute(Count = 4)] float* equation) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="plane">
        /// </param>
        /// <param name="equation">
        /// [length: 4]
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glGetClipPlanex")]
        public static void GetClipPlanex(OpenTK.Graphics.ES11.All plane, [OutAttribute, CountAttribute(Count = 4)] int[] equation) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="plane">
        /// </param>
        /// <param name="equation">
        /// [length: 4]
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glGetClipPlanex")]
        public static void GetClipPlanex(OpenTK.Graphics.ES11.All plane, [OutAttribute, CountAttribute(Count = 4)] out int equation) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="plane">
        /// </param>
        /// <param name="equation">
        /// [length: 4]
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glGetClipPlanex")]
        public static unsafe void GetClipPlanex(OpenTK.Graphics.ES11.All plane, [OutAttribute, CountAttribute(Count = 4)] int* equation) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="plane">
        /// </param>
        /// <param name="equation">
        /// [length: 4]
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glGetClipPlanex")]
        public static void GetClipPlanex(OpenTK.Graphics.ES11.ClipPlaneName plane, [OutAttribute, CountAttribute(Count = 4)] int[] equation) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="plane">
        /// </param>
        /// <param name="equation">
        /// [length: 4]
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glGetClipPlanex")]
        public static void GetClipPlanex(OpenTK.Graphics.ES11.ClipPlaneName plane, [OutAttribute, CountAttribute(Count = 4)] out int equation) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="plane">
        /// </param>
        /// <param name="equation">
        /// [length: 4]
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glGetClipPlanex")]
        public static unsafe void GetClipPlanex(OpenTK.Graphics.ES11.ClipPlaneName plane, [OutAttribute, CountAttribute(Count = 4)] int* equation) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// Retrieve messages from the debug message log
        /// </summary>
        /// <param name="count">
        /// The number of debug messages to retrieve from the log.
        /// </param>
        /// <param name="bufSize">
        /// The size of the buffer whose address is given by messageLog.
        /// </param>
        /// <param name="sources">
        /// [length: count]
        /// The address of an array of variables to receive the sources of the retrieved messages.
        /// </param>
        /// <param name="types">
        /// [length: count]
        /// The address of an array of variables to receive the types of the retrieved messages.
        /// </param>
        /// <param name="ids">
        /// [length: count]
        /// The address of an array of unsigned integers to receive the ids of the retrieved messages.
        /// </param>
        /// <param name="severities">
        /// [length: count]
        /// The address of an array of variables to receive the severites of the retrieved messages.
        /// </param>
        /// <param name="lengths">
        /// [length: count]
        /// The address of an array of variables to receive the lengths of the received messages.
        /// </param>
        /// <param name="messageLog">
        /// [length: bufSize]
        /// The address of an array of characters that will receive the messages.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetDebugMessageLog")]
        public static int GetDebugMessageLog(int count, int bufSize, [OutAttribute, CountAttribute(Parameter = "count")] OpenTK.Graphics.ES11.All[] sources, [OutAttribute, CountAttribute(Parameter = "count")] OpenTK.Graphics.ES11.All[] types, [OutAttribute, CountAttribute(Parameter = "count")] int[] ids, [OutAttribute, CountAttribute(Parameter = "count")] OpenTK.Graphics.ES11.All[] severities, [OutAttribute, CountAttribute(Parameter = "count")] int[] lengths, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String messageLog) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// Retrieve messages from the debug message log
        /// </summary>
        /// <param name="count">
        /// The number of debug messages to retrieve from the log.
        /// </param>
        /// <param name="bufSize">
        /// The size of the buffer whose address is given by messageLog.
        /// </param>
        /// <param name="sources">
        /// [length: count]
        /// The address of an array of variables to receive the sources of the retrieved messages.
        /// </param>
        /// <param name="types">
        /// [length: count]
        /// The address of an array of variables to receive the types of the retrieved messages.
        /// </param>
        /// <param name="ids">
        /// [length: count]
        /// The address of an array of unsigned integers to receive the ids of the retrieved messages.
        /// </param>
        /// <param name="severities">
        /// [length: count]
        /// The address of an array of variables to receive the severites of the retrieved messages.
        /// </param>
        /// <param name="lengths">
        /// [length: count]
        /// The address of an array of variables to receive the lengths of the received messages.
        /// </param>
        /// <param name="messageLog">
        /// [length: bufSize]
        /// The address of an array of characters that will receive the messages.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetDebugMessageLog")]
        public static int GetDebugMessageLog(int count, int bufSize, [OutAttribute, CountAttribute(Parameter = "count")] out OpenTK.Graphics.ES11.All sources, [OutAttribute, CountAttribute(Parameter = "count")] out OpenTK.Graphics.ES11.All types, [OutAttribute, CountAttribute(Parameter = "count")] out int ids, [OutAttribute, CountAttribute(Parameter = "count")] out OpenTK.Graphics.ES11.All severities, [OutAttribute, CountAttribute(Parameter = "count")] out int lengths, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String messageLog) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// Retrieve messages from the debug message log
        /// </summary>
        /// <param name="count">
        /// The number of debug messages to retrieve from the log.
        /// </param>
        /// <param name="bufSize">
        /// The size of the buffer whose address is given by messageLog.
        /// </param>
        /// <param name="sources">
        /// [length: count]
        /// The address of an array of variables to receive the sources of the retrieved messages.
        /// </param>
        /// <param name="types">
        /// [length: count]
        /// The address of an array of variables to receive the types of the retrieved messages.
        /// </param>
        /// <param name="ids">
        /// [length: count]
        /// The address of an array of unsigned integers to receive the ids of the retrieved messages.
        /// </param>
        /// <param name="severities">
        /// [length: count]
        /// The address of an array of variables to receive the severites of the retrieved messages.
        /// </param>
        /// <param name="lengths">
        /// [length: count]
        /// The address of an array of variables to receive the lengths of the received messages.
        /// </param>
        /// <param name="messageLog">
        /// [length: bufSize]
        /// The address of an array of characters that will receive the messages.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetDebugMessageLog")]
        public static unsafe int GetDebugMessageLog(int count, int bufSize, [OutAttribute, CountAttribute(Parameter = "count")] OpenTK.Graphics.ES11.All* sources, [OutAttribute, CountAttribute(Parameter = "count")] OpenTK.Graphics.ES11.All* types, [OutAttribute, CountAttribute(Parameter = "count")] int* ids, [OutAttribute, CountAttribute(Parameter = "count")] OpenTK.Graphics.ES11.All* severities, [OutAttribute, CountAttribute(Parameter = "count")] int* lengths, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String messageLog) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// Retrieve messages from the debug message log
        /// </summary>
        /// <param name="count">
        /// The number of debug messages to retrieve from the log.
        /// </param>
        /// <param name="bufSize">
        /// The size of the buffer whose address is given by messageLog.
        /// </param>
        /// <param name="sources">
        /// [length: count]
        /// The address of an array of variables to receive the sources of the retrieved messages.
        /// </param>
        /// <param name="types">
        /// [length: count]
        /// The address of an array of variables to receive the types of the retrieved messages.
        /// </param>
        /// <param name="ids">
        /// [length: count]
        /// The address of an array of unsigned integers to receive the ids of the retrieved messages.
        /// </param>
        /// <param name="severities">
        /// [length: count]
        /// The address of an array of variables to receive the severites of the retrieved messages.
        /// </param>
        /// <param name="lengths">
        /// [length: count]
        /// The address of an array of variables to receive the lengths of the received messages.
        /// </param>
        /// <param name="messageLog">
        /// [length: bufSize]
        /// The address of an array of characters that will receive the messages.
        /// </param>
        [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetDebugMessageLog")]
        public static int GetDebugMessageLog(int count, int bufSize, [OutAttribute, CountAttribute(Parameter = "count")] OpenTK.Graphics.ES11.DebugSource[] sources, [OutAttribute, CountAttribute(Parameter = "count")] OpenTK.Graphics.ES11.DebugType[] types, [OutAttribute, CountAttribute(Parameter = "count")] int[] ids, [OutAttribute, CountAttribute(Parameter = "count")] OpenTK.Graphics.ES11.DebugSeverity[] severities, [OutAttribute, CountAttribute(Parameter = "count")] int[] lengths, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String messageLog) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// Retrieve messages from the debug message log
        /// </summary>
        /// <param name="count">
        /// The number of debug messages to retrieve from the log.
        /// </param>
        /// <param name="bufSize">
        /// The size of the buffer whose address is given by messageLog.
        /// </param>
        /// <param name="sources">
        /// [length: count]
        /// The address of an array of variables to receive the sources of the retrieved messages.
        /// </param>
        /// <param name="types">
        /// [length: count]
        /// The address of an array of variables to receive the types of the retrieved messages.
        /// </param>
        /// <param name="ids">
        /// [length: count]
        /// The address of an array of unsigned integers to receive the ids of the retrieved messages.
        /// </param>
        /// <param name="severities">
        /// [length: count]
        /// The address of an array of variables to receive the severites of the retrieved messages.
        /// </param>
        /// <param name="lengths">
        /// [length: count]
        /// The address of an array of variables to receive the lengths of the received messages.
        /// </param>
        /// <param name="messageLog">
        /// [length: bufSize]
        /// The address of an array of characters that will receive the messages.
        /// </param>
        [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetDebugMessageLog")]
        public static int GetDebugMessageLog(int count, int bufSize, [OutAttribute, CountAttribute(Parameter = "count")] out OpenTK.Graphics.ES11.DebugSource sources, [OutAttribute, CountAttribute(Parameter = "count")] out OpenTK.Graphics.ES11.DebugType types, [OutAttribute, CountAttribute(Parameter = "count")] out int ids, [OutAttribute, CountAttribute(Parameter = "count")] out OpenTK.Graphics.ES11.DebugSeverity severities, [OutAttribute, CountAttribute(Parameter = "count")] out int lengths, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String messageLog) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// Retrieve messages from the debug message log
        /// </summary>
        /// <param name="count">
        /// The number of debug messages to retrieve from the log.
        /// </param>
        /// <param name="bufSize">
        /// The size of the buffer whose address is given by messageLog.
        /// </param>
        /// <param name="sources">
        /// [length: count]
        /// The address of an array of variables to receive the sources of the retrieved messages.
        /// </param>
        /// <param name="types">
        /// [length: count]
        /// The address of an array of variables to receive the types of the retrieved messages.
        /// </param>
        /// <param name="ids">
        /// [length: count]
        /// The address of an array of unsigned integers to receive the ids of the retrieved messages.
        /// </param>
        /// <param name="severities">
        /// [length: count]
        /// The address of an array of variables to receive the severites of the retrieved messages.
        /// </param>
        /// <param name="lengths">
        /// [length: count]
        /// The address of an array of variables to receive the lengths of the received messages.
        /// </param>
        /// <param name="messageLog">
        /// [length: bufSize]
        /// The address of an array of characters that will receive the messages.
        /// </param>
        [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetDebugMessageLog")]
        public static unsafe int GetDebugMessageLog(int count, int bufSize, [OutAttribute, CountAttribute(Parameter = "count")] OpenTK.Graphics.ES11.DebugSource* sources, [OutAttribute, CountAttribute(Parameter = "count")] OpenTK.Graphics.ES11.DebugType* types, [OutAttribute, CountAttribute(Parameter = "count")] int* ids, [OutAttribute, CountAttribute(Parameter = "count")] OpenTK.Graphics.ES11.DebugSeverity* severities, [OutAttribute, CountAttribute(Parameter = "count")] int* lengths, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String messageLog) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// Retrieve messages from the debug message log
        /// </summary>
        /// <param name="count">
        /// The number of debug messages to retrieve from the log.
        /// </param>
        /// <param name="bufSize">
        /// The size of the buffer whose address is given by messageLog.
        /// </param>
        /// <param name="sources">
        /// [length: count]
        /// The address of an array of variables to receive the sources of the retrieved messages.
        /// </param>
        /// <param name="types">
        /// [length: count]
        /// The address of an array of variables to receive the types of the retrieved messages.
        /// </param>
        /// <param name="ids">
        /// [length: count]
        /// The address of an array of unsigned integers to receive the ids of the retrieved messages.
        /// </param>
        /// <param name="severities">
        /// [length: count]
        /// The address of an array of variables to receive the severites of the retrieved messages.
        /// </param>
        /// <param name="lengths">
        /// [length: count]
        /// The address of an array of variables to receive the lengths of the received messages.
        /// </param>
        /// <param name="messageLog">
        /// [length: bufSize]
        /// The address of an array of characters that will receive the messages.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetDebugMessageLog")]
        public static int GetDebugMessageLog(uint count, int bufSize, [OutAttribute, CountAttribute(Parameter = "count")] OpenTK.Graphics.ES11.All[] sources, [OutAttribute, CountAttribute(Parameter = "count")] OpenTK.Graphics.ES11.All[] types, [OutAttribute, CountAttribute(Parameter = "count")] uint[] ids, [OutAttribute, CountAttribute(Parameter = "count")] OpenTK.Graphics.ES11.All[] severities, [OutAttribute, CountAttribute(Parameter = "count")] int[] lengths, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String messageLog) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// Retrieve messages from the debug message log
        /// </summary>
        /// <param name="count">
        /// The number of debug messages to retrieve from the log.
        /// </param>
        /// <param name="bufSize">
        /// The size of the buffer whose address is given by messageLog.
        /// </param>
        /// <param name="sources">
        /// [length: count]
        /// The address of an array of variables to receive the sources of the retrieved messages.
        /// </param>
        /// <param name="types">
        /// [length: count]
        /// The address of an array of variables to receive the types of the retrieved messages.
        /// </param>
        /// <param name="ids">
        /// [length: count]
        /// The address of an array of unsigned integers to receive the ids of the retrieved messages.
        /// </param>
        /// <param name="severities">
        /// [length: count]
        /// The address of an array of variables to receive the severites of the retrieved messages.
        /// </param>
        /// <param name="lengths">
        /// [length: count]
        /// The address of an array of variables to receive the lengths of the received messages.
        /// </param>
        /// <param name="messageLog">
        /// [length: bufSize]
        /// The address of an array of characters that will receive the messages.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetDebugMessageLog")]
        public static int GetDebugMessageLog(uint count, int bufSize, [OutAttribute, CountAttribute(Parameter = "count")] out OpenTK.Graphics.ES11.All sources, [OutAttribute, CountAttribute(Parameter = "count")] out OpenTK.Graphics.ES11.All types, [OutAttribute, CountAttribute(Parameter = "count")] out uint ids, [OutAttribute, CountAttribute(Parameter = "count")] out OpenTK.Graphics.ES11.All severities, [OutAttribute, CountAttribute(Parameter = "count")] out int lengths, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String messageLog) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// Retrieve messages from the debug message log
        /// </summary>
        /// <param name="count">
        /// The number of debug messages to retrieve from the log.
        /// </param>
        /// <param name="bufSize">
        /// The size of the buffer whose address is given by messageLog.
        /// </param>
        /// <param name="sources">
        /// [length: count]
        /// The address of an array of variables to receive the sources of the retrieved messages.
        /// </param>
        /// <param name="types">
        /// [length: count]
        /// The address of an array of variables to receive the types of the retrieved messages.
        /// </param>
        /// <param name="ids">
        /// [length: count]
        /// The address of an array of unsigned integers to receive the ids of the retrieved messages.
        /// </param>
        /// <param name="severities">
        /// [length: count]
        /// The address of an array of variables to receive the severites of the retrieved messages.
        /// </param>
        /// <param name="lengths">
        /// [length: count]
        /// The address of an array of variables to receive the lengths of the received messages.
        /// </param>
        /// <param name="messageLog">
        /// [length: bufSize]
        /// The address of an array of characters that will receive the messages.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetDebugMessageLog")]
        public static unsafe int GetDebugMessageLog(uint count, int bufSize, [OutAttribute, CountAttribute(Parameter = "count")] OpenTK.Graphics.ES11.All* sources, [OutAttribute, CountAttribute(Parameter = "count")] OpenTK.Graphics.ES11.All* types, [OutAttribute, CountAttribute(Parameter = "count")] uint* ids, [OutAttribute, CountAttribute(Parameter = "count")] OpenTK.Graphics.ES11.All* severities, [OutAttribute, CountAttribute(Parameter = "count")] int* lengths, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String messageLog) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// Retrieve messages from the debug message log
        /// </summary>
        /// <param name="count">
        /// The number of debug messages to retrieve from the log.
        /// </param>
        /// <param name="bufSize">
        /// The size of the buffer whose address is given by messageLog.
        /// </param>
        /// <param name="sources">
        /// [length: count]
        /// The address of an array of variables to receive the sources of the retrieved messages.
        /// </param>
        /// <param name="types">
        /// [length: count]
        /// The address of an array of variables to receive the types of the retrieved messages.
        /// </param>
        /// <param name="ids">
        /// [length: count]
        /// The address of an array of unsigned integers to receive the ids of the retrieved messages.
        /// </param>
        /// <param name="severities">
        /// [length: count]
        /// The address of an array of variables to receive the severites of the retrieved messages.
        /// </param>
        /// <param name="lengths">
        /// [length: count]
        /// The address of an array of variables to receive the lengths of the received messages.
        /// </param>
        /// <param name="messageLog">
        /// [length: bufSize]
        /// The address of an array of characters that will receive the messages.
        /// </param>
        [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetDebugMessageLog")]
        public static int GetDebugMessageLog(uint count, int bufSize, [OutAttribute, CountAttribute(Parameter = "count")] OpenTK.Graphics.ES11.DebugSource[] sources, [OutAttribute, CountAttribute(Parameter = "count")] OpenTK.Graphics.ES11.DebugType[] types, [OutAttribute, CountAttribute(Parameter = "count")] uint[] ids, [OutAttribute, CountAttribute(Parameter = "count")] OpenTK.Graphics.ES11.DebugSeverity[] severities, [OutAttribute, CountAttribute(Parameter = "count")] int[] lengths, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String messageLog) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// Retrieve messages from the debug message log
        /// </summary>
        /// <param name="count">
        /// The number of debug messages to retrieve from the log.
        /// </param>
        /// <param name="bufSize">
        /// The size of the buffer whose address is given by messageLog.
        /// </param>
        /// <param name="sources">
        /// [length: count]
        /// The address of an array of variables to receive the sources of the retrieved messages.
        /// </param>
        /// <param name="types">
        /// [length: count]
        /// The address of an array of variables to receive the types of the retrieved messages.
        /// </param>
        /// <param name="ids">
        /// [length: count]
        /// The address of an array of unsigned integers to receive the ids of the retrieved messages.
        /// </param>
        /// <param name="severities">
        /// [length: count]
        /// The address of an array of variables to receive the severites of the retrieved messages.
        /// </param>
        /// <param name="lengths">
        /// [length: count]
        /// The address of an array of variables to receive the lengths of the received messages.
        /// </param>
        /// <param name="messageLog">
        /// [length: bufSize]
        /// The address of an array of characters that will receive the messages.
        /// </param>
        [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetDebugMessageLog")]
        public static int GetDebugMessageLog(uint count, int bufSize, [OutAttribute, CountAttribute(Parameter = "count")] out OpenTK.Graphics.ES11.DebugSource sources, [OutAttribute, CountAttribute(Parameter = "count")] out OpenTK.Graphics.ES11.DebugType types, [OutAttribute, CountAttribute(Parameter = "count")] out uint ids, [OutAttribute, CountAttribute(Parameter = "count")] out OpenTK.Graphics.ES11.DebugSeverity severities, [OutAttribute, CountAttribute(Parameter = "count")] out int lengths, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String messageLog) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// Retrieve messages from the debug message log
        /// </summary>
        /// <param name="count">
        /// The number of debug messages to retrieve from the log.
        /// </param>
        /// <param name="bufSize">
        /// The size of the buffer whose address is given by messageLog.
        /// </param>
        /// <param name="sources">
        /// [length: count]
        /// The address of an array of variables to receive the sources of the retrieved messages.
        /// </param>
        /// <param name="types">
        /// [length: count]
        /// The address of an array of variables to receive the types of the retrieved messages.
        /// </param>
        /// <param name="ids">
        /// [length: count]
        /// The address of an array of unsigned integers to receive the ids of the retrieved messages.
        /// </param>
        /// <param name="severities">
        /// [length: count]
        /// The address of an array of variables to receive the severites of the retrieved messages.
        /// </param>
        /// <param name="lengths">
        /// [length: count]
        /// The address of an array of variables to receive the lengths of the received messages.
        /// </param>
        /// <param name="messageLog">
        /// [length: bufSize]
        /// The address of an array of characters that will receive the messages.
        /// </param>
        [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetDebugMessageLog")]
        public static unsafe int GetDebugMessageLog(uint count, int bufSize, [OutAttribute, CountAttribute(Parameter = "count")] OpenTK.Graphics.ES11.DebugSource* sources, [OutAttribute, CountAttribute(Parameter = "count")] OpenTK.Graphics.ES11.DebugType* types, [OutAttribute, CountAttribute(Parameter = "count")] uint* ids, [OutAttribute, CountAttribute(Parameter = "count")] OpenTK.Graphics.ES11.DebugSeverity* severities, [OutAttribute, CountAttribute(Parameter = "count")] int* lengths, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String messageLog) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Return error information
        /// </summary>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glGetError")]
        public static OpenTK.Graphics.ES11.ErrorCode GetError() { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="pname">
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glGetFixedv")]
        public static int GetFixed(OpenTK.Graphics.ES11.All pname) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="pname">
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glGetFixedv")]
        public static int GetFixed(OpenTK.Graphics.ES11.GetPName pname) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="pname">
        /// </param>
        /// <param name="@params">
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glGetFixedv")]
        public static void GetFixed(OpenTK.Graphics.ES11.All pname, [OutAttribute] int[] @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="pname">
        /// </param>
        /// <param name="@params">
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glGetFixedv")]
        public static void GetFixed(OpenTK.Graphics.ES11.All pname, [OutAttribute] out int @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="pname">
        /// </param>
        /// <param name="@params">
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glGetFixedv")]
        public static unsafe void GetFixed(OpenTK.Graphics.ES11.All pname, [OutAttribute] int* @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="pname">
        /// </param>
        /// <param name="@params">
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glGetFixedv")]
        public static void GetFixed(OpenTK.Graphics.ES11.GetPName pname, [OutAttribute] int[] @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="pname">
        /// </param>
        /// <param name="@params">
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glGetFixedv")]
        public static void GetFixed(OpenTK.Graphics.ES11.GetPName pname, [OutAttribute] out int @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="pname">
        /// </param>
        /// <param name="@params">
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glGetFixedv")]
        public static unsafe void GetFixed(OpenTK.Graphics.ES11.GetPName pname, [OutAttribute] int* @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="pname">
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glGetFloatv")]
        public static float GetFloat(OpenTK.Graphics.ES11.All pname) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="pname">
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glGetFloatv")]
        public static float GetFloat(OpenTK.Graphics.ES11.GetPName pname) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="pname">
        /// </param>
        /// <param name="data">
        /// [length: COMPSIZE(pname)]
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glGetFloatv")]
        public static void GetFloat(OpenTK.Graphics.ES11.All pname, [OutAttribute, CountAttribute(Computed = "pname")] float[] data) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="pname">
        /// </param>
        /// <param name="data">
        /// [length: COMPSIZE(pname)]
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glGetFloatv")]
        public static void GetFloat(OpenTK.Graphics.ES11.All pname, [OutAttribute, CountAttribute(Computed = "pname")] out float data) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="pname">
        /// </param>
        /// <param name="data">
        /// [length: COMPSIZE(pname)]
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glGetFloatv")]
        public static unsafe void GetFloat(OpenTK.Graphics.ES11.All pname, [OutAttribute, CountAttribute(Computed = "pname")] float* data) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="pname">
        /// </param>
        /// <param name="data">
        /// [length: COMPSIZE(pname)]
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glGetFloatv")]
        public static void GetFloat(OpenTK.Graphics.ES11.GetPName pname, [OutAttribute, CountAttribute(Computed = "pname")] float[] data) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="pname">
        /// </param>
        /// <param name="data">
        /// [length: COMPSIZE(pname)]
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glGetFloatv")]
        public static void GetFloat(OpenTK.Graphics.ES11.GetPName pname, [OutAttribute, CountAttribute(Computed = "pname")] out float data) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="pname">
        /// </param>
        /// <param name="data">
        /// [length: COMPSIZE(pname)]
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glGetFloatv")]
        public static unsafe void GetFloat(OpenTK.Graphics.ES11.GetPName pname, [OutAttribute, CountAttribute(Computed = "pname")] float* data) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="pname">
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glGetIntegerv")]
        public static int GetInteger(OpenTK.Graphics.ES11.All pname) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="pname">
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glGetIntegerv")]
        public static int GetInteger(OpenTK.Graphics.ES11.GetPName pname) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="pname">
        /// </param>
        /// <param name="data">
        /// [length: COMPSIZE(pname)]
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glGetIntegerv")]
        public static void GetInteger(OpenTK.Graphics.ES11.All pname, [OutAttribute, CountAttribute(Computed = "pname")] int[] data) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="pname">
        /// </param>
        /// <param name="data">
        /// [length: COMPSIZE(pname)]
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glGetIntegerv")]
        public static void GetInteger(OpenTK.Graphics.ES11.All pname, [OutAttribute, CountAttribute(Computed = "pname")] out int data) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="pname">
        /// </param>
        /// <param name="data">
        /// [length: COMPSIZE(pname)]
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glGetIntegerv")]
        public static unsafe void GetInteger(OpenTK.Graphics.ES11.All pname, [OutAttribute, CountAttribute(Computed = "pname")] int* data) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="pname">
        /// </param>
        /// <param name="data">
        /// [length: COMPSIZE(pname)]
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glGetIntegerv")]
        public static void GetInteger(OpenTK.Graphics.ES11.GetPName pname, [OutAttribute, CountAttribute(Computed = "pname")] int[] data) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="pname">
        /// </param>
        /// <param name="data">
        /// [length: COMPSIZE(pname)]
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glGetIntegerv")]
        public static void GetInteger(OpenTK.Graphics.ES11.GetPName pname, [OutAttribute, CountAttribute(Computed = "pname")] out int data) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="pname">
        /// </param>
        /// <param name="data">
        /// [length: COMPSIZE(pname)]
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glGetIntegerv")]
        public static unsafe void GetInteger(OpenTK.Graphics.ES11.GetPName pname, [OutAttribute, CountAttribute(Computed = "pname")] int* data) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Return light source parameter values
        /// </summary>
        /// <param name="light">
        /// Specifies a light source. The number of possible lights depends on the implementation, but at least eight lights are supported. They are identified by symbolic names of the form Light  where  ranges from 0 to the value of MaxLights - 1.
        /// </param>
        /// <param name="pname">
        /// Specifies a light source parameter for light. Accepted symbolic names are Ambient, Diffuse, Specular, Position, SpotDirection, SpotExponent, SpotCutoff, ConstantAttenuation, LinearAttenuation, and QuadraticAttenuation.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// Returns the requested data.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glGetLightfv")]
        public static void GetLight(OpenTK.Graphics.ES11.All light, OpenTK.Graphics.ES11.All pname, [OutAttribute, CountAttribute(Computed = "pname")] float[] @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Return light source parameter values
        /// </summary>
        /// <param name="light">
        /// Specifies a light source. The number of possible lights depends on the implementation, but at least eight lights are supported. They are identified by symbolic names of the form Light  where  ranges from 0 to the value of MaxLights - 1.
        /// </param>
        /// <param name="pname">
        /// Specifies a light source parameter for light. Accepted symbolic names are Ambient, Diffuse, Specular, Position, SpotDirection, SpotExponent, SpotCutoff, ConstantAttenuation, LinearAttenuation, and QuadraticAttenuation.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// Returns the requested data.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glGetLightfv")]
        public static void GetLight(OpenTK.Graphics.ES11.All light, OpenTK.Graphics.ES11.All pname, [OutAttribute, CountAttribute(Computed = "pname")] out float @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Return light source parameter values
        /// </summary>
        /// <param name="light">
        /// Specifies a light source. The number of possible lights depends on the implementation, but at least eight lights are supported. They are identified by symbolic names of the form Light  where  ranges from 0 to the value of MaxLights - 1.
        /// </param>
        /// <param name="pname">
        /// Specifies a light source parameter for light. Accepted symbolic names are Ambient, Diffuse, Specular, Position, SpotDirection, SpotExponent, SpotCutoff, ConstantAttenuation, LinearAttenuation, and QuadraticAttenuation.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// Returns the requested data.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glGetLightfv")]
        public static unsafe void GetLight(OpenTK.Graphics.ES11.All light, OpenTK.Graphics.ES11.All pname, [OutAttribute, CountAttribute(Computed = "pname")] float* @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Return light source parameter values
        /// </summary>
        /// <param name="light">
        /// Specifies a light source. The number of possible lights depends on the implementation, but at least eight lights are supported. They are identified by symbolic names of the form Light  where  ranges from 0 to the value of MaxLights - 1.
        /// </param>
        /// <param name="pname">
        /// Specifies a light source parameter for light. Accepted symbolic names are Ambient, Diffuse, Specular, Position, SpotDirection, SpotExponent, SpotCutoff, ConstantAttenuation, LinearAttenuation, and QuadraticAttenuation.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// Returns the requested data.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glGetLightfv")]
        public static void GetLight(OpenTK.Graphics.ES11.LightName light, OpenTK.Graphics.ES11.LightParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] float[] @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Return light source parameter values
        /// </summary>
        /// <param name="light">
        /// Specifies a light source. The number of possible lights depends on the implementation, but at least eight lights are supported. They are identified by symbolic names of the form Light  where  ranges from 0 to the value of MaxLights - 1.
        /// </param>
        /// <param name="pname">
        /// Specifies a light source parameter for light. Accepted symbolic names are Ambient, Diffuse, Specular, Position, SpotDirection, SpotExponent, SpotCutoff, ConstantAttenuation, LinearAttenuation, and QuadraticAttenuation.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// Returns the requested data.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glGetLightfv")]
        public static void GetLight(OpenTK.Graphics.ES11.LightName light, OpenTK.Graphics.ES11.LightParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] out float @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Return light source parameter values
        /// </summary>
        /// <param name="light">
        /// Specifies a light source. The number of possible lights depends on the implementation, but at least eight lights are supported. They are identified by symbolic names of the form Light  where  ranges from 0 to the value of MaxLights - 1.
        /// </param>
        /// <param name="pname">
        /// Specifies a light source parameter for light. Accepted symbolic names are Ambient, Diffuse, Specular, Position, SpotDirection, SpotExponent, SpotCutoff, ConstantAttenuation, LinearAttenuation, and QuadraticAttenuation.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// Returns the requested data.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glGetLightfv")]
        public static unsafe void GetLight(OpenTK.Graphics.ES11.LightName light, OpenTK.Graphics.ES11.LightParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] float* @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="light">
        /// </param>
        /// <param name="pname">
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glGetLightxv")]
        public static void GetLightx(OpenTK.Graphics.ES11.All light, OpenTK.Graphics.ES11.All pname, [OutAttribute, CountAttribute(Computed = "pname")] int[] @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="light">
        /// </param>
        /// <param name="pname">
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glGetLightxv")]
        public static void GetLightx(OpenTK.Graphics.ES11.All light, OpenTK.Graphics.ES11.All pname, [OutAttribute, CountAttribute(Computed = "pname")] out int @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="light">
        /// </param>
        /// <param name="pname">
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glGetLightxv")]
        public static unsafe void GetLightx(OpenTK.Graphics.ES11.All light, OpenTK.Graphics.ES11.All pname, [OutAttribute, CountAttribute(Computed = "pname")] int* @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="light">
        /// </param>
        /// <param name="pname">
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glGetLightxv")]
        public static void GetLightx(OpenTK.Graphics.ES11.LightName light, OpenTK.Graphics.ES11.LightParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] int[] @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="light">
        /// </param>
        /// <param name="pname">
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glGetLightxv")]
        public static void GetLightx(OpenTK.Graphics.ES11.LightName light, OpenTK.Graphics.ES11.LightParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] out int @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="light">
        /// </param>
        /// <param name="pname">
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glGetLightxv")]
        public static unsafe void GetLightx(OpenTK.Graphics.ES11.LightName light, OpenTK.Graphics.ES11.LightParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] int* @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Return material parameters
        /// </summary>
        /// <param name="face">
        /// Specifies which of the two materials is being queried. Front or Back are accepted, representing the front and back materials, respectively.
        /// </param>
        /// <param name="pname">
        /// Specifies the material parameter to return. Ambient, Diffuse, Specular, Emission, Shininess, and ColorIndexes are accepted.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// Returns the requested data.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glGetMaterialfv")]
        public static void GetMaterial(OpenTK.Graphics.ES11.All face, OpenTK.Graphics.ES11.All pname, [OutAttribute, CountAttribute(Computed = "pname")] float[] @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Return material parameters
        /// </summary>
        /// <param name="face">
        /// Specifies which of the two materials is being queried. Front or Back are accepted, representing the front and back materials, respectively.
        /// </param>
        /// <param name="pname">
        /// Specifies the material parameter to return. Ambient, Diffuse, Specular, Emission, Shininess, and ColorIndexes are accepted.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// Returns the requested data.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glGetMaterialfv")]
        public static void GetMaterial(OpenTK.Graphics.ES11.All face, OpenTK.Graphics.ES11.All pname, [OutAttribute, CountAttribute(Computed = "pname")] out float @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Return material parameters
        /// </summary>
        /// <param name="face">
        /// Specifies which of the two materials is being queried. Front or Back are accepted, representing the front and back materials, respectively.
        /// </param>
        /// <param name="pname">
        /// Specifies the material parameter to return. Ambient, Diffuse, Specular, Emission, Shininess, and ColorIndexes are accepted.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// Returns the requested data.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glGetMaterialfv")]
        public static unsafe void GetMaterial(OpenTK.Graphics.ES11.All face, OpenTK.Graphics.ES11.All pname, [OutAttribute, CountAttribute(Computed = "pname")] float* @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Return material parameters
        /// </summary>
        /// <param name="face">
        /// Specifies which of the two materials is being queried. Front or Back are accepted, representing the front and back materials, respectively.
        /// </param>
        /// <param name="pname">
        /// Specifies the material parameter to return. Ambient, Diffuse, Specular, Emission, Shininess, and ColorIndexes are accepted.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// Returns the requested data.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glGetMaterialfv")]
        public static void GetMaterial(OpenTK.Graphics.ES11.MaterialFace face, OpenTK.Graphics.ES11.MaterialParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] float[] @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Return material parameters
        /// </summary>
        /// <param name="face">
        /// Specifies which of the two materials is being queried. Front or Back are accepted, representing the front and back materials, respectively.
        /// </param>
        /// <param name="pname">
        /// Specifies the material parameter to return. Ambient, Diffuse, Specular, Emission, Shininess, and ColorIndexes are accepted.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// Returns the requested data.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glGetMaterialfv")]
        public static void GetMaterial(OpenTK.Graphics.ES11.MaterialFace face, OpenTK.Graphics.ES11.MaterialParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] out float @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Return material parameters
        /// </summary>
        /// <param name="face">
        /// Specifies which of the two materials is being queried. Front or Back are accepted, representing the front and back materials, respectively.
        /// </param>
        /// <param name="pname">
        /// Specifies the material parameter to return. Ambient, Diffuse, Specular, Emission, Shininess, and ColorIndexes are accepted.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// Returns the requested data.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glGetMaterialfv")]
        public static unsafe void GetMaterial(OpenTK.Graphics.ES11.MaterialFace face, OpenTK.Graphics.ES11.MaterialParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] float* @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="face">
        /// </param>
        /// <param name="pname">
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glGetMaterialxv")]
        public static void GetMaterialx(OpenTK.Graphics.ES11.All face, OpenTK.Graphics.ES11.All pname, [OutAttribute, CountAttribute(Computed = "pname")] int[] @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="face">
        /// </param>
        /// <param name="pname">
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glGetMaterialxv")]
        public static void GetMaterialx(OpenTK.Graphics.ES11.All face, OpenTK.Graphics.ES11.All pname, [OutAttribute, CountAttribute(Computed = "pname")] out int @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="face">
        /// </param>
        /// <param name="pname">
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glGetMaterialxv")]
        public static unsafe void GetMaterialx(OpenTK.Graphics.ES11.All face, OpenTK.Graphics.ES11.All pname, [OutAttribute, CountAttribute(Computed = "pname")] int* @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="face">
        /// </param>
        /// <param name="pname">
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glGetMaterialxv")]
        public static void GetMaterialx(OpenTK.Graphics.ES11.MaterialFace face, OpenTK.Graphics.ES11.MaterialParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] int[] @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="face">
        /// </param>
        /// <param name="pname">
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glGetMaterialxv")]
        public static void GetMaterialx(OpenTK.Graphics.ES11.MaterialFace face, OpenTK.Graphics.ES11.MaterialParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] out int @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="face">
        /// </param>
        /// <param name="pname">
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glGetMaterialxv")]
        public static unsafe void GetMaterialx(OpenTK.Graphics.ES11.MaterialFace face, OpenTK.Graphics.ES11.MaterialParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] int* @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// Retrieve the label of a named object identified within a namespace
        /// </summary>
        /// <param name="identifier">
        /// The namespace from which the name of the object is allocated.
        /// </param>
        /// <param name="name">
        /// The name of the object whose label to retrieve.
        /// </param>
        /// <param name="bufSize">
        /// The length of the buffer whose address is in label.
        /// </param>
        /// <param name="length">
        /// [length: 1]
        /// The address of a variable to receive the length of the object label.
        /// </param>
        /// <param name="label">
        /// [length: bufSize]
        /// The address of a string that will receive the object label.
        /// </param>
        [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetObjectLabel")]
        public static void GetObjectLabel(OpenTK.Graphics.ES11.All identifier, int name, int bufSize, [OutAttribute, CountAttribute(Count = 1)] out int length, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String label) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// Retrieve the label of a named object identified within a namespace
        /// </summary>
        /// <param name="identifier">
        /// The namespace from which the name of the object is allocated.
        /// </param>
        /// <param name="name">
        /// The name of the object whose label to retrieve.
        /// </param>
        /// <param name="bufSize">
        /// The length of the buffer whose address is in label.
        /// </param>
        /// <param name="length">
        /// [length: 1]
        /// The address of a variable to receive the length of the object label.
        /// </param>
        /// <param name="label">
        /// [length: bufSize]
        /// The address of a string that will receive the object label.
        /// </param>
        [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetObjectLabel")]
        public static unsafe void GetObjectLabel(OpenTK.Graphics.ES11.All identifier, int name, int bufSize, [OutAttribute, CountAttribute(Count = 1)] int* length, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String label) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// Retrieve the label of a named object identified within a namespace
        /// </summary>
        /// <param name="identifier">
        /// The namespace from which the name of the object is allocated.
        /// </param>
        /// <param name="name">
        /// The name of the object whose label to retrieve.
        /// </param>
        /// <param name="bufSize">
        /// The length of the buffer whose address is in label.
        /// </param>
        /// <param name="length">
        /// [length: 1]
        /// The address of a variable to receive the length of the object label.
        /// </param>
        /// <param name="label">
        /// [length: bufSize]
        /// The address of a string that will receive the object label.
        /// </param>
        [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetObjectLabel")]
        public static void GetObjectLabel(OpenTK.Graphics.ES11.All identifier, uint name, int bufSize, [OutAttribute, CountAttribute(Count = 1)] out int length, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String label) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// Retrieve the label of a named object identified within a namespace
        /// </summary>
        /// <param name="identifier">
        /// The namespace from which the name of the object is allocated.
        /// </param>
        /// <param name="name">
        /// The name of the object whose label to retrieve.
        /// </param>
        /// <param name="bufSize">
        /// The length of the buffer whose address is in label.
        /// </param>
        /// <param name="length">
        /// [length: 1]
        /// The address of a variable to receive the length of the object label.
        /// </param>
        /// <param name="label">
        /// [length: bufSize]
        /// The address of a string that will receive the object label.
        /// </param>
        [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetObjectLabel")]
        public static unsafe void GetObjectLabel(OpenTK.Graphics.ES11.All identifier, uint name, int bufSize, [OutAttribute, CountAttribute(Count = 1)] int* length, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String label) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// Retrieve the label of a sync object identified by a pointer
        /// </summary>
        /// <param name="ptr">
        /// The name of the sync object whose label to retrieve.
        /// </param>
        /// <param name="bufSize">
        /// The length of the buffer whose address is in label.
        /// </param>
        /// <param name="length">
        /// [length: 1]
        /// The address of a variable to receive the length of the object label.
        /// </param>
        /// <param name="label">
        /// [length: bufSize]
        /// The address of a string that will receive the object label.
        /// </param>
        [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetObjectPtrLabel")]
        public static void GetObjectPtrLabel(IntPtr ptr, int bufSize, [OutAttribute, CountAttribute(Count = 1)] out int length, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String label) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// Retrieve the label of a sync object identified by a pointer
        /// </summary>
        /// <param name="ptr">
        /// The name of the sync object whose label to retrieve.
        /// </param>
        /// <param name="bufSize">
        /// The length of the buffer whose address is in label.
        /// </param>
        /// <param name="length">
        /// [length: 1]
        /// The address of a variable to receive the length of the object label.
        /// </param>
        /// <param name="label">
        /// [length: bufSize]
        /// The address of a string that will receive the object label.
        /// </param>
        [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetObjectPtrLabel")]
        public static unsafe void GetObjectPtrLabel(IntPtr ptr, int bufSize, [OutAttribute, CountAttribute(Count = 1)] int* length, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String label) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// Retrieve the label of a sync object identified by a pointer
        /// </summary>
        /// <param name="ptr">
        /// The name of the sync object whose label to retrieve.
        /// </param>
        /// <param name="bufSize">
        /// The length of the buffer whose address is in label.
        /// </param>
        /// <param name="length">
        /// [length: 1]
        /// The address of a variable to receive the length of the object label.
        /// </param>
        /// <param name="label">
        /// [length: bufSize]
        /// The address of a string that will receive the object label.
        /// </param>
        [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetObjectPtrLabel")]
        public static void GetObjectPtrLabel<T0>([InAttribute, OutAttribute] T0[] ptr, int bufSize, [OutAttribute, CountAttribute(Count = 1)] out int length, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String label)
            where T0 : struct
         { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// Retrieve the label of a sync object identified by a pointer
        /// </summary>
        /// <param name="ptr">
        /// The name of the sync object whose label to retrieve.
        /// </param>
        /// <param name="bufSize">
        /// The length of the buffer whose address is in label.
        /// </param>
        /// <param name="length">
        /// [length: 1]
        /// The address of a variable to receive the length of the object label.
        /// </param>
        /// <param name="label">
        /// [length: bufSize]
        /// The address of a string that will receive the object label.
        /// </param>
        [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetObjectPtrLabel")]
        public static unsafe void GetObjectPtrLabel<T0>([InAttribute, OutAttribute] T0[] ptr, int bufSize, [OutAttribute, CountAttribute(Count = 1)] int* length, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String label)
            where T0 : struct
         { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// Retrieve the label of a sync object identified by a pointer
        /// </summary>
        /// <param name="ptr">
        /// The name of the sync object whose label to retrieve.
        /// </param>
        /// <param name="bufSize">
        /// The length of the buffer whose address is in label.
        /// </param>
        /// <param name="length">
        /// [length: 1]
        /// The address of a variable to receive the length of the object label.
        /// </param>
        /// <param name="label">
        /// [length: bufSize]
        /// The address of a string that will receive the object label.
        /// </param>
        [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetObjectPtrLabel")]
        public static void GetObjectPtrLabel<T0>([InAttribute, OutAttribute] T0[,] ptr, int bufSize, [OutAttribute, CountAttribute(Count = 1)] out int length, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String label)
            where T0 : struct
         { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// Retrieve the label of a sync object identified by a pointer
        /// </summary>
        /// <param name="ptr">
        /// The name of the sync object whose label to retrieve.
        /// </param>
        /// <param name="bufSize">
        /// The length of the buffer whose address is in label.
        /// </param>
        /// <param name="length">
        /// [length: 1]
        /// The address of a variable to receive the length of the object label.
        /// </param>
        /// <param name="label">
        /// [length: bufSize]
        /// The address of a string that will receive the object label.
        /// </param>
        [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetObjectPtrLabel")]
        public static unsafe void GetObjectPtrLabel<T0>([InAttribute, OutAttribute] T0[,] ptr, int bufSize, [OutAttribute, CountAttribute(Count = 1)] int* length, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String label)
            where T0 : struct
         { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// Retrieve the label of a sync object identified by a pointer
        /// </summary>
        /// <param name="ptr">
        /// The name of the sync object whose label to retrieve.
        /// </param>
        /// <param name="bufSize">
        /// The length of the buffer whose address is in label.
        /// </param>
        /// <param name="length">
        /// [length: 1]
        /// The address of a variable to receive the length of the object label.
        /// </param>
        /// <param name="label">
        /// [length: bufSize]
        /// The address of a string that will receive the object label.
        /// </param>
        [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetObjectPtrLabel")]
        public static void GetObjectPtrLabel<T0>([InAttribute, OutAttribute] T0[,,] ptr, int bufSize, [OutAttribute, CountAttribute(Count = 1)] out int length, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String label)
            where T0 : struct
         { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// Retrieve the label of a sync object identified by a pointer
        /// </summary>
        /// <param name="ptr">
        /// The name of the sync object whose label to retrieve.
        /// </param>
        /// <param name="bufSize">
        /// The length of the buffer whose address is in label.
        /// </param>
        /// <param name="length">
        /// [length: 1]
        /// The address of a variable to receive the length of the object label.
        /// </param>
        /// <param name="label">
        /// [length: bufSize]
        /// The address of a string that will receive the object label.
        /// </param>
        [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetObjectPtrLabel")]
        public static unsafe void GetObjectPtrLabel<T0>([InAttribute, OutAttribute] T0[,,] ptr, int bufSize, [OutAttribute, CountAttribute(Count = 1)] int* length, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String label)
            where T0 : struct
         { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// Retrieve the label of a sync object identified by a pointer
        /// </summary>
        /// <param name="ptr">
        /// The name of the sync object whose label to retrieve.
        /// </param>
        /// <param name="bufSize">
        /// The length of the buffer whose address is in label.
        /// </param>
        /// <param name="length">
        /// [length: 1]
        /// The address of a variable to receive the length of the object label.
        /// </param>
        /// <param name="label">
        /// [length: bufSize]
        /// The address of a string that will receive the object label.
        /// </param>
        [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetObjectPtrLabel")]
        public static void GetObjectPtrLabel<T0>([InAttribute, OutAttribute] ref T0 ptr, int bufSize, [OutAttribute, CountAttribute(Count = 1)] out int length, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String label)
            where T0 : struct
         { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// Retrieve the label of a sync object identified by a pointer
        /// </summary>
        /// <param name="ptr">
        /// The name of the sync object whose label to retrieve.
        /// </param>
        /// <param name="bufSize">
        /// The length of the buffer whose address is in label.
        /// </param>
        /// <param name="length">
        /// [length: 1]
        /// The address of a variable to receive the length of the object label.
        /// </param>
        /// <param name="label">
        /// [length: bufSize]
        /// The address of a string that will receive the object label.
        /// </param>
        [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetObjectPtrLabel")]
        public static unsafe void GetObjectPtrLabel<T0>([InAttribute, OutAttribute] ref T0 ptr, int bufSize, [OutAttribute, CountAttribute(Count = 1)] int* length, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String label)
            where T0 : struct
         { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// </summary>
        /// <param name="map">
        /// </param>
        /// <param name="size">
        /// </param>
        /// <param name="values">
        /// [length: size]
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glGetPixelMapxv")]
        public static void GetPixelMapx(OpenTK.Graphics.ES11.All map, int size, [OutAttribute, CountAttribute(Parameter = "size")] int[] values) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// </summary>
        /// <param name="map">
        /// </param>
        /// <param name="size">
        /// </param>
        /// <param name="values">
        /// [length: size]
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glGetPixelMapxv")]
        public static void GetPixelMapx(OpenTK.Graphics.ES11.All map, int size, [OutAttribute, CountAttribute(Parameter = "size")] out int values) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// </summary>
        /// <param name="map">
        /// </param>
        /// <param name="size">
        /// </param>
        /// <param name="values">
        /// [length: size]
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glGetPixelMapxv")]
        public static unsafe void GetPixelMapx(OpenTK.Graphics.ES11.All map, int size, [OutAttribute, CountAttribute(Parameter = "size")] int* values) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// </summary>
        /// <param name="map">
        /// </param>
        /// <param name="size">
        /// </param>
        /// <param name="values">
        /// [length: size]
        /// </param>
        [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glGetPixelMapxv")]
        public static void GetPixelMapx(OpenTK.Graphics.ES11.PixelMap map, int size, [OutAttribute, CountAttribute(Parameter = "size")] int[] values) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// </summary>
        /// <param name="map">
        /// </param>
        /// <param name="size">
        /// </param>
        /// <param name="values">
        /// [length: size]
        /// </param>
        [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glGetPixelMapxv")]
        public static void GetPixelMapx(OpenTK.Graphics.ES11.PixelMap map, int size, [OutAttribute, CountAttribute(Parameter = "size")] out int values) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// </summary>
        /// <param name="map">
        /// </param>
        /// <param name="size">
        /// </param>
        /// <param name="values">
        /// [length: size]
        /// </param>
        [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glGetPixelMapxv")]
        public static unsafe void GetPixelMapx(OpenTK.Graphics.ES11.PixelMap map, int size, [OutAttribute, CountAttribute(Parameter = "size")] int* values) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0 or KHR_debug|VERSION_ES_CM_1_0]
        /// Return the address of the specified pointer
        /// </summary>
        /// <param name="pname">
        /// Specifies the array or buffer pointer to be returned. Symbolic constants ColorArrayPointer, EdgeFlagArrayPointer, FogCoordArrayPointer, FeedbackBufferPointer, IndexArrayPointer, NormalArrayPointer, SecondaryColorArrayPointer, SelectionBufferPointer, TextureCoordArrayPointer, or VertexArrayPointer are accepted.
        /// </param>
        /// <param name="@params">
        /// [length: 1]
        /// Returns the pointer value specified by pname.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "KHR_debug|VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glGetPointerv")]
        public static void GetPointer(OpenTK.Graphics.ES11.All pname, [OutAttribute, CountAttribute(Count = 1)] IntPtr @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0 or KHR_debug|VERSION_ES_CM_1_0]
        /// Return the address of the specified pointer
        /// </summary>
        /// <param name="pname">
        /// Specifies the array or buffer pointer to be returned. Symbolic constants ColorArrayPointer, EdgeFlagArrayPointer, FogCoordArrayPointer, FeedbackBufferPointer, IndexArrayPointer, NormalArrayPointer, SecondaryColorArrayPointer, SelectionBufferPointer, TextureCoordArrayPointer, or VertexArrayPointer are accepted.
        /// </param>
        /// <param name="@params">
        /// [length: 1]
        /// Returns the pointer value specified by pname.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "KHR_debug|VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glGetPointerv")]
        public static void GetPointer<T1>(OpenTK.Graphics.ES11.All pname, [InAttribute, OutAttribute, CountAttribute(Count = 1)] T1[] @params)
            where T1 : struct
         { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0 or KHR_debug|VERSION_ES_CM_1_0]
        /// Return the address of the specified pointer
        /// </summary>
        /// <param name="pname">
        /// Specifies the array or buffer pointer to be returned. Symbolic constants ColorArrayPointer, EdgeFlagArrayPointer, FogCoordArrayPointer, FeedbackBufferPointer, IndexArrayPointer, NormalArrayPointer, SecondaryColorArrayPointer, SelectionBufferPointer, TextureCoordArrayPointer, or VertexArrayPointer are accepted.
        /// </param>
        /// <param name="@params">
        /// [length: 1]
        /// Returns the pointer value specified by pname.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "KHR_debug|VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glGetPointerv")]
        public static void GetPointer<T1>(OpenTK.Graphics.ES11.All pname, [InAttribute, OutAttribute, CountAttribute(Count = 1)] T1[,] @params)
            where T1 : struct
         { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0 or KHR_debug|VERSION_ES_CM_1_0]
        /// Return the address of the specified pointer
        /// </summary>
        /// <param name="pname">
        /// Specifies the array or buffer pointer to be returned. Symbolic constants ColorArrayPointer, EdgeFlagArrayPointer, FogCoordArrayPointer, FeedbackBufferPointer, IndexArrayPointer, NormalArrayPointer, SecondaryColorArrayPointer, SelectionBufferPointer, TextureCoordArrayPointer, or VertexArrayPointer are accepted.
        /// </param>
        /// <param name="@params">
        /// [length: 1]
        /// Returns the pointer value specified by pname.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "KHR_debug|VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glGetPointerv")]
        public static void GetPointer<T1>(OpenTK.Graphics.ES11.All pname, [InAttribute, OutAttribute, CountAttribute(Count = 1)] T1[,,] @params)
            where T1 : struct
         { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0 or KHR_debug|VERSION_ES_CM_1_0]
        /// Return the address of the specified pointer
        /// </summary>
        /// <param name="pname">
        /// Specifies the array or buffer pointer to be returned. Symbolic constants ColorArrayPointer, EdgeFlagArrayPointer, FogCoordArrayPointer, FeedbackBufferPointer, IndexArrayPointer, NormalArrayPointer, SecondaryColorArrayPointer, SelectionBufferPointer, TextureCoordArrayPointer, or VertexArrayPointer are accepted.
        /// </param>
        /// <param name="@params">
        /// [length: 1]
        /// Returns the pointer value specified by pname.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "KHR_debug|VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glGetPointerv")]
        public static void GetPointer<T1>(OpenTK.Graphics.ES11.All pname, [InAttribute, OutAttribute, CountAttribute(Count = 1)] ref T1 @params)
            where T1 : struct
         { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0 or KHR_debug|VERSION_ES_CM_1_0]
        /// Return the address of the specified pointer
        /// </summary>
        /// <param name="pname">
        /// Specifies the array or buffer pointer to be returned. Symbolic constants ColorArrayPointer, EdgeFlagArrayPointer, FogCoordArrayPointer, FeedbackBufferPointer, IndexArrayPointer, NormalArrayPointer, SecondaryColorArrayPointer, SelectionBufferPointer, TextureCoordArrayPointer, or VertexArrayPointer are accepted.
        /// </param>
        /// <param name="@params">
        /// [length: 1]
        /// Returns the pointer value specified by pname.
        /// </param>
        [AutoGenerated(Category = "KHR_debug|VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glGetPointerv")]
        public static void GetPointer(OpenTK.Graphics.ES11.GetPointervPName pname, [OutAttribute, CountAttribute(Count = 1)] IntPtr @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0 or KHR_debug|VERSION_ES_CM_1_0]
        /// Return the address of the specified pointer
        /// </summary>
        /// <param name="pname">
        /// Specifies the array or buffer pointer to be returned. Symbolic constants ColorArrayPointer, EdgeFlagArrayPointer, FogCoordArrayPointer, FeedbackBufferPointer, IndexArrayPointer, NormalArrayPointer, SecondaryColorArrayPointer, SelectionBufferPointer, TextureCoordArrayPointer, or VertexArrayPointer are accepted.
        /// </param>
        /// <param name="@params">
        /// [length: 1]
        /// Returns the pointer value specified by pname.
        /// </param>
        [AutoGenerated(Category = "KHR_debug|VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glGetPointerv")]
        public static void GetPointer<T1>(OpenTK.Graphics.ES11.GetPointervPName pname, [InAttribute, OutAttribute, CountAttribute(Count = 1)] T1[] @params)
            where T1 : struct
         { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0 or KHR_debug|VERSION_ES_CM_1_0]
        /// Return the address of the specified pointer
        /// </summary>
        /// <param name="pname">
        /// Specifies the array or buffer pointer to be returned. Symbolic constants ColorArrayPointer, EdgeFlagArrayPointer, FogCoordArrayPointer, FeedbackBufferPointer, IndexArrayPointer, NormalArrayPointer, SecondaryColorArrayPointer, SelectionBufferPointer, TextureCoordArrayPointer, or VertexArrayPointer are accepted.
        /// </param>
        /// <param name="@params">
        /// [length: 1]
        /// Returns the pointer value specified by pname.
        /// </param>
        [AutoGenerated(Category = "KHR_debug|VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glGetPointerv")]
        public static void GetPointer<T1>(OpenTK.Graphics.ES11.GetPointervPName pname, [InAttribute, OutAttribute, CountAttribute(Count = 1)] T1[,] @params)
            where T1 : struct
         { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0 or KHR_debug|VERSION_ES_CM_1_0]
        /// Return the address of the specified pointer
        /// </summary>
        /// <param name="pname">
        /// Specifies the array or buffer pointer to be returned. Symbolic constants ColorArrayPointer, EdgeFlagArrayPointer, FogCoordArrayPointer, FeedbackBufferPointer, IndexArrayPointer, NormalArrayPointer, SecondaryColorArrayPointer, SelectionBufferPointer, TextureCoordArrayPointer, or VertexArrayPointer are accepted.
        /// </param>
        /// <param name="@params">
        /// [length: 1]
        /// Returns the pointer value specified by pname.
        /// </param>
        [AutoGenerated(Category = "KHR_debug|VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glGetPointerv")]
        public static void GetPointer<T1>(OpenTK.Graphics.ES11.GetPointervPName pname, [InAttribute, OutAttribute, CountAttribute(Count = 1)] T1[,,] @params)
            where T1 : struct
         { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0 or KHR_debug|VERSION_ES_CM_1_0]
        /// Return the address of the specified pointer
        /// </summary>
        /// <param name="pname">
        /// Specifies the array or buffer pointer to be returned. Symbolic constants ColorArrayPointer, EdgeFlagArrayPointer, FogCoordArrayPointer, FeedbackBufferPointer, IndexArrayPointer, NormalArrayPointer, SecondaryColorArrayPointer, SelectionBufferPointer, TextureCoordArrayPointer, or VertexArrayPointer are accepted.
        /// </param>
        /// <param name="@params">
        /// [length: 1]
        /// Returns the pointer value specified by pname.
        /// </param>
        [AutoGenerated(Category = "KHR_debug|VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glGetPointerv")]
        public static void GetPointer<T1>(OpenTK.Graphics.ES11.GetPointervPName pname, [InAttribute, OutAttribute, CountAttribute(Count = 1)] ref T1 @params)
            where T1 : struct
         { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Return a string describing the current GL connection
        /// </summary>
        /// <param name="name">
        /// Specifies a symbolic constant, one of Vendor, Renderer, Version, ShadingLanguageVersion, or Extensions.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glGetString")]
        public static String GetString(OpenTK.Graphics.ES11.All name) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Return a string describing the current GL connection
        /// </summary>
        /// <param name="name">
        /// Specifies a symbolic constant, one of Vendor, Renderer, Version, ShadingLanguageVersion, or Extensions.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glGetString")]
        public static String GetString(OpenTK.Graphics.ES11.StringName name) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Return texture environment parameters
        /// </summary>
        /// <param name="target">
        /// Specifies a texture environment. May be TextureEnv, TextureFilterControl, or PointSprite.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a texture environment parameter. Accepted values are TextureEnvMode, TextureEnvColor, TextureLodBias, CombineRgb, CombineAlpha, Src0Rgb, Src1Rgb, Src2Rgb, Src0Alpha, Src1Alpha, Src2Alpha, Operand0Rgb, Operand1Rgb, Operand2Rgb, Operand0Alpha, Operand1Alpha, Operand2Alpha, RgbScale, AlphaScale, or CoordReplace.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// Returns the requested data.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glGetTexEnvfv")]
        public static void GetTexEnv(OpenTK.Graphics.ES11.All target, OpenTK.Graphics.ES11.All pname, [OutAttribute, CountAttribute(Computed = "pname")] float[] @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Return texture environment parameters
        /// </summary>
        /// <param name="target">
        /// Specifies a texture environment. May be TextureEnv, TextureFilterControl, or PointSprite.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a texture environment parameter. Accepted values are TextureEnvMode, TextureEnvColor, TextureLodBias, CombineRgb, CombineAlpha, Src0Rgb, Src1Rgb, Src2Rgb, Src0Alpha, Src1Alpha, Src2Alpha, Operand0Rgb, Operand1Rgb, Operand2Rgb, Operand0Alpha, Operand1Alpha, Operand2Alpha, RgbScale, AlphaScale, or CoordReplace.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// Returns the requested data.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glGetTexEnvfv")]
        public static void GetTexEnv(OpenTK.Graphics.ES11.All target, OpenTK.Graphics.ES11.All pname, [OutAttribute, CountAttribute(Computed = "pname")] out float @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Return texture environment parameters
        /// </summary>
        /// <param name="target">
        /// Specifies a texture environment. May be TextureEnv, TextureFilterControl, or PointSprite.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a texture environment parameter. Accepted values are TextureEnvMode, TextureEnvColor, TextureLodBias, CombineRgb, CombineAlpha, Src0Rgb, Src1Rgb, Src2Rgb, Src0Alpha, Src1Alpha, Src2Alpha, Operand0Rgb, Operand1Rgb, Operand2Rgb, Operand0Alpha, Operand1Alpha, Operand2Alpha, RgbScale, AlphaScale, or CoordReplace.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// Returns the requested data.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glGetTexEnvfv")]
        public static unsafe void GetTexEnv(OpenTK.Graphics.ES11.All target, OpenTK.Graphics.ES11.All pname, [OutAttribute, CountAttribute(Computed = "pname")] float* @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Return texture environment parameters
        /// </summary>
        /// <param name="target">
        /// Specifies a texture environment. May be TextureEnv, TextureFilterControl, or PointSprite.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a texture environment parameter. Accepted values are TextureEnvMode, TextureEnvColor, TextureLodBias, CombineRgb, CombineAlpha, Src0Rgb, Src1Rgb, Src2Rgb, Src0Alpha, Src1Alpha, Src2Alpha, Operand0Rgb, Operand1Rgb, Operand2Rgb, Operand0Alpha, Operand1Alpha, Operand2Alpha, RgbScale, AlphaScale, or CoordReplace.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// Returns the requested data.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glGetTexEnvfv")]
        public static void GetTexEnv(OpenTK.Graphics.ES11.TextureEnvTarget target, OpenTK.Graphics.ES11.TextureEnvParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] float[] @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Return texture environment parameters
        /// </summary>
        /// <param name="target">
        /// Specifies a texture environment. May be TextureEnv, TextureFilterControl, or PointSprite.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a texture environment parameter. Accepted values are TextureEnvMode, TextureEnvColor, TextureLodBias, CombineRgb, CombineAlpha, Src0Rgb, Src1Rgb, Src2Rgb, Src0Alpha, Src1Alpha, Src2Alpha, Operand0Rgb, Operand1Rgb, Operand2Rgb, Operand0Alpha, Operand1Alpha, Operand2Alpha, RgbScale, AlphaScale, or CoordReplace.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// Returns the requested data.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glGetTexEnvfv")]
        public static void GetTexEnv(OpenTK.Graphics.ES11.TextureEnvTarget target, OpenTK.Graphics.ES11.TextureEnvParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] out float @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Return texture environment parameters
        /// </summary>
        /// <param name="target">
        /// Specifies a texture environment. May be TextureEnv, TextureFilterControl, or PointSprite.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a texture environment parameter. Accepted values are TextureEnvMode, TextureEnvColor, TextureLodBias, CombineRgb, CombineAlpha, Src0Rgb, Src1Rgb, Src2Rgb, Src0Alpha, Src1Alpha, Src2Alpha, Operand0Rgb, Operand1Rgb, Operand2Rgb, Operand0Alpha, Operand1Alpha, Operand2Alpha, RgbScale, AlphaScale, or CoordReplace.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// Returns the requested data.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glGetTexEnvfv")]
        public static unsafe void GetTexEnv(OpenTK.Graphics.ES11.TextureEnvTarget target, OpenTK.Graphics.ES11.TextureEnvParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] float* @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Return texture environment parameters
        /// </summary>
        /// <param name="target">
        /// Specifies a texture environment. May be TextureEnv, TextureFilterControl, or PointSprite.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a texture environment parameter. Accepted values are TextureEnvMode, TextureEnvColor, TextureLodBias, CombineRgb, CombineAlpha, Src0Rgb, Src1Rgb, Src2Rgb, Src0Alpha, Src1Alpha, Src2Alpha, Operand0Rgb, Operand1Rgb, Operand2Rgb, Operand0Alpha, Operand1Alpha, Operand2Alpha, RgbScale, AlphaScale, or CoordReplace.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// Returns the requested data.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glGetTexEnviv")]
        public static void GetTexEnv(OpenTK.Graphics.ES11.All target, OpenTK.Graphics.ES11.All pname, [OutAttribute, CountAttribute(Computed = "pname")] int[] @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Return texture environment parameters
        /// </summary>
        /// <param name="target">
        /// Specifies a texture environment. May be TextureEnv, TextureFilterControl, or PointSprite.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a texture environment parameter. Accepted values are TextureEnvMode, TextureEnvColor, TextureLodBias, CombineRgb, CombineAlpha, Src0Rgb, Src1Rgb, Src2Rgb, Src0Alpha, Src1Alpha, Src2Alpha, Operand0Rgb, Operand1Rgb, Operand2Rgb, Operand0Alpha, Operand1Alpha, Operand2Alpha, RgbScale, AlphaScale, or CoordReplace.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// Returns the requested data.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glGetTexEnviv")]
        public static void GetTexEnv(OpenTK.Graphics.ES11.All target, OpenTK.Graphics.ES11.All pname, [OutAttribute, CountAttribute(Computed = "pname")] out int @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Return texture environment parameters
        /// </summary>
        /// <param name="target">
        /// Specifies a texture environment. May be TextureEnv, TextureFilterControl, or PointSprite.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a texture environment parameter. Accepted values are TextureEnvMode, TextureEnvColor, TextureLodBias, CombineRgb, CombineAlpha, Src0Rgb, Src1Rgb, Src2Rgb, Src0Alpha, Src1Alpha, Src2Alpha, Operand0Rgb, Operand1Rgb, Operand2Rgb, Operand0Alpha, Operand1Alpha, Operand2Alpha, RgbScale, AlphaScale, or CoordReplace.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// Returns the requested data.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glGetTexEnviv")]
        public static unsafe void GetTexEnv(OpenTK.Graphics.ES11.All target, OpenTK.Graphics.ES11.All pname, [OutAttribute, CountAttribute(Computed = "pname")] int* @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Return texture environment parameters
        /// </summary>
        /// <param name="target">
        /// Specifies a texture environment. May be TextureEnv, TextureFilterControl, or PointSprite.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a texture environment parameter. Accepted values are TextureEnvMode, TextureEnvColor, TextureLodBias, CombineRgb, CombineAlpha, Src0Rgb, Src1Rgb, Src2Rgb, Src0Alpha, Src1Alpha, Src2Alpha, Operand0Rgb, Operand1Rgb, Operand2Rgb, Operand0Alpha, Operand1Alpha, Operand2Alpha, RgbScale, AlphaScale, or CoordReplace.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// Returns the requested data.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glGetTexEnviv")]
        public static void GetTexEnv(OpenTK.Graphics.ES11.TextureEnvTarget target, OpenTK.Graphics.ES11.TextureEnvParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] int[] @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Return texture environment parameters
        /// </summary>
        /// <param name="target">
        /// Specifies a texture environment. May be TextureEnv, TextureFilterControl, or PointSprite.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a texture environment parameter. Accepted values are TextureEnvMode, TextureEnvColor, TextureLodBias, CombineRgb, CombineAlpha, Src0Rgb, Src1Rgb, Src2Rgb, Src0Alpha, Src1Alpha, Src2Alpha, Operand0Rgb, Operand1Rgb, Operand2Rgb, Operand0Alpha, Operand1Alpha, Operand2Alpha, RgbScale, AlphaScale, or CoordReplace.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// Returns the requested data.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glGetTexEnviv")]
        public static void GetTexEnv(OpenTK.Graphics.ES11.TextureEnvTarget target, OpenTK.Graphics.ES11.TextureEnvParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] out int @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Return texture environment parameters
        /// </summary>
        /// <param name="target">
        /// Specifies a texture environment. May be TextureEnv, TextureFilterControl, or PointSprite.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a texture environment parameter. Accepted values are TextureEnvMode, TextureEnvColor, TextureLodBias, CombineRgb, CombineAlpha, Src0Rgb, Src1Rgb, Src2Rgb, Src0Alpha, Src1Alpha, Src2Alpha, Operand0Rgb, Operand1Rgb, Operand2Rgb, Operand0Alpha, Operand1Alpha, Operand2Alpha, RgbScale, AlphaScale, or CoordReplace.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// Returns the requested data.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glGetTexEnviv")]
        public static unsafe void GetTexEnv(OpenTK.Graphics.ES11.TextureEnvTarget target, OpenTK.Graphics.ES11.TextureEnvParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] int* @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="target">
        /// </param>
        /// <param name="pname">
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glGetTexEnvxv")]
        public static void GetTexEnvx(OpenTK.Graphics.ES11.All target, OpenTK.Graphics.ES11.All pname, [OutAttribute, CountAttribute(Computed = "pname")] int[] @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="target">
        /// </param>
        /// <param name="pname">
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glGetTexEnvxv")]
        public static void GetTexEnvx(OpenTK.Graphics.ES11.All target, OpenTK.Graphics.ES11.All pname, [OutAttribute, CountAttribute(Computed = "pname")] out int @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="target">
        /// </param>
        /// <param name="pname">
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glGetTexEnvxv")]
        public static unsafe void GetTexEnvx(OpenTK.Graphics.ES11.All target, OpenTK.Graphics.ES11.All pname, [OutAttribute, CountAttribute(Computed = "pname")] int* @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="target">
        /// </param>
        /// <param name="pname">
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glGetTexEnvxv")]
        public static void GetTexEnvx(OpenTK.Graphics.ES11.TextureEnvTarget target, OpenTK.Graphics.ES11.TextureEnvParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] int[] @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="target">
        /// </param>
        /// <param name="pname">
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glGetTexEnvxv")]
        public static void GetTexEnvx(OpenTK.Graphics.ES11.TextureEnvTarget target, OpenTK.Graphics.ES11.TextureEnvParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] out int @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="target">
        /// </param>
        /// <param name="pname">
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glGetTexEnvxv")]
        public static unsafe void GetTexEnvx(OpenTK.Graphics.ES11.TextureEnvTarget target, OpenTK.Graphics.ES11.TextureEnvParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] int* @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Return texture parameter values
        /// </summary>
        /// <param name="target">
        /// Specifies the symbolic name of the target texture of the active texture unit. Texture2D and TextureCubeMap are accepted.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a texture parameter. TextureMagFilter, TextureMinFilter, TextureWrapS, and TextureWrapT are accepted.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// Returns the texture parameter.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glGetTexParameterfv")]
        public static void GetTexParameter(OpenTK.Graphics.ES11.All target, OpenTK.Graphics.ES11.All pname, [OutAttribute, CountAttribute(Computed = "pname")] float[] @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Return texture parameter values
        /// </summary>
        /// <param name="target">
        /// Specifies the symbolic name of the target texture of the active texture unit. Texture2D and TextureCubeMap are accepted.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a texture parameter. TextureMagFilter, TextureMinFilter, TextureWrapS, and TextureWrapT are accepted.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// Returns the texture parameter.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glGetTexParameterfv")]
        public static void GetTexParameter(OpenTK.Graphics.ES11.All target, OpenTK.Graphics.ES11.All pname, [OutAttribute, CountAttribute(Computed = "pname")] out float @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Return texture parameter values
        /// </summary>
        /// <param name="target">
        /// Specifies the symbolic name of the target texture of the active texture unit. Texture2D and TextureCubeMap are accepted.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a texture parameter. TextureMagFilter, TextureMinFilter, TextureWrapS, and TextureWrapT are accepted.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// Returns the texture parameter.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glGetTexParameterfv")]
        public static unsafe void GetTexParameter(OpenTK.Graphics.ES11.All target, OpenTK.Graphics.ES11.All pname, [OutAttribute, CountAttribute(Computed = "pname")] float* @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Return texture parameter values
        /// </summary>
        /// <param name="target">
        /// Specifies the symbolic name of the target texture of the active texture unit. Texture2D and TextureCubeMap are accepted.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a texture parameter. TextureMagFilter, TextureMinFilter, TextureWrapS, and TextureWrapT are accepted.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// Returns the texture parameter.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glGetTexParameterfv")]
        public static void GetTexParameter(OpenTK.Graphics.ES11.TextureTarget target, OpenTK.Graphics.ES11.GetTextureParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] float[] @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Return texture parameter values
        /// </summary>
        /// <param name="target">
        /// Specifies the symbolic name of the target texture of the active texture unit. Texture2D and TextureCubeMap are accepted.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a texture parameter. TextureMagFilter, TextureMinFilter, TextureWrapS, and TextureWrapT are accepted.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// Returns the texture parameter.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glGetTexParameterfv")]
        public static void GetTexParameter(OpenTK.Graphics.ES11.TextureTarget target, OpenTK.Graphics.ES11.GetTextureParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] out float @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Return texture parameter values
        /// </summary>
        /// <param name="target">
        /// Specifies the symbolic name of the target texture of the active texture unit. Texture2D and TextureCubeMap are accepted.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a texture parameter. TextureMagFilter, TextureMinFilter, TextureWrapS, and TextureWrapT are accepted.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// Returns the texture parameter.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glGetTexParameterfv")]
        public static unsafe void GetTexParameter(OpenTK.Graphics.ES11.TextureTarget target, OpenTK.Graphics.ES11.GetTextureParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] float* @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Return texture parameter values
        /// </summary>
        /// <param name="target">
        /// Specifies the symbolic name of the target texture of the active texture unit. Texture2D and TextureCubeMap are accepted.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a texture parameter. TextureMagFilter, TextureMinFilter, TextureWrapS, and TextureWrapT are accepted.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// Returns the texture parameter.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glGetTexParameteriv")]
        public static void GetTexParameter(OpenTK.Graphics.ES11.All target, OpenTK.Graphics.ES11.All pname, [OutAttribute, CountAttribute(Computed = "pname")] int[] @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Return texture parameter values
        /// </summary>
        /// <param name="target">
        /// Specifies the symbolic name of the target texture of the active texture unit. Texture2D and TextureCubeMap are accepted.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a texture parameter. TextureMagFilter, TextureMinFilter, TextureWrapS, and TextureWrapT are accepted.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// Returns the texture parameter.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glGetTexParameteriv")]
        public static void GetTexParameter(OpenTK.Graphics.ES11.All target, OpenTK.Graphics.ES11.All pname, [OutAttribute, CountAttribute(Computed = "pname")] out int @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Return texture parameter values
        /// </summary>
        /// <param name="target">
        /// Specifies the symbolic name of the target texture of the active texture unit. Texture2D and TextureCubeMap are accepted.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a texture parameter. TextureMagFilter, TextureMinFilter, TextureWrapS, and TextureWrapT are accepted.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// Returns the texture parameter.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glGetTexParameteriv")]
        public static unsafe void GetTexParameter(OpenTK.Graphics.ES11.All target, OpenTK.Graphics.ES11.All pname, [OutAttribute, CountAttribute(Computed = "pname")] int* @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Return texture parameter values
        /// </summary>
        /// <param name="target">
        /// Specifies the symbolic name of the target texture of the active texture unit. Texture2D and TextureCubeMap are accepted.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a texture parameter. TextureMagFilter, TextureMinFilter, TextureWrapS, and TextureWrapT are accepted.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// Returns the texture parameter.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glGetTexParameteriv")]
        public static void GetTexParameter(OpenTK.Graphics.ES11.TextureTarget target, OpenTK.Graphics.ES11.GetTextureParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] int[] @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Return texture parameter values
        /// </summary>
        /// <param name="target">
        /// Specifies the symbolic name of the target texture of the active texture unit. Texture2D and TextureCubeMap are accepted.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a texture parameter. TextureMagFilter, TextureMinFilter, TextureWrapS, and TextureWrapT are accepted.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// Returns the texture parameter.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glGetTexParameteriv")]
        public static void GetTexParameter(OpenTK.Graphics.ES11.TextureTarget target, OpenTK.Graphics.ES11.GetTextureParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] out int @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Return texture parameter values
        /// </summary>
        /// <param name="target">
        /// Specifies the symbolic name of the target texture of the active texture unit. Texture2D and TextureCubeMap are accepted.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a texture parameter. TextureMagFilter, TextureMinFilter, TextureWrapS, and TextureWrapT are accepted.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// Returns the texture parameter.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glGetTexParameteriv")]
        public static unsafe void GetTexParameter(OpenTK.Graphics.ES11.TextureTarget target, OpenTK.Graphics.ES11.GetTextureParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] int* @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="target">
        /// </param>
        /// <param name="pname">
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glGetTexParameterxv")]
        public static void GetTexParameterx(OpenTK.Graphics.ES11.All target, OpenTK.Graphics.ES11.All pname, [OutAttribute, CountAttribute(Computed = "pname")] int[] @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="target">
        /// </param>
        /// <param name="pname">
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glGetTexParameterxv")]
        public static void GetTexParameterx(OpenTK.Graphics.ES11.All target, OpenTK.Graphics.ES11.All pname, [OutAttribute, CountAttribute(Computed = "pname")] out int @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="target">
        /// </param>
        /// <param name="pname">
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glGetTexParameterxv")]
        public static unsafe void GetTexParameterx(OpenTK.Graphics.ES11.All target, OpenTK.Graphics.ES11.All pname, [OutAttribute, CountAttribute(Computed = "pname")] int* @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="target">
        /// </param>
        /// <param name="pname">
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glGetTexParameterxv")]
        public static void GetTexParameterx(OpenTK.Graphics.ES11.TextureTarget target, OpenTK.Graphics.ES11.GetTextureParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] int[] @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="target">
        /// </param>
        /// <param name="pname">
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glGetTexParameterxv")]
        public static void GetTexParameterx(OpenTK.Graphics.ES11.TextureTarget target, OpenTK.Graphics.ES11.GetTextureParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] out int @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="target">
        /// </param>
        /// <param name="pname">
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glGetTexParameterxv")]
        public static unsafe void GetTexParameterx(OpenTK.Graphics.ES11.TextureTarget target, OpenTK.Graphics.ES11.GetTextureParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] int* @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Specify implementation-specific hints
        /// </summary>
        /// <param name="target">
        /// Specifies a symbolic constant indicating the behavior to be controlled. GenerateMipmapHint is accepted.
        /// </param>
        /// <param name="mode">
        /// Specifies a symbolic constant indicating the desired behavior. Fastest, Nicest, and DontCare are accepted.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glHint")]
        public static void Hint(OpenTK.Graphics.ES11.All target, OpenTK.Graphics.ES11.All mode) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Specify implementation-specific hints
        /// </summary>
        /// <param name="target">
        /// Specifies a symbolic constant indicating the behavior to be controlled. GenerateMipmapHint is accepted.
        /// </param>
        /// <param name="mode">
        /// Specifies a symbolic constant indicating the desired behavior. Fastest, Nicest, and DontCare are accepted.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glHint")]
        public static void Hint(OpenTK.Graphics.ES11.HintTarget target, OpenTK.Graphics.ES11.HintMode mode) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Determine if a name corresponds to a buffer object
        /// </summary>
        /// <param name="buffer">
        /// Specifies a value that may be the name of a buffer object.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glIsBuffer")]
        public static bool IsBuffer(int buffer) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Determine if a name corresponds to a buffer object
        /// </summary>
        /// <param name="buffer">
        /// Specifies a value that may be the name of a buffer object.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glIsBuffer")]
        public static bool IsBuffer(uint buffer) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Test whether a capability is enabled
        /// </summary>
        /// <param name="cap">
        /// Specifies a symbolic constant indicating a GL capability.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glIsEnabled")]
        public static bool IsEnabled(OpenTK.Graphics.ES11.All cap) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Test whether a capability is enabled
        /// </summary>
        /// <param name="cap">
        /// Specifies a symbolic constant indicating a GL capability.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glIsEnabled")]
        public static bool IsEnabled(OpenTK.Graphics.ES11.EnableCap cap) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Determine if a name corresponds to a texture
        /// </summary>
        /// <param name="texture">
        /// Specifies a value that may be the name of a texture.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glIsTexture")]
        public static bool IsTexture(int texture) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Determine if a name corresponds to a texture
        /// </summary>
        /// <param name="texture">
        /// Specifies a value that may be the name of a texture.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glIsTexture")]
        public static bool IsTexture(uint texture) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Set light source parameters
        /// </summary>
        /// <param name="light">
        /// Specifies a light. The number of lights depends on the implementation, but at least eight lights are supported. They are identified by symbolic names of the form Light , where i ranges from 0 to the value of MaxLights - 1.
        /// </param>
        /// <param name="pname">
        /// Specifies a single-valued light source parameter for light. SpotExponent, SpotCutoff, ConstantAttenuation, LinearAttenuation, and QuadraticAttenuation are accepted.
        /// </param>
        /// <param name="param">
        /// Specifies the value that parameter pname of light source light will be set to.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glLightf")]
        public static void Light(OpenTK.Graphics.ES11.All light, OpenTK.Graphics.ES11.All pname, float param) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Set light source parameters
        /// </summary>
        /// <param name="light">
        /// Specifies a light. The number of lights depends on the implementation, but at least eight lights are supported. They are identified by symbolic names of the form Light , where i ranges from 0 to the value of MaxLights - 1.
        /// </param>
        /// <param name="pname">
        /// Specifies a single-valued light source parameter for light. SpotExponent, SpotCutoff, ConstantAttenuation, LinearAttenuation, and QuadraticAttenuation are accepted.
        /// </param>
        /// <param name="param">
        /// Specifies the value that parameter pname of light source light will be set to.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glLightf")]
        public static void Light(OpenTK.Graphics.ES11.LightName light, OpenTK.Graphics.ES11.LightParameter pname, float param) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Set light source parameters
        /// </summary>
        /// <param name="light">
        /// Specifies a light. The number of lights depends on the implementation, but at least eight lights are supported. They are identified by symbolic names of the form Light , where i ranges from 0 to the value of MaxLights - 1.
        /// </param>
        /// <param name="pname">
        /// Specifies a single-valued light source parameter for light. SpotExponent, SpotCutoff, ConstantAttenuation, LinearAttenuation, and QuadraticAttenuation are accepted.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// Specifies the value that parameter pname of light source light will be set to.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glLightfv")]
        public static void Light(OpenTK.Graphics.ES11.All light, OpenTK.Graphics.ES11.All pname, [CountAttribute(Computed = "pname")] float[] @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Set light source parameters
        /// </summary>
        /// <param name="light">
        /// Specifies a light. The number of lights depends on the implementation, but at least eight lights are supported. They are identified by symbolic names of the form Light , where i ranges from 0 to the value of MaxLights - 1.
        /// </param>
        /// <param name="pname">
        /// Specifies a single-valued light source parameter for light. SpotExponent, SpotCutoff, ConstantAttenuation, LinearAttenuation, and QuadraticAttenuation are accepted.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// Specifies the value that parameter pname of light source light will be set to.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glLightfv")]
        public static unsafe void Light(OpenTK.Graphics.ES11.All light, OpenTK.Graphics.ES11.All pname, [CountAttribute(Computed = "pname")] float* @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Set light source parameters
        /// </summary>
        /// <param name="light">
        /// Specifies a light. The number of lights depends on the implementation, but at least eight lights are supported. They are identified by symbolic names of the form Light , where i ranges from 0 to the value of MaxLights - 1.
        /// </param>
        /// <param name="pname">
        /// Specifies a single-valued light source parameter for light. SpotExponent, SpotCutoff, ConstantAttenuation, LinearAttenuation, and QuadraticAttenuation are accepted.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// Specifies the value that parameter pname of light source light will be set to.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glLightfv")]
        public static void Light(OpenTK.Graphics.ES11.LightName light, OpenTK.Graphics.ES11.LightParameter pname, [CountAttribute(Computed = "pname")] float[] @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Set light source parameters
        /// </summary>
        /// <param name="light">
        /// Specifies a light. The number of lights depends on the implementation, but at least eight lights are supported. They are identified by symbolic names of the form Light , where i ranges from 0 to the value of MaxLights - 1.
        /// </param>
        /// <param name="pname">
        /// Specifies a single-valued light source parameter for light. SpotExponent, SpotCutoff, ConstantAttenuation, LinearAttenuation, and QuadraticAttenuation are accepted.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// Specifies the value that parameter pname of light source light will be set to.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glLightfv")]
        public static unsafe void Light(OpenTK.Graphics.ES11.LightName light, OpenTK.Graphics.ES11.LightParameter pname, [CountAttribute(Computed = "pname")] float* @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Set the lighting model parameters
        /// </summary>
        /// <param name="pname">
        /// Specifies a single-valued lighting model parameter. LightModelLocalViewer, LightModelColorControl, and LightModelTwoSide are accepted.
        /// </param>
        /// <param name="param">
        /// Specifies the value that param will be set to.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glLightModelf")]
        public static void LightModel(OpenTK.Graphics.ES11.All pname, float param) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Set the lighting model parameters
        /// </summary>
        /// <param name="pname">
        /// Specifies a single-valued lighting model parameter. LightModelLocalViewer, LightModelColorControl, and LightModelTwoSide are accepted.
        /// </param>
        /// <param name="param">
        /// Specifies the value that param will be set to.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glLightModelf")]
        public static void LightModel(OpenTK.Graphics.ES11.LightModelParameter pname, float param) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Set the lighting model parameters
        /// </summary>
        /// <param name="pname">
        /// Specifies a single-valued lighting model parameter. LightModelLocalViewer, LightModelColorControl, and LightModelTwoSide are accepted.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// Specifies the value that param will be set to.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glLightModelfv")]
        public static void LightModel(OpenTK.Graphics.ES11.All pname, [CountAttribute(Computed = "pname")] float[] @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Set the lighting model parameters
        /// </summary>
        /// <param name="pname">
        /// Specifies a single-valued lighting model parameter. LightModelLocalViewer, LightModelColorControl, and LightModelTwoSide are accepted.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// Specifies the value that param will be set to.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glLightModelfv")]
        public static unsafe void LightModel(OpenTK.Graphics.ES11.All pname, [CountAttribute(Computed = "pname")] float* @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Set the lighting model parameters
        /// </summary>
        /// <param name="pname">
        /// Specifies a single-valued lighting model parameter. LightModelLocalViewer, LightModelColorControl, and LightModelTwoSide are accepted.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// Specifies the value that param will be set to.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glLightModelfv")]
        public static void LightModel(OpenTK.Graphics.ES11.LightModelParameter pname, [CountAttribute(Computed = "pname")] float[] @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Set the lighting model parameters
        /// </summary>
        /// <param name="pname">
        /// Specifies a single-valued lighting model parameter. LightModelLocalViewer, LightModelColorControl, and LightModelTwoSide are accepted.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// Specifies the value that param will be set to.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glLightModelfv")]
        public static unsafe void LightModel(OpenTK.Graphics.ES11.LightModelParameter pname, [CountAttribute(Computed = "pname")] float* @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="pname">
        /// </param>
        /// <param name="param">
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glLightModelx")]
        public static void LightModelx(OpenTK.Graphics.ES11.All pname, int param) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="pname">
        /// </param>
        /// <param name="param">
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glLightModelx")]
        public static void LightModelx(OpenTK.Graphics.ES11.LightModelParameter pname, int param) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="pname">
        /// </param>
        /// <param name="param">
        /// [length: COMPSIZE(pname)]
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glLightModelxv")]
        public static void LightModelx(OpenTK.Graphics.ES11.All pname, [CountAttribute(Computed = "pname")] int[] param) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="pname">
        /// </param>
        /// <param name="param">
        /// [length: COMPSIZE(pname)]
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glLightModelxv")]
        public static unsafe void LightModelx(OpenTK.Graphics.ES11.All pname, [CountAttribute(Computed = "pname")] int* param) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="pname">
        /// </param>
        /// <param name="param">
        /// [length: COMPSIZE(pname)]
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glLightModelxv")]
        public static void LightModelx(OpenTK.Graphics.ES11.LightModelParameter pname, [CountAttribute(Computed = "pname")] int[] param) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="pname">
        /// </param>
        /// <param name="param">
        /// [length: COMPSIZE(pname)]
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glLightModelxv")]
        public static unsafe void LightModelx(OpenTK.Graphics.ES11.LightModelParameter pname, [CountAttribute(Computed = "pname")] int* param) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="light">
        /// </param>
        /// <param name="pname">
        /// </param>
        /// <param name="param">
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glLightx")]
        public static void Lightx(OpenTK.Graphics.ES11.All light, OpenTK.Graphics.ES11.All pname, int param) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="light">
        /// </param>
        /// <param name="pname">
        /// </param>
        /// <param name="param">
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glLightx")]
        public static void Lightx(OpenTK.Graphics.ES11.LightName light, OpenTK.Graphics.ES11.LightParameter pname, int param) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="light">
        /// </param>
        /// <param name="pname">
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glLightxv")]
        public static void Lightx(OpenTK.Graphics.ES11.All light, OpenTK.Graphics.ES11.All pname, [CountAttribute(Computed = "pname")] int[] @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="light">
        /// </param>
        /// <param name="pname">
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glLightxv")]
        public static unsafe void Lightx(OpenTK.Graphics.ES11.All light, OpenTK.Graphics.ES11.All pname, [CountAttribute(Computed = "pname")] int* @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="light">
        /// </param>
        /// <param name="pname">
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glLightxv")]
        public static void Lightx(OpenTK.Graphics.ES11.LightName light, OpenTK.Graphics.ES11.LightParameter pname, [CountAttribute(Computed = "pname")] int[] @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="light">
        /// </param>
        /// <param name="pname">
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glLightxv")]
        public static unsafe void Lightx(OpenTK.Graphics.ES11.LightName light, OpenTK.Graphics.ES11.LightParameter pname, [CountAttribute(Computed = "pname")] int* @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Specify the width of rasterized lines
        /// </summary>
        /// <param name="width">
        /// Specifies the width of rasterized lines. The initial value is 1.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glLineWidth")]
        public static void LineWidth(float width) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="width">
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glLineWidthx")]
        public static void LineWidthx(int width) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Replace the current matrix with the identity matrix
        /// </summary>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glLoadIdentity")]
        public static void LoadIdentity() { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Replace the current matrix with the specified matrix
        /// </summary>
        /// <param name="m">
        /// [length: 16]
        /// Specifies a pointer to 16 consecutive values, which are used as the elements of a 4  times  4 column-major matrix.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glLoadMatrixf")]
        public static void LoadMatrix([CountAttribute(Count = 16)] float[] m) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Replace the current matrix with the specified matrix
        /// </summary>
        /// <param name="m">
        /// [length: 16]
        /// Specifies a pointer to 16 consecutive values, which are used as the elements of a 4  times  4 column-major matrix.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glLoadMatrixf")]
        public static void LoadMatrix([CountAttribute(Count = 16)] ref float m) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Replace the current matrix with the specified matrix
        /// </summary>
        /// <param name="m">
        /// [length: 16]
        /// Specifies a pointer to 16 consecutive values, which are used as the elements of a 4  times  4 column-major matrix.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glLoadMatrixf")]
        public static unsafe void LoadMatrix([CountAttribute(Count = 16)] float* m) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="m">
        /// [length: 16]
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glLoadMatrixx")]
        public static void LoadMatrixx([CountAttribute(Count = 16)] int[] m) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="m">
        /// [length: 16]
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glLoadMatrixx")]
        public static void LoadMatrixx([CountAttribute(Count = 16)] ref int m) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="m">
        /// [length: 16]
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glLoadMatrixx")]
        public static unsafe void LoadMatrixx([CountAttribute(Count = 16)] int* m) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Specify a logical pixel operation for rendering
        /// </summary>
        /// <param name="opcode">
        /// Specifies a symbolic constant that selects a logical operation. The following symbols are accepted: Clear, Set, Copy, CopyInverted, Noop, Invert, And, Nand, Or, Nor, Xor, Equiv, AndReverse, AndInverted, OrReverse, and OrInverted. The initial value is Copy.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glLogicOp")]
        public static void LogicOp(OpenTK.Graphics.ES11.All opcode) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Specify a logical pixel operation for rendering
        /// </summary>
        /// <param name="opcode">
        /// Specifies a symbolic constant that selects a logical operation. The following symbols are accepted: Clear, Set, Copy, CopyInverted, Noop, Invert, And, Nand, Or, Nor, Xor, Equiv, AndReverse, AndInverted, OrReverse, and OrInverted. The initial value is Copy.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glLogicOp")]
        public static void LogicOp(OpenTK.Graphics.ES11.LogicOp opcode) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Specify material parameters for the lighting model
        /// </summary>
        /// <param name="face">
        /// Specifies which face or faces are being updated. Must be one of Front, Back, or FrontAndBack.
        /// </param>
        /// <param name="pname">
        /// Specifies the single-valued material parameter of the face or faces that is being updated. Must be Shininess.
        /// </param>
        /// <param name="param">
        /// Specifies the value that parameter Shininess will be set to.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glMaterialf")]
        public static void Material(OpenTK.Graphics.ES11.All face, OpenTK.Graphics.ES11.All pname, float param) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Specify material parameters for the lighting model
        /// </summary>
        /// <param name="face">
        /// Specifies which face or faces are being updated. Must be one of Front, Back, or FrontAndBack.
        /// </param>
        /// <param name="pname">
        /// Specifies the single-valued material parameter of the face or faces that is being updated. Must be Shininess.
        /// </param>
        /// <param name="param">
        /// Specifies the value that parameter Shininess will be set to.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glMaterialf")]
        public static void Material(OpenTK.Graphics.ES11.MaterialFace face, OpenTK.Graphics.ES11.MaterialParameter pname, float param) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Specify material parameters for the lighting model
        /// </summary>
        /// <param name="face">
        /// Specifies which face or faces are being updated. Must be one of Front, Back, or FrontAndBack.
        /// </param>
        /// <param name="pname">
        /// Specifies the single-valued material parameter of the face or faces that is being updated. Must be Shininess.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// Specifies the value that parameter Shininess will be set to.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glMaterialfv")]
        public static void Material(OpenTK.Graphics.ES11.All face, OpenTK.Graphics.ES11.All pname, [CountAttribute(Computed = "pname")] float[] @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Specify material parameters for the lighting model
        /// </summary>
        /// <param name="face">
        /// Specifies which face or faces are being updated. Must be one of Front, Back, or FrontAndBack.
        /// </param>
        /// <param name="pname">
        /// Specifies the single-valued material parameter of the face or faces that is being updated. Must be Shininess.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// Specifies the value that parameter Shininess will be set to.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glMaterialfv")]
        public static unsafe void Material(OpenTK.Graphics.ES11.All face, OpenTK.Graphics.ES11.All pname, [CountAttribute(Computed = "pname")] float* @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Specify material parameters for the lighting model
        /// </summary>
        /// <param name="face">
        /// Specifies which face or faces are being updated. Must be one of Front, Back, or FrontAndBack.
        /// </param>
        /// <param name="pname">
        /// Specifies the single-valued material parameter of the face or faces that is being updated. Must be Shininess.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// Specifies the value that parameter Shininess will be set to.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glMaterialfv")]
        public static void Material(OpenTK.Graphics.ES11.MaterialFace face, OpenTK.Graphics.ES11.MaterialParameter pname, [CountAttribute(Computed = "pname")] float[] @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Specify material parameters for the lighting model
        /// </summary>
        /// <param name="face">
        /// Specifies which face or faces are being updated. Must be one of Front, Back, or FrontAndBack.
        /// </param>
        /// <param name="pname">
        /// Specifies the single-valued material parameter of the face or faces that is being updated. Must be Shininess.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// Specifies the value that parameter Shininess will be set to.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glMaterialfv")]
        public static unsafe void Material(OpenTK.Graphics.ES11.MaterialFace face, OpenTK.Graphics.ES11.MaterialParameter pname, [CountAttribute(Computed = "pname")] float* @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="face">
        /// </param>
        /// <param name="pname">
        /// </param>
        /// <param name="param">
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glMaterialx")]
        public static void Materialx(OpenTK.Graphics.ES11.All face, OpenTK.Graphics.ES11.All pname, int param) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="face">
        /// </param>
        /// <param name="pname">
        /// </param>
        /// <param name="param">
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glMaterialx")]
        public static void Materialx(OpenTK.Graphics.ES11.MaterialFace face, OpenTK.Graphics.ES11.MaterialParameter pname, int param) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="face">
        /// </param>
        /// <param name="pname">
        /// </param>
        /// <param name="param">
        /// [length: COMPSIZE(pname)]
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glMaterialxv")]
        public static void Materialx(OpenTK.Graphics.ES11.All face, OpenTK.Graphics.ES11.All pname, [CountAttribute(Computed = "pname")] int[] param) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="face">
        /// </param>
        /// <param name="pname">
        /// </param>
        /// <param name="param">
        /// [length: COMPSIZE(pname)]
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glMaterialxv")]
        public static unsafe void Materialx(OpenTK.Graphics.ES11.All face, OpenTK.Graphics.ES11.All pname, [CountAttribute(Computed = "pname")] int* param) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="face">
        /// </param>
        /// <param name="pname">
        /// </param>
        /// <param name="param">
        /// [length: COMPSIZE(pname)]
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glMaterialxv")]
        public static void Materialx(OpenTK.Graphics.ES11.MaterialFace face, OpenTK.Graphics.ES11.MaterialParameter pname, [CountAttribute(Computed = "pname")] int[] param) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="face">
        /// </param>
        /// <param name="pname">
        /// </param>
        /// <param name="param">
        /// [length: COMPSIZE(pname)]
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glMaterialxv")]
        public static unsafe void Materialx(OpenTK.Graphics.ES11.MaterialFace face, OpenTK.Graphics.ES11.MaterialParameter pname, [CountAttribute(Computed = "pname")] int* param) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Specify which matrix is the current matrix
        /// </summary>
        /// <param name="mode">
        /// Specifies which matrix stack is the target for subsequent matrix operations. Three values are accepted: Modelview, Projection, and Texture. The initial value is Modelview. Additionally, if the ARB_imaging extension is supported, Color is also accepted.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glMatrixMode")]
        public static void MatrixMode(OpenTK.Graphics.ES11.All mode) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Specify which matrix is the current matrix
        /// </summary>
        /// <param name="mode">
        /// Specifies which matrix stack is the target for subsequent matrix operations. Three values are accepted: Modelview, Projection, and Texture. The initial value is Modelview. Additionally, if the ARB_imaging extension is supported, Color is also accepted.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glMatrixMode")]
        public static void MatrixMode(OpenTK.Graphics.ES11.MatrixMode mode) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Set the current texture coordinates
        /// </summary>
        /// <param name="target">
        /// Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of Texture, where i ranges from 0 to MaxTextureCoords - 1, which is an implementation-dependent value.
        /// </param>
        /// <param name="s">
        /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
        /// </param>
        /// <param name="t">
        /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
        /// </param>
        /// <param name="r">
        /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
        /// </param>
        /// <param name="q">
        /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glMultiTexCoord4f")]
        public static void MultiTexCoord4(OpenTK.Graphics.ES11.All target, float s, float t, float r, float q) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Set the current texture coordinates
        /// </summary>
        /// <param name="target">
        /// Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of Texture, where i ranges from 0 to MaxTextureCoords - 1, which is an implementation-dependent value.
        /// </param>
        /// <param name="s">
        /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
        /// </param>
        /// <param name="t">
        /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
        /// </param>
        /// <param name="r">
        /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
        /// </param>
        /// <param name="q">
        /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glMultiTexCoord4f")]
        public static void MultiTexCoord4(OpenTK.Graphics.ES11.TextureUnit target, float s, float t, float r, float q) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="texture">
        /// </param>
        /// <param name="s">
        /// </param>
        /// <param name="t">
        /// </param>
        /// <param name="r">
        /// </param>
        /// <param name="q">
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glMultiTexCoord4x")]
        public static void MultiTexCoord4x(OpenTK.Graphics.ES11.All texture, int s, int t, int r, int q) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="texture">
        /// </param>
        /// <param name="s">
        /// </param>
        /// <param name="t">
        /// </param>
        /// <param name="r">
        /// </param>
        /// <param name="q">
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glMultiTexCoord4x")]
        public static void MultiTexCoord4x(OpenTK.Graphics.ES11.TextureUnit texture, int s, int t, int r, int q) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Multiply the current matrix with the specified matrix
        /// </summary>
        /// <param name="m">
        /// [length: 16]
        /// Points to 16 consecutive values that are used as the elements of a 4  times  4 column-major matrix.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glMultMatrixf")]
        public static void MultMatrix([CountAttribute(Count = 16)] float[] m) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Multiply the current matrix with the specified matrix
        /// </summary>
        /// <param name="m">
        /// [length: 16]
        /// Points to 16 consecutive values that are used as the elements of a 4  times  4 column-major matrix.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glMultMatrixf")]
        public static void MultMatrix([CountAttribute(Count = 16)] ref float m) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Multiply the current matrix with the specified matrix
        /// </summary>
        /// <param name="m">
        /// [length: 16]
        /// Points to 16 consecutive values that are used as the elements of a 4  times  4 column-major matrix.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glMultMatrixf")]
        public static unsafe void MultMatrix([CountAttribute(Count = 16)] float* m) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="m">
        /// [length: 16]
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glMultMatrixx")]
        public static void MultMatrixx([CountAttribute(Count = 16)] int[] m) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="m">
        /// [length: 16]
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glMultMatrixx")]
        public static void MultMatrixx([CountAttribute(Count = 16)] ref int m) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="m">
        /// [length: 16]
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glMultMatrixx")]
        public static unsafe void MultMatrixx([CountAttribute(Count = 16)] int* m) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Set the current normal vector
        /// </summary>
        /// <param name="nx">
        /// Specify the , , and  coordinates of the new current normal. The initial value of the current normal is the unit vector, (0, 0, 1).
        /// </param>
        /// <param name="ny">
        /// Specify the , , and  coordinates of the new current normal. The initial value of the current normal is the unit vector, (0, 0, 1).
        /// </param>
        /// <param name="nz">
        /// Specify the , , and  coordinates of the new current normal. The initial value of the current normal is the unit vector, (0, 0, 1).
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glNormal3f")]
        public static void Normal3(float nx, float ny, float nz) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="nx">
        /// </param>
        /// <param name="ny">
        /// </param>
        /// <param name="nz">
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glNormal3x")]
        public static void Normal3x(int nx, int ny, int nz) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Define an array of normals
        /// </summary>
        /// <param name="type">
        /// Specifies the data type of each coordinate in the array. Symbolic constants Byte, Short, Int, Float, and Double are accepted. The initial value is Float.
        /// </param>
        /// <param name="stride">
        /// Specifies the byte offset between consecutive normals. If stride is 0, the normals are understood to be tightly packed in the array. The initial value is 0.
        /// </param>
        /// <param name="pointer">
        /// [length: COMPSIZE(type,stride)]
        /// Specifies a pointer to the first coordinate of the first normal in the array. The initial value is 0.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glNormalPointer")]
        public static void NormalPointer(OpenTK.Graphics.ES11.All type, int stride, [CountAttribute(Computed = "type,stride")] IntPtr pointer) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Define an array of normals
        /// </summary>
        /// <param name="type">
        /// Specifies the data type of each coordinate in the array. Symbolic constants Byte, Short, Int, Float, and Double are accepted. The initial value is Float.
        /// </param>
        /// <param name="stride">
        /// Specifies the byte offset between consecutive normals. If stride is 0, the normals are understood to be tightly packed in the array. The initial value is 0.
        /// </param>
        /// <param name="pointer">
        /// [length: COMPSIZE(type,stride)]
        /// Specifies a pointer to the first coordinate of the first normal in the array. The initial value is 0.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glNormalPointer")]
        public static void NormalPointer<T2>(OpenTK.Graphics.ES11.All type, int stride, [InAttribute, OutAttribute, CountAttribute(Computed = "type,stride")] T2[] pointer)
            where T2 : struct
         { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Define an array of normals
        /// </summary>
        /// <param name="type">
        /// Specifies the data type of each coordinate in the array. Symbolic constants Byte, Short, Int, Float, and Double are accepted. The initial value is Float.
        /// </param>
        /// <param name="stride">
        /// Specifies the byte offset between consecutive normals. If stride is 0, the normals are understood to be tightly packed in the array. The initial value is 0.
        /// </param>
        /// <param name="pointer">
        /// [length: COMPSIZE(type,stride)]
        /// Specifies a pointer to the first coordinate of the first normal in the array. The initial value is 0.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glNormalPointer")]
        public static void NormalPointer<T2>(OpenTK.Graphics.ES11.All type, int stride, [InAttribute, OutAttribute, CountAttribute(Computed = "type,stride")] T2[,] pointer)
            where T2 : struct
         { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Define an array of normals
        /// </summary>
        /// <param name="type">
        /// Specifies the data type of each coordinate in the array. Symbolic constants Byte, Short, Int, Float, and Double are accepted. The initial value is Float.
        /// </param>
        /// <param name="stride">
        /// Specifies the byte offset between consecutive normals. If stride is 0, the normals are understood to be tightly packed in the array. The initial value is 0.
        /// </param>
        /// <param name="pointer">
        /// [length: COMPSIZE(type,stride)]
        /// Specifies a pointer to the first coordinate of the first normal in the array. The initial value is 0.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glNormalPointer")]
        public static void NormalPointer<T2>(OpenTK.Graphics.ES11.All type, int stride, [InAttribute, OutAttribute, CountAttribute(Computed = "type,stride")] T2[,,] pointer)
            where T2 : struct
         { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Define an array of normals
        /// </summary>
        /// <param name="type">
        /// Specifies the data type of each coordinate in the array. Symbolic constants Byte, Short, Int, Float, and Double are accepted. The initial value is Float.
        /// </param>
        /// <param name="stride">
        /// Specifies the byte offset between consecutive normals. If stride is 0, the normals are understood to be tightly packed in the array. The initial value is 0.
        /// </param>
        /// <param name="pointer">
        /// [length: COMPSIZE(type,stride)]
        /// Specifies a pointer to the first coordinate of the first normal in the array. The initial value is 0.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glNormalPointer")]
        public static void NormalPointer<T2>(OpenTK.Graphics.ES11.All type, int stride, [InAttribute, OutAttribute, CountAttribute(Computed = "type,stride")] ref T2 pointer)
            where T2 : struct
         { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Define an array of normals
        /// </summary>
        /// <param name="type">
        /// Specifies the data type of each coordinate in the array. Symbolic constants Byte, Short, Int, Float, and Double are accepted. The initial value is Float.
        /// </param>
        /// <param name="stride">
        /// Specifies the byte offset between consecutive normals. If stride is 0, the normals are understood to be tightly packed in the array. The initial value is 0.
        /// </param>
        /// <param name="pointer">
        /// [length: COMPSIZE(type,stride)]
        /// Specifies a pointer to the first coordinate of the first normal in the array. The initial value is 0.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glNormalPointer")]
        public static void NormalPointer(OpenTK.Graphics.ES11.NormalPointerType type, int stride, [CountAttribute(Computed = "type,stride")] IntPtr pointer) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Define an array of normals
        /// </summary>
        /// <param name="type">
        /// Specifies the data type of each coordinate in the array. Symbolic constants Byte, Short, Int, Float, and Double are accepted. The initial value is Float.
        /// </param>
        /// <param name="stride">
        /// Specifies the byte offset between consecutive normals. If stride is 0, the normals are understood to be tightly packed in the array. The initial value is 0.
        /// </param>
        /// <param name="pointer">
        /// [length: COMPSIZE(type,stride)]
        /// Specifies a pointer to the first coordinate of the first normal in the array. The initial value is 0.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glNormalPointer")]
        public static void NormalPointer<T2>(OpenTK.Graphics.ES11.NormalPointerType type, int stride, [InAttribute, OutAttribute, CountAttribute(Computed = "type,stride")] T2[] pointer)
            where T2 : struct
         { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Define an array of normals
        /// </summary>
        /// <param name="type">
        /// Specifies the data type of each coordinate in the array. Symbolic constants Byte, Short, Int, Float, and Double are accepted. The initial value is Float.
        /// </param>
        /// <param name="stride">
        /// Specifies the byte offset between consecutive normals. If stride is 0, the normals are understood to be tightly packed in the array. The initial value is 0.
        /// </param>
        /// <param name="pointer">
        /// [length: COMPSIZE(type,stride)]
        /// Specifies a pointer to the first coordinate of the first normal in the array. The initial value is 0.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glNormalPointer")]
        public static void NormalPointer<T2>(OpenTK.Graphics.ES11.NormalPointerType type, int stride, [InAttribute, OutAttribute, CountAttribute(Computed = "type,stride")] T2[,] pointer)
            where T2 : struct
         { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Define an array of normals
        /// </summary>
        /// <param name="type">
        /// Specifies the data type of each coordinate in the array. Symbolic constants Byte, Short, Int, Float, and Double are accepted. The initial value is Float.
        /// </param>
        /// <param name="stride">
        /// Specifies the byte offset between consecutive normals. If stride is 0, the normals are understood to be tightly packed in the array. The initial value is 0.
        /// </param>
        /// <param name="pointer">
        /// [length: COMPSIZE(type,stride)]
        /// Specifies a pointer to the first coordinate of the first normal in the array. The initial value is 0.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glNormalPointer")]
        public static void NormalPointer<T2>(OpenTK.Graphics.ES11.NormalPointerType type, int stride, [InAttribute, OutAttribute, CountAttribute(Computed = "type,stride")] T2[,,] pointer)
            where T2 : struct
         { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Define an array of normals
        /// </summary>
        /// <param name="type">
        /// Specifies the data type of each coordinate in the array. Symbolic constants Byte, Short, Int, Float, and Double are accepted. The initial value is Float.
        /// </param>
        /// <param name="stride">
        /// Specifies the byte offset between consecutive normals. If stride is 0, the normals are understood to be tightly packed in the array. The initial value is 0.
        /// </param>
        /// <param name="pointer">
        /// [length: COMPSIZE(type,stride)]
        /// Specifies a pointer to the first coordinate of the first normal in the array. The initial value is 0.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glNormalPointer")]
        public static void NormalPointer<T2>(OpenTK.Graphics.ES11.NormalPointerType type, int stride, [InAttribute, OutAttribute, CountAttribute(Computed = "type,stride")] ref T2 pointer)
            where T2 : struct
         { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// Label a named object identified within a namespace
        /// </summary>
        /// <param name="identifier">
        /// The namespace from which the name of the object is allocated.
        /// </param>
        /// <param name="name">
        /// The name of the object to label.
        /// </param>
        /// <param name="length">
        /// The length of the label to be used for the object.
        /// </param>
        /// <param name="label">
        /// [length: COMPSIZE(label,length)]
        /// The address of a string containing the label to assign to the object.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glObjectLabel")]
        public static void ObjectLabel(OpenTK.Graphics.ES11.All identifier, int name, int length, [CountAttribute(Computed = "label,length")] String label) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// Label a named object identified within a namespace
        /// </summary>
        /// <param name="identifier">
        /// The namespace from which the name of the object is allocated.
        /// </param>
        /// <param name="name">
        /// The name of the object to label.
        /// </param>
        /// <param name="length">
        /// The length of the label to be used for the object.
        /// </param>
        /// <param name="label">
        /// [length: COMPSIZE(label,length)]
        /// The address of a string containing the label to assign to the object.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glObjectLabel")]
        public static void ObjectLabel(OpenTK.Graphics.ES11.All identifier, uint name, int length, [CountAttribute(Computed = "label,length")] String label) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// Label a named object identified within a namespace
        /// </summary>
        /// <param name="identifier">
        /// The namespace from which the name of the object is allocated.
        /// </param>
        /// <param name="name">
        /// The name of the object to label.
        /// </param>
        /// <param name="length">
        /// The length of the label to be used for the object.
        /// </param>
        /// <param name="label">
        /// [length: COMPSIZE(label,length)]
        /// The address of a string containing the label to assign to the object.
        /// </param>
        [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glObjectLabel")]
        public static void ObjectLabel(OpenTK.Graphics.ES11.ObjectIdentifier identifier, int name, int length, [CountAttribute(Computed = "label,length")] String label) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// Label a named object identified within a namespace
        /// </summary>
        /// <param name="identifier">
        /// The namespace from which the name of the object is allocated.
        /// </param>
        /// <param name="name">
        /// The name of the object to label.
        /// </param>
        /// <param name="length">
        /// The length of the label to be used for the object.
        /// </param>
        /// <param name="label">
        /// [length: COMPSIZE(label,length)]
        /// The address of a string containing the label to assign to the object.
        /// </param>
        [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glObjectLabel")]
        public static void ObjectLabel(OpenTK.Graphics.ES11.ObjectIdentifier identifier, uint name, int length, [CountAttribute(Computed = "label,length")] String label) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// Label a a sync object identified by a pointer
        /// </summary>
        /// <param name="ptr">
        /// A pointer identifying a sync object.
        /// </param>
        /// <param name="length">
        /// The length of the label to be used for the object.
        /// </param>
        /// <param name="label">
        /// [length: COMPSIZE(label,length)]
        /// The address of a string containing the label to assign to the object.
        /// </param>
        [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glObjectPtrLabel")]
        public static void ObjectPtrLabel(IntPtr ptr, int length, [CountAttribute(Computed = "label,length")] String label) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// Label a a sync object identified by a pointer
        /// </summary>
        /// <param name="ptr">
        /// A pointer identifying a sync object.
        /// </param>
        /// <param name="length">
        /// The length of the label to be used for the object.
        /// </param>
        /// <param name="label">
        /// [length: COMPSIZE(label,length)]
        /// The address of a string containing the label to assign to the object.
        /// </param>
        [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glObjectPtrLabel")]
        public static void ObjectPtrLabel<T0>([InAttribute, OutAttribute] T0[] ptr, int length, [CountAttribute(Computed = "label,length")] String label)
            where T0 : struct
         { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// Label a a sync object identified by a pointer
        /// </summary>
        /// <param name="ptr">
        /// A pointer identifying a sync object.
        /// </param>
        /// <param name="length">
        /// The length of the label to be used for the object.
        /// </param>
        /// <param name="label">
        /// [length: COMPSIZE(label,length)]
        /// The address of a string containing the label to assign to the object.
        /// </param>
        [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glObjectPtrLabel")]
        public static void ObjectPtrLabel<T0>([InAttribute, OutAttribute] T0[,] ptr, int length, [CountAttribute(Computed = "label,length")] String label)
            where T0 : struct
         { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// Label a a sync object identified by a pointer
        /// </summary>
        /// <param name="ptr">
        /// A pointer identifying a sync object.
        /// </param>
        /// <param name="length">
        /// The length of the label to be used for the object.
        /// </param>
        /// <param name="label">
        /// [length: COMPSIZE(label,length)]
        /// The address of a string containing the label to assign to the object.
        /// </param>
        [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glObjectPtrLabel")]
        public static void ObjectPtrLabel<T0>([InAttribute, OutAttribute] T0[,,] ptr, int length, [CountAttribute(Computed = "label,length")] String label)
            where T0 : struct
         { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// Label a a sync object identified by a pointer
        /// </summary>
        /// <param name="ptr">
        /// A pointer identifying a sync object.
        /// </param>
        /// <param name="length">
        /// The length of the label to be used for the object.
        /// </param>
        /// <param name="label">
        /// [length: COMPSIZE(label,length)]
        /// The address of a string containing the label to assign to the object.
        /// </param>
        [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glObjectPtrLabel")]
        public static void ObjectPtrLabel<T0>([InAttribute, OutAttribute] ref T0 ptr, int length, [CountAttribute(Computed = "label,length")] String label)
            where T0 : struct
         { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Multiply the current matrix with an orthographic matrix
        /// </summary>
        /// <param name="l">
        /// Specify the coordinates for the left and right vertical clipping planes.
        /// </param>
        /// <param name="r">
        /// Specify the coordinates for the left and right vertical clipping planes.
        /// </param>
        /// <param name="b">
        /// Specify the coordinates for the bottom and top horizontal clipping planes.
        /// </param>
        /// <param name="t">
        /// Specify the coordinates for the bottom and top horizontal clipping planes.
        /// </param>
        /// <param name="n">
        /// Specify the distances to the nearer and farther depth clipping planes. These values are negative if the plane is to be behind the viewer.
        /// </param>
        /// <param name="f">
        /// Specify the distances to the nearer and farther depth clipping planes. These values are negative if the plane is to be behind the viewer.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glOrthof")]
        public static void Ortho(float l, float r, float b, float t, float n, float f) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="l">
        /// </param>
        /// <param name="r">
        /// </param>
        /// <param name="b">
        /// </param>
        /// <param name="t">
        /// </param>
        /// <param name="n">
        /// </param>
        /// <param name="f">
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glOrthox")]
        public static void Orthox(int l, int r, int b, int t, int n, int f) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// </summary>
        /// <param name="map">
        /// </param>
        /// <param name="size">
        /// </param>
        /// <param name="values">
        /// [length: size]
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glPixelMapx")]
        public static void PixelMapx(OpenTK.Graphics.ES11.All map, int size, [CountAttribute(Parameter = "size")] int[] values) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// </summary>
        /// <param name="map">
        /// </param>
        /// <param name="size">
        /// </param>
        /// <param name="values">
        /// [length: size]
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glPixelMapx")]
        public static void PixelMapx(OpenTK.Graphics.ES11.All map, int size, [CountAttribute(Parameter = "size")] ref int values) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// </summary>
        /// <param name="map">
        /// </param>
        /// <param name="size">
        /// </param>
        /// <param name="values">
        /// [length: size]
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glPixelMapx")]
        public static unsafe void PixelMapx(OpenTK.Graphics.ES11.All map, int size, [CountAttribute(Parameter = "size")] int* values) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// </summary>
        /// <param name="map">
        /// </param>
        /// <param name="size">
        /// </param>
        /// <param name="values">
        /// [length: size]
        /// </param>
        [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glPixelMapx")]
        public static void PixelMapx(OpenTK.Graphics.ES11.PixelMap map, int size, [CountAttribute(Parameter = "size")] int[] values) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// </summary>
        /// <param name="map">
        /// </param>
        /// <param name="size">
        /// </param>
        /// <param name="values">
        /// [length: size]
        /// </param>
        [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glPixelMapx")]
        public static void PixelMapx(OpenTK.Graphics.ES11.PixelMap map, int size, [CountAttribute(Parameter = "size")] ref int values) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// </summary>
        /// <param name="map">
        /// </param>
        /// <param name="size">
        /// </param>
        /// <param name="values">
        /// [length: size]
        /// </param>
        [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glPixelMapx")]
        public static unsafe void PixelMapx(OpenTK.Graphics.ES11.PixelMap map, int size, [CountAttribute(Parameter = "size")] int* values) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Set pixel storage modes
        /// </summary>
        /// <param name="pname">
        /// Specifies the symbolic name of the parameter to be set. One value affects the packing of pixel data into memory: PackAlignment. The other affects the unpacking of pixel data from memory: UnpackAlignment.
        /// </param>
        /// <param name="param">
        /// Specifies the value that pname is set to.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glPixelStorei")]
        public static void PixelStore(OpenTK.Graphics.ES11.All pname, int param) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Set pixel storage modes
        /// </summary>
        /// <param name="pname">
        /// Specifies the symbolic name of the parameter to be set. One value affects the packing of pixel data into memory: PackAlignment. The other affects the unpacking of pixel data from memory: UnpackAlignment.
        /// </param>
        /// <param name="param">
        /// Specifies the value that pname is set to.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glPixelStorei")]
        public static void PixelStore(OpenTK.Graphics.ES11.PixelStoreParameter pname, int param) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// </summary>
        /// <param name="pname">
        /// </param>
        /// <param name="param">
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glPixelStorex")]
        public static void PixelStorex(OpenTK.Graphics.ES11.All pname, int param) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// </summary>
        /// <param name="pname">
        /// </param>
        /// <param name="param">
        /// </param>
        [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glPixelStorex")]
        public static void PixelStorex(OpenTK.Graphics.ES11.PixelStoreParameter pname, int param) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Specify point parameters
        /// </summary>
        /// <param name="pname">
        /// Specifies a single-valued point parameter. PointFadeThresholdSize, and PointSpriteCoordOrigin are accepted.
        /// </param>
        /// <param name="param">
        /// For glPointParameterf and glPointParameteri, specifies the value that pname will be set to.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glPointParameterf")]
        public static void PointParameter(OpenTK.Graphics.ES11.All pname, float param) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Specify point parameters
        /// </summary>
        /// <param name="pname">
        /// Specifies a single-valued point parameter. PointFadeThresholdSize, and PointSpriteCoordOrigin are accepted.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// For glPointParameterf and glPointParameteri, specifies the value that pname will be set to.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glPointParameterfv")]
        public static void PointParameter(OpenTK.Graphics.ES11.All pname, [CountAttribute(Computed = "pname")] float[] @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Specify point parameters
        /// </summary>
        /// <param name="pname">
        /// Specifies a single-valued point parameter. PointFadeThresholdSize, and PointSpriteCoordOrigin are accepted.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// For glPointParameterf and glPointParameteri, specifies the value that pname will be set to.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glPointParameterfv")]
        public static unsafe void PointParameter(OpenTK.Graphics.ES11.All pname, [CountAttribute(Computed = "pname")] float* @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="pname">
        /// </param>
        /// <param name="param">
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glPointParameterx")]
        public static void PointParameterx(OpenTK.Graphics.ES11.All pname, int param) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="pname">
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glPointParameterxv")]
        public static void PointParameterx(OpenTK.Graphics.ES11.All pname, [CountAttribute(Computed = "pname")] int[] @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="pname">
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glPointParameterxv")]
        public static unsafe void PointParameterx(OpenTK.Graphics.ES11.All pname, [CountAttribute(Computed = "pname")] int* @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Specify the diameter of rasterized points
        /// </summary>
        /// <param name="size">
        /// Specifies the diameter of rasterized points. The initial value is 1.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glPointSize")]
        public static void PointSize(float size) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="size">
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glPointSizex")]
        public static void PointSizex(int size) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Set the scale and units used to calculate depth values
        /// </summary>
        /// <param name="factor">
        /// Specifies a scale factor that is used to create a variable depth offset for each polygon. The initial value is 0.
        /// </param>
        /// <param name="units">
        /// Is multiplied by an implementation-specific value to create a constant depth offset. The initial value is 0.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glPolygonOffset")]
        public static void PolygonOffset(float factor, float units) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="factor">
        /// </param>
        /// <param name="units">
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glPolygonOffsetx")]
        public static void PolygonOffsetx(int factor, int units) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// Pop the active debug group
        /// </summary>
        [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glPopDebugGroup")]
        public static void PopDebugGroup() { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glPopMatrix")]
        public static void PopMatrix() { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// Push a named debug group into the command stream
        /// </summary>
        /// <param name="source">
        /// The source of the debug message.
        /// </param>
        /// <param name="id">
        /// The identifier of the message.
        /// </param>
        /// <param name="length">
        /// The length of the message to be sent to the debug output stream.
        /// </param>
        /// <param name="message">
        /// [length: COMPSIZE(message,length)]
        /// The a string containing the message to be sent to the debug output stream.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glPushDebugGroup")]
        public static void PushDebugGroup(OpenTK.Graphics.ES11.All source, int id, int length, [CountAttribute(Computed = "message,length")] String message) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// Push a named debug group into the command stream
        /// </summary>
        /// <param name="source">
        /// The source of the debug message.
        /// </param>
        /// <param name="id">
        /// The identifier of the message.
        /// </param>
        /// <param name="length">
        /// The length of the message to be sent to the debug output stream.
        /// </param>
        /// <param name="message">
        /// [length: COMPSIZE(message,length)]
        /// The a string containing the message to be sent to the debug output stream.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glPushDebugGroup")]
        public static void PushDebugGroup(OpenTK.Graphics.ES11.All source, uint id, int length, [CountAttribute(Computed = "message,length")] String message) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// Push a named debug group into the command stream
        /// </summary>
        /// <param name="source">
        /// The source of the debug message.
        /// </param>
        /// <param name="id">
        /// The identifier of the message.
        /// </param>
        /// <param name="length">
        /// The length of the message to be sent to the debug output stream.
        /// </param>
        /// <param name="message">
        /// [length: COMPSIZE(message,length)]
        /// The a string containing the message to be sent to the debug output stream.
        /// </param>
        [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glPushDebugGroup")]
        public static void PushDebugGroup(OpenTK.Graphics.ES11.DebugSource source, int id, int length, [CountAttribute(Computed = "message,length")] String message) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// Push a named debug group into the command stream
        /// </summary>
        /// <param name="source">
        /// The source of the debug message.
        /// </param>
        /// <param name="id">
        /// The identifier of the message.
        /// </param>
        /// <param name="length">
        /// The length of the message to be sent to the debug output stream.
        /// </param>
        /// <param name="message">
        /// [length: COMPSIZE(message,length)]
        /// The a string containing the message to be sent to the debug output stream.
        /// </param>
        [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glPushDebugGroup")]
        public static void PushDebugGroup(OpenTK.Graphics.ES11.DebugSource source, uint id, int length, [CountAttribute(Computed = "message,length")] String message) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Push and pop the current matrix stack
        /// </summary>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glPushMatrix")]
        public static void PushMatrix() { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Read a block of pixels from the frame buffer
        /// </summary>
        /// <param name="x">
        /// Specify the window coordinates of the first pixel that is read from the frame buffer. This location is the lower left corner of a rectangular block of pixels.
        /// </param>
        /// <param name="y">
        /// Specify the window coordinates of the first pixel that is read from the frame buffer. This location is the lower left corner of a rectangular block of pixels.
        /// </param>
        /// <param name="width">
        /// Specify the dimensions of the pixel rectangle. width and height of one correspond to a single pixel.
        /// </param>
        /// <param name="height">
        /// Specify the dimensions of the pixel rectangle. width and height of one correspond to a single pixel.
        /// </param>
        /// <param name="format">
        /// Specifies the format of the pixel data. The following symbolic values are accepted: Alpha, Rgb, and Rgba.
        /// </param>
        /// <param name="type">
        /// Specifies the data type of the pixel data. Must be one of UnsignedByte, UnsignedShort565, UnsignedShort4444, or UnsignedShort5551.
        /// </param>
        /// <param name="pixels">
        /// [length: COMPSIZE(format,type,width,height)]
        /// Returns the pixel data.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glReadPixels")]
        public static void ReadPixels(int x, int y, int width, int height, OpenTK.Graphics.ES11.All format, OpenTK.Graphics.ES11.All type, [OutAttribute, CountAttribute(Computed = "format,type,width,height")] IntPtr pixels) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Read a block of pixels from the frame buffer
        /// </summary>
        /// <param name="x">
        /// Specify the window coordinates of the first pixel that is read from the frame buffer. This location is the lower left corner of a rectangular block of pixels.
        /// </param>
        /// <param name="y">
        /// Specify the window coordinates of the first pixel that is read from the frame buffer. This location is the lower left corner of a rectangular block of pixels.
        /// </param>
        /// <param name="width">
        /// Specify the dimensions of the pixel rectangle. width and height of one correspond to a single pixel.
        /// </param>
        /// <param name="height">
        /// Specify the dimensions of the pixel rectangle. width and height of one correspond to a single pixel.
        /// </param>
        /// <param name="format">
        /// Specifies the format of the pixel data. The following symbolic values are accepted: Alpha, Rgb, and Rgba.
        /// </param>
        /// <param name="type">
        /// Specifies the data type of the pixel data. Must be one of UnsignedByte, UnsignedShort565, UnsignedShort4444, or UnsignedShort5551.
        /// </param>
        /// <param name="pixels">
        /// [length: COMPSIZE(format,type,width,height)]
        /// Returns the pixel data.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glReadPixels")]
        public static void ReadPixels<T6>(int x, int y, int width, int height, OpenTK.Graphics.ES11.All format, OpenTK.Graphics.ES11.All type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type,width,height")] T6[] pixels)
            where T6 : struct
         { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Read a block of pixels from the frame buffer
        /// </summary>
        /// <param name="x">
        /// Specify the window coordinates of the first pixel that is read from the frame buffer. This location is the lower left corner of a rectangular block of pixels.
        /// </param>
        /// <param name="y">
        /// Specify the window coordinates of the first pixel that is read from the frame buffer. This location is the lower left corner of a rectangular block of pixels.
        /// </param>
        /// <param name="width">
        /// Specify the dimensions of the pixel rectangle. width and height of one correspond to a single pixel.
        /// </param>
        /// <param name="height">
        /// Specify the dimensions of the pixel rectangle. width and height of one correspond to a single pixel.
        /// </param>
        /// <param name="format">
        /// Specifies the format of the pixel data. The following symbolic values are accepted: Alpha, Rgb, and Rgba.
        /// </param>
        /// <param name="type">
        /// Specifies the data type of the pixel data. Must be one of UnsignedByte, UnsignedShort565, UnsignedShort4444, or UnsignedShort5551.
        /// </param>
        /// <param name="pixels">
        /// [length: COMPSIZE(format,type,width,height)]
        /// Returns the pixel data.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glReadPixels")]
        public static void ReadPixels<T6>(int x, int y, int width, int height, OpenTK.Graphics.ES11.All format, OpenTK.Graphics.ES11.All type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type,width,height")] T6[,] pixels)
            where T6 : struct
         { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Read a block of pixels from the frame buffer
        /// </summary>
        /// <param name="x">
        /// Specify the window coordinates of the first pixel that is read from the frame buffer. This location is the lower left corner of a rectangular block of pixels.
        /// </param>
        /// <param name="y">
        /// Specify the window coordinates of the first pixel that is read from the frame buffer. This location is the lower left corner of a rectangular block of pixels.
        /// </param>
        /// <param name="width">
        /// Specify the dimensions of the pixel rectangle. width and height of one correspond to a single pixel.
        /// </param>
        /// <param name="height">
        /// Specify the dimensions of the pixel rectangle. width and height of one correspond to a single pixel.
        /// </param>
        /// <param name="format">
        /// Specifies the format of the pixel data. The following symbolic values are accepted: Alpha, Rgb, and Rgba.
        /// </param>
        /// <param name="type">
        /// Specifies the data type of the pixel data. Must be one of UnsignedByte, UnsignedShort565, UnsignedShort4444, or UnsignedShort5551.
        /// </param>
        /// <param name="pixels">
        /// [length: COMPSIZE(format,type,width,height)]
        /// Returns the pixel data.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glReadPixels")]
        public static void ReadPixels<T6>(int x, int y, int width, int height, OpenTK.Graphics.ES11.All format, OpenTK.Graphics.ES11.All type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type,width,height")] T6[,,] pixels)
            where T6 : struct
         { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Read a block of pixels from the frame buffer
        /// </summary>
        /// <param name="x">
        /// Specify the window coordinates of the first pixel that is read from the frame buffer. This location is the lower left corner of a rectangular block of pixels.
        /// </param>
        /// <param name="y">
        /// Specify the window coordinates of the first pixel that is read from the frame buffer. This location is the lower left corner of a rectangular block of pixels.
        /// </param>
        /// <param name="width">
        /// Specify the dimensions of the pixel rectangle. width and height of one correspond to a single pixel.
        /// </param>
        /// <param name="height">
        /// Specify the dimensions of the pixel rectangle. width and height of one correspond to a single pixel.
        /// </param>
        /// <param name="format">
        /// Specifies the format of the pixel data. The following symbolic values are accepted: Alpha, Rgb, and Rgba.
        /// </param>
        /// <param name="type">
        /// Specifies the data type of the pixel data. Must be one of UnsignedByte, UnsignedShort565, UnsignedShort4444, or UnsignedShort5551.
        /// </param>
        /// <param name="pixels">
        /// [length: COMPSIZE(format,type,width,height)]
        /// Returns the pixel data.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glReadPixels")]
        public static void ReadPixels<T6>(int x, int y, int width, int height, OpenTK.Graphics.ES11.All format, OpenTK.Graphics.ES11.All type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type,width,height")] ref T6 pixels)
            where T6 : struct
         { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Read a block of pixels from the frame buffer
        /// </summary>
        /// <param name="x">
        /// Specify the window coordinates of the first pixel that is read from the frame buffer. This location is the lower left corner of a rectangular block of pixels.
        /// </param>
        /// <param name="y">
        /// Specify the window coordinates of the first pixel that is read from the frame buffer. This location is the lower left corner of a rectangular block of pixels.
        /// </param>
        /// <param name="width">
        /// Specify the dimensions of the pixel rectangle. width and height of one correspond to a single pixel.
        /// </param>
        /// <param name="height">
        /// Specify the dimensions of the pixel rectangle. width and height of one correspond to a single pixel.
        /// </param>
        /// <param name="format">
        /// Specifies the format of the pixel data. The following symbolic values are accepted: Alpha, Rgb, and Rgba.
        /// </param>
        /// <param name="type">
        /// Specifies the data type of the pixel data. Must be one of UnsignedByte, UnsignedShort565, UnsignedShort4444, or UnsignedShort5551.
        /// </param>
        /// <param name="pixels">
        /// [length: COMPSIZE(format,type,width,height)]
        /// Returns the pixel data.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glReadPixels")]
        public static void ReadPixels(int x, int y, int width, int height, OpenTK.Graphics.ES11.PixelFormat format, OpenTK.Graphics.ES11.PixelType type, [OutAttribute, CountAttribute(Computed = "format,type,width,height")] IntPtr pixels) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Read a block of pixels from the frame buffer
        /// </summary>
        /// <param name="x">
        /// Specify the window coordinates of the first pixel that is read from the frame buffer. This location is the lower left corner of a rectangular block of pixels.
        /// </param>
        /// <param name="y">
        /// Specify the window coordinates of the first pixel that is read from the frame buffer. This location is the lower left corner of a rectangular block of pixels.
        /// </param>
        /// <param name="width">
        /// Specify the dimensions of the pixel rectangle. width and height of one correspond to a single pixel.
        /// </param>
        /// <param name="height">
        /// Specify the dimensions of the pixel rectangle. width and height of one correspond to a single pixel.
        /// </param>
        /// <param name="format">
        /// Specifies the format of the pixel data. The following symbolic values are accepted: Alpha, Rgb, and Rgba.
        /// </param>
        /// <param name="type">
        /// Specifies the data type of the pixel data. Must be one of UnsignedByte, UnsignedShort565, UnsignedShort4444, or UnsignedShort5551.
        /// </param>
        /// <param name="pixels">
        /// [length: COMPSIZE(format,type,width,height)]
        /// Returns the pixel data.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glReadPixels")]
        public static void ReadPixels<T6>(int x, int y, int width, int height, OpenTK.Graphics.ES11.PixelFormat format, OpenTK.Graphics.ES11.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type,width,height")] T6[] pixels)
            where T6 : struct
         { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Read a block of pixels from the frame buffer
        /// </summary>
        /// <param name="x">
        /// Specify the window coordinates of the first pixel that is read from the frame buffer. This location is the lower left corner of a rectangular block of pixels.
        /// </param>
        /// <param name="y">
        /// Specify the window coordinates of the first pixel that is read from the frame buffer. This location is the lower left corner of a rectangular block of pixels.
        /// </param>
        /// <param name="width">
        /// Specify the dimensions of the pixel rectangle. width and height of one correspond to a single pixel.
        /// </param>
        /// <param name="height">
        /// Specify the dimensions of the pixel rectangle. width and height of one correspond to a single pixel.
        /// </param>
        /// <param name="format">
        /// Specifies the format of the pixel data. The following symbolic values are accepted: Alpha, Rgb, and Rgba.
        /// </param>
        /// <param name="type">
        /// Specifies the data type of the pixel data. Must be one of UnsignedByte, UnsignedShort565, UnsignedShort4444, or UnsignedShort5551.
        /// </param>
        /// <param name="pixels">
        /// [length: COMPSIZE(format,type,width,height)]
        /// Returns the pixel data.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glReadPixels")]
        public static void ReadPixels<T6>(int x, int y, int width, int height, OpenTK.Graphics.ES11.PixelFormat format, OpenTK.Graphics.ES11.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type,width,height")] T6[,] pixels)
            where T6 : struct
         { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Read a block of pixels from the frame buffer
        /// </summary>
        /// <param name="x">
        /// Specify the window coordinates of the first pixel that is read from the frame buffer. This location is the lower left corner of a rectangular block of pixels.
        /// </param>
        /// <param name="y">
        /// Specify the window coordinates of the first pixel that is read from the frame buffer. This location is the lower left corner of a rectangular block of pixels.
        /// </param>
        /// <param name="width">
        /// Specify the dimensions of the pixel rectangle. width and height of one correspond to a single pixel.
        /// </param>
        /// <param name="height">
        /// Specify the dimensions of the pixel rectangle. width and height of one correspond to a single pixel.
        /// </param>
        /// <param name="format">
        /// Specifies the format of the pixel data. The following symbolic values are accepted: Alpha, Rgb, and Rgba.
        /// </param>
        /// <param name="type">
        /// Specifies the data type of the pixel data. Must be one of UnsignedByte, UnsignedShort565, UnsignedShort4444, or UnsignedShort5551.
        /// </param>
        /// <param name="pixels">
        /// [length: COMPSIZE(format,type,width,height)]
        /// Returns the pixel data.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glReadPixels")]
        public static void ReadPixels<T6>(int x, int y, int width, int height, OpenTK.Graphics.ES11.PixelFormat format, OpenTK.Graphics.ES11.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type,width,height")] T6[,,] pixels)
            where T6 : struct
         { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Read a block of pixels from the frame buffer
        /// </summary>
        /// <param name="x">
        /// Specify the window coordinates of the first pixel that is read from the frame buffer. This location is the lower left corner of a rectangular block of pixels.
        /// </param>
        /// <param name="y">
        /// Specify the window coordinates of the first pixel that is read from the frame buffer. This location is the lower left corner of a rectangular block of pixels.
        /// </param>
        /// <param name="width">
        /// Specify the dimensions of the pixel rectangle. width and height of one correspond to a single pixel.
        /// </param>
        /// <param name="height">
        /// Specify the dimensions of the pixel rectangle. width and height of one correspond to a single pixel.
        /// </param>
        /// <param name="format">
        /// Specifies the format of the pixel data. The following symbolic values are accepted: Alpha, Rgb, and Rgba.
        /// </param>
        /// <param name="type">
        /// Specifies the data type of the pixel data. Must be one of UnsignedByte, UnsignedShort565, UnsignedShort4444, or UnsignedShort5551.
        /// </param>
        /// <param name="pixels">
        /// [length: COMPSIZE(format,type,width,height)]
        /// Returns the pixel data.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glReadPixels")]
        public static void ReadPixels<T6>(int x, int y, int width, int height, OpenTK.Graphics.ES11.PixelFormat format, OpenTK.Graphics.ES11.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type,width,height")] ref T6 pixels)
            where T6 : struct
         { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Multiply the current matrix by a rotation matrix
        /// </summary>
        /// <param name="angle">
        /// Specifies the angle of rotation, in degrees.
        /// </param>
        /// <param name="x">
        /// Specify the x, y, and z coordinates of a vector, respectively.
        /// </param>
        /// <param name="y">
        /// Specify the x, y, and z coordinates of a vector, respectively.
        /// </param>
        /// <param name="z">
        /// Specify the x, y, and z coordinates of a vector, respectively.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glRotatef")]
        public static void Rotate(float angle, float x, float y, float z) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="angle">
        /// </param>
        /// <param name="x">
        /// </param>
        /// <param name="y">
        /// </param>
        /// <param name="z">
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glRotatex")]
        public static void Rotatex(int angle, int x, int y, int z) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Specify multisample coverage parameters
        /// </summary>
        /// <param name="value">
        /// Specify a single floating-point sample coverage value.  The value is clamped to the range [0 ,1]. The initial value is 1.0.
        /// </param>
        /// <param name="invert">
        /// Specify a single boolean value representing if the coverage masks should be inverted.  True and False are accepted.  The initial value is False.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glSampleCoverage")]
        public static void SampleCoverage(float value, bool invert) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="value">
        /// </param>
        /// <param name="invert">
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glSampleCoveragex")]
        public static void SampleCoveragex(int value, bool invert) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Multiply the current matrix by a general scaling matrix
        /// </summary>
        /// <param name="x">
        /// Specify scale factors along the x, y, and z axes, respectively.
        /// </param>
        /// <param name="y">
        /// Specify scale factors along the x, y, and z axes, respectively.
        /// </param>
        /// <param name="z">
        /// Specify scale factors along the x, y, and z axes, respectively.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glScalef")]
        public static void Scale(float x, float y, float z) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="x">
        /// </param>
        /// <param name="y">
        /// </param>
        /// <param name="z">
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glScalex")]
        public static void Scalex(int x, int y, int z) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Define the scissor box
        /// </summary>
        /// <param name="x">
        /// Specify the lower left corner of the scissor box. Initially (0, 0).
        /// </param>
        /// <param name="y">
        /// Specify the lower left corner of the scissor box. Initially (0, 0).
        /// </param>
        /// <param name="width">
        /// Specify the width and height of the scissor box. When a GL context is first attached to a window, width and height are set to the dimensions of that window.
        /// </param>
        /// <param name="height">
        /// Specify the width and height of the scissor box. When a GL context is first attached to a window, width and height are set to the dimensions of that window.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glScissor")]
        public static void Scissor(int x, int y, int width, int height) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Select flat or smooth shading
        /// </summary>
        /// <param name="mode">
        /// Specifies a symbolic value representing a shading technique. Accepted values are Flat and Smooth. The initial value is Smooth.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glShadeModel")]
        public static void ShadeModel(OpenTK.Graphics.ES11.All mode) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Select flat or smooth shading
        /// </summary>
        /// <param name="mode">
        /// Specifies a symbolic value representing a shading technique. Accepted values are Flat and Smooth. The initial value is Smooth.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glShadeModel")]
        public static void ShadeModel(OpenTK.Graphics.ES11.ShadingModel mode) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Set front and back function and reference value for stencil testing
        /// </summary>
        /// <param name="func">
        /// Specifies the test function. Eight symbolic constants are valid: Never, Less, Lequal, Greater, Gequal, Equal, Notequal, and Always. The initial value is Always.
        /// </param>
        /// <param name="@ref">
        /// Specifies the reference value for the stencil test. ref is clamped to the range [0, 2 sup n - 1], where  is the number of bitplanes in the stencil buffer. The initial value is 0.
        /// </param>
        /// <param name="mask">
        /// Specifies a mask that is ANDed with both the reference value and the stored stencil value when the test is done. The initial value is all 1's.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glStencilFunc")]
        public static void StencilFunc(OpenTK.Graphics.ES11.All func, int @ref, int mask) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Set front and back function and reference value for stencil testing
        /// </summary>
        /// <param name="func">
        /// Specifies the test function. Eight symbolic constants are valid: Never, Less, Lequal, Greater, Gequal, Equal, Notequal, and Always. The initial value is Always.
        /// </param>
        /// <param name="@ref">
        /// Specifies the reference value for the stencil test. ref is clamped to the range [0, 2 sup n - 1], where  is the number of bitplanes in the stencil buffer. The initial value is 0.
        /// </param>
        /// <param name="mask">
        /// Specifies a mask that is ANDed with both the reference value and the stored stencil value when the test is done. The initial value is all 1's.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glStencilFunc")]
        public static void StencilFunc(OpenTK.Graphics.ES11.All func, int @ref, uint mask) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Set front and back function and reference value for stencil testing
        /// </summary>
        /// <param name="func">
        /// Specifies the test function. Eight symbolic constants are valid: Never, Less, Lequal, Greater, Gequal, Equal, Notequal, and Always. The initial value is Always.
        /// </param>
        /// <param name="@ref">
        /// Specifies the reference value for the stencil test. ref is clamped to the range [0, 2 sup n - 1], where  is the number of bitplanes in the stencil buffer. The initial value is 0.
        /// </param>
        /// <param name="mask">
        /// Specifies a mask that is ANDed with both the reference value and the stored stencil value when the test is done. The initial value is all 1's.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glStencilFunc")]
        public static void StencilFunc(OpenTK.Graphics.ES11.StencilFunction func, int @ref, int mask) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Set front and back function and reference value for stencil testing
        /// </summary>
        /// <param name="func">
        /// Specifies the test function. Eight symbolic constants are valid: Never, Less, Lequal, Greater, Gequal, Equal, Notequal, and Always. The initial value is Always.
        /// </param>
        /// <param name="@ref">
        /// Specifies the reference value for the stencil test. ref is clamped to the range [0, 2 sup n - 1], where  is the number of bitplanes in the stencil buffer. The initial value is 0.
        /// </param>
        /// <param name="mask">
        /// Specifies a mask that is ANDed with both the reference value and the stored stencil value when the test is done. The initial value is all 1's.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glStencilFunc")]
        public static void StencilFunc(OpenTK.Graphics.ES11.StencilFunction func, int @ref, uint mask) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Control the front and back writing of individual bits in the stencil planes
        /// </summary>
        /// <param name="mask">
        /// Specifies a bit mask to enable and disable writing of individual bits in the stencil planes. Initially, the mask is all 1's.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glStencilMask")]
        public static void StencilMask(int mask) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Control the front and back writing of individual bits in the stencil planes
        /// </summary>
        /// <param name="mask">
        /// Specifies a bit mask to enable and disable writing of individual bits in the stencil planes. Initially, the mask is all 1's.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glStencilMask")]
        public static void StencilMask(uint mask) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Set front and back stencil test actions
        /// </summary>
        /// <param name="fail">
        /// Specifies the action to take when the stencil test fails. Eight symbolic constants are accepted: Keep, Zero, Replace, Incr, IncrWrap, Decr, DecrWrap, and Invert. The initial value is Keep.
        /// </param>
        /// <param name="zfail">
        /// Specifies the stencil action when the stencil test passes, but the depth test fails. dpfail accepts the same symbolic constants as sfail. The initial value is Keep.
        /// </param>
        /// <param name="zpass">
        /// Specifies the stencil action when both the stencil test and the depth test pass, or when the stencil test passes and either there is no depth buffer or depth testing is not enabled. dppass accepts the same symbolic constants as sfail. The initial value is Keep.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glStencilOp")]
        public static void StencilOp(OpenTK.Graphics.ES11.All fail, OpenTK.Graphics.ES11.All zfail, OpenTK.Graphics.ES11.All zpass) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Set front and back stencil test actions
        /// </summary>
        /// <param name="fail">
        /// Specifies the action to take when the stencil test fails. Eight symbolic constants are accepted: Keep, Zero, Replace, Incr, IncrWrap, Decr, DecrWrap, and Invert. The initial value is Keep.
        /// </param>
        /// <param name="zfail">
        /// Specifies the stencil action when the stencil test passes, but the depth test fails. dpfail accepts the same symbolic constants as sfail. The initial value is Keep.
        /// </param>
        /// <param name="zpass">
        /// Specifies the stencil action when both the stencil test and the depth test pass, or when the stencil test passes and either there is no depth buffer or depth testing is not enabled. dppass accepts the same symbolic constants as sfail. The initial value is Keep.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glStencilOp")]
        public static void StencilOp(OpenTK.Graphics.ES11.StencilOp fail, OpenTK.Graphics.ES11.StencilOp zfail, OpenTK.Graphics.ES11.StencilOp zpass) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Define an array of texture coordinates
        /// </summary>
        /// <param name="size">
        /// Specifies the number of coordinates per array element. Must be 1, 2, 3, or 4. The initial value is 4.
        /// </param>
        /// <param name="type">
        /// Specifies the data type of each texture coordinate. Symbolic constants Short, Int, Float, or Double are accepted. The initial value is Float.
        /// </param>
        /// <param name="stride">
        /// Specifies the byte offset between consecutive texture coordinate sets. If stride is 0, the array elements are understood to be tightly packed. The initial value is 0.
        /// </param>
        /// <param name="pointer">
        /// [length: COMPSIZE(size,type,stride)]
        /// Specifies a pointer to the first coordinate of the first texture coordinate set in the array. The initial value is 0.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glTexCoordPointer")]
        public static void TexCoordPointer(int size, OpenTK.Graphics.ES11.All type, int stride, [CountAttribute(Computed = "size,type,stride")] IntPtr pointer) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Define an array of texture coordinates
        /// </summary>
        /// <param name="size">
        /// Specifies the number of coordinates per array element. Must be 1, 2, 3, or 4. The initial value is 4.
        /// </param>
        /// <param name="type">
        /// Specifies the data type of each texture coordinate. Symbolic constants Short, Int, Float, or Double are accepted. The initial value is Float.
        /// </param>
        /// <param name="stride">
        /// Specifies the byte offset between consecutive texture coordinate sets. If stride is 0, the array elements are understood to be tightly packed. The initial value is 0.
        /// </param>
        /// <param name="pointer">
        /// [length: COMPSIZE(size,type,stride)]
        /// Specifies a pointer to the first coordinate of the first texture coordinate set in the array. The initial value is 0.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glTexCoordPointer")]
        public static void TexCoordPointer<T3>(int size, OpenTK.Graphics.ES11.All type, int stride, [InAttribute, OutAttribute, CountAttribute(Computed = "size,type,stride")] T3[] pointer)
            where T3 : struct
         { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Define an array of texture coordinates
        /// </summary>
        /// <param name="size">
        /// Specifies the number of coordinates per array element. Must be 1, 2, 3, or 4. The initial value is 4.
        /// </param>
        /// <param name="type">
        /// Specifies the data type of each texture coordinate. Symbolic constants Short, Int, Float, or Double are accepted. The initial value is Float.
        /// </param>
        /// <param name="stride">
        /// Specifies the byte offset between consecutive texture coordinate sets. If stride is 0, the array elements are understood to be tightly packed. The initial value is 0.
        /// </param>
        /// <param name="pointer">
        /// [length: COMPSIZE(size,type,stride)]
        /// Specifies a pointer to the first coordinate of the first texture coordinate set in the array. The initial value is 0.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glTexCoordPointer")]
        public static void TexCoordPointer<T3>(int size, OpenTK.Graphics.ES11.All type, int stride, [InAttribute, OutAttribute, CountAttribute(Computed = "size,type,stride")] T3[,] pointer)
            where T3 : struct
         { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Define an array of texture coordinates
        /// </summary>
        /// <param name="size">
        /// Specifies the number of coordinates per array element. Must be 1, 2, 3, or 4. The initial value is 4.
        /// </param>
        /// <param name="type">
        /// Specifies the data type of each texture coordinate. Symbolic constants Short, Int, Float, or Double are accepted. The initial value is Float.
        /// </param>
        /// <param name="stride">
        /// Specifies the byte offset between consecutive texture coordinate sets. If stride is 0, the array elements are understood to be tightly packed. The initial value is 0.
        /// </param>
        /// <param name="pointer">
        /// [length: COMPSIZE(size,type,stride)]
        /// Specifies a pointer to the first coordinate of the first texture coordinate set in the array. The initial value is 0.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glTexCoordPointer")]
        public static void TexCoordPointer<T3>(int size, OpenTK.Graphics.ES11.All type, int stride, [InAttribute, OutAttribute, CountAttribute(Computed = "size,type,stride")] T3[,,] pointer)
            where T3 : struct
         { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Define an array of texture coordinates
        /// </summary>
        /// <param name="size">
        /// Specifies the number of coordinates per array element. Must be 1, 2, 3, or 4. The initial value is 4.
        /// </param>
        /// <param name="type">
        /// Specifies the data type of each texture coordinate. Symbolic constants Short, Int, Float, or Double are accepted. The initial value is Float.
        /// </param>
        /// <param name="stride">
        /// Specifies the byte offset between consecutive texture coordinate sets. If stride is 0, the array elements are understood to be tightly packed. The initial value is 0.
        /// </param>
        /// <param name="pointer">
        /// [length: COMPSIZE(size,type,stride)]
        /// Specifies a pointer to the first coordinate of the first texture coordinate set in the array. The initial value is 0.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glTexCoordPointer")]
        public static void TexCoordPointer<T3>(int size, OpenTK.Graphics.ES11.All type, int stride, [InAttribute, OutAttribute, CountAttribute(Computed = "size,type,stride")] ref T3 pointer)
            where T3 : struct
         { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Define an array of texture coordinates
        /// </summary>
        /// <param name="size">
        /// Specifies the number of coordinates per array element. Must be 1, 2, 3, or 4. The initial value is 4.
        /// </param>
        /// <param name="type">
        /// Specifies the data type of each texture coordinate. Symbolic constants Short, Int, Float, or Double are accepted. The initial value is Float.
        /// </param>
        /// <param name="stride">
        /// Specifies the byte offset between consecutive texture coordinate sets. If stride is 0, the array elements are understood to be tightly packed. The initial value is 0.
        /// </param>
        /// <param name="pointer">
        /// [length: COMPSIZE(size,type,stride)]
        /// Specifies a pointer to the first coordinate of the first texture coordinate set in the array. The initial value is 0.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glTexCoordPointer")]
        public static void TexCoordPointer(int size, OpenTK.Graphics.ES11.TexCoordPointerType type, int stride, [CountAttribute(Computed = "size,type,stride")] IntPtr pointer) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Define an array of texture coordinates
        /// </summary>
        /// <param name="size">
        /// Specifies the number of coordinates per array element. Must be 1, 2, 3, or 4. The initial value is 4.
        /// </param>
        /// <param name="type">
        /// Specifies the data type of each texture coordinate. Symbolic constants Short, Int, Float, or Double are accepted. The initial value is Float.
        /// </param>
        /// <param name="stride">
        /// Specifies the byte offset between consecutive texture coordinate sets. If stride is 0, the array elements are understood to be tightly packed. The initial value is 0.
        /// </param>
        /// <param name="pointer">
        /// [length: COMPSIZE(size,type,stride)]
        /// Specifies a pointer to the first coordinate of the first texture coordinate set in the array. The initial value is 0.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glTexCoordPointer")]
        public static void TexCoordPointer<T3>(int size, OpenTK.Graphics.ES11.TexCoordPointerType type, int stride, [InAttribute, OutAttribute, CountAttribute(Computed = "size,type,stride")] T3[] pointer)
            where T3 : struct
         { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Define an array of texture coordinates
        /// </summary>
        /// <param name="size">
        /// Specifies the number of coordinates per array element. Must be 1, 2, 3, or 4. The initial value is 4.
        /// </param>
        /// <param name="type">
        /// Specifies the data type of each texture coordinate. Symbolic constants Short, Int, Float, or Double are accepted. The initial value is Float.
        /// </param>
        /// <param name="stride">
        /// Specifies the byte offset between consecutive texture coordinate sets. If stride is 0, the array elements are understood to be tightly packed. The initial value is 0.
        /// </param>
        /// <param name="pointer">
        /// [length: COMPSIZE(size,type,stride)]
        /// Specifies a pointer to the first coordinate of the first texture coordinate set in the array. The initial value is 0.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glTexCoordPointer")]
        public static void TexCoordPointer<T3>(int size, OpenTK.Graphics.ES11.TexCoordPointerType type, int stride, [InAttribute, OutAttribute, CountAttribute(Computed = "size,type,stride")] T3[,] pointer)
            where T3 : struct
         { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Define an array of texture coordinates
        /// </summary>
        /// <param name="size">
        /// Specifies the number of coordinates per array element. Must be 1, 2, 3, or 4. The initial value is 4.
        /// </param>
        /// <param name="type">
        /// Specifies the data type of each texture coordinate. Symbolic constants Short, Int, Float, or Double are accepted. The initial value is Float.
        /// </param>
        /// <param name="stride">
        /// Specifies the byte offset between consecutive texture coordinate sets. If stride is 0, the array elements are understood to be tightly packed. The initial value is 0.
        /// </param>
        /// <param name="pointer">
        /// [length: COMPSIZE(size,type,stride)]
        /// Specifies a pointer to the first coordinate of the first texture coordinate set in the array. The initial value is 0.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glTexCoordPointer")]
        public static void TexCoordPointer<T3>(int size, OpenTK.Graphics.ES11.TexCoordPointerType type, int stride, [InAttribute, OutAttribute, CountAttribute(Computed = "size,type,stride")] T3[,,] pointer)
            where T3 : struct
         { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Define an array of texture coordinates
        /// </summary>
        /// <param name="size">
        /// Specifies the number of coordinates per array element. Must be 1, 2, 3, or 4. The initial value is 4.
        /// </param>
        /// <param name="type">
        /// Specifies the data type of each texture coordinate. Symbolic constants Short, Int, Float, or Double are accepted. The initial value is Float.
        /// </param>
        /// <param name="stride">
        /// Specifies the byte offset between consecutive texture coordinate sets. If stride is 0, the array elements are understood to be tightly packed. The initial value is 0.
        /// </param>
        /// <param name="pointer">
        /// [length: COMPSIZE(size,type,stride)]
        /// Specifies a pointer to the first coordinate of the first texture coordinate set in the array. The initial value is 0.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glTexCoordPointer")]
        public static void TexCoordPointer<T3>(int size, OpenTK.Graphics.ES11.TexCoordPointerType type, int stride, [InAttribute, OutAttribute, CountAttribute(Computed = "size,type,stride")] ref T3 pointer)
            where T3 : struct
         { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Set texture environment parameters
        /// </summary>
        /// <param name="target">
        /// Specifies a texture environment. May be TextureEnv, TextureFilterControl or PointSprite.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a single-valued texture environment parameter. May be either TextureEnvMode, TextureLodBias, CombineRgb, CombineAlpha, Src0Rgb, Src1Rgb, Src2Rgb, Src0Alpha, Src1Alpha, Src2Alpha, Operand0Rgb, Operand1Rgb, Operand2Rgb, Operand0Alpha, Operand1Alpha, Operand2Alpha, RgbScale, AlphaScale, or CoordReplace.
        /// </param>
        /// <param name="param">
        /// Specifies a single symbolic constant, one of Add, AddSigned, Interpolate, Modulate, Decal, Blend, Replace, Subtract, Combine, Texture, Constant, PrimaryColor, Previous, SrcColor, OneMinusSrcColor, SrcAlpha, OneMinusSrcAlpha, a single boolean value for the point sprite texture coordinate replacement, a single floating-point value for the texture level-of-detail bias, or 1.0, 2.0, or 4.0 when specifying the RgbScale or AlphaScale.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glTexEnvf")]
        public static void TexEnv(OpenTK.Graphics.ES11.All target, OpenTK.Graphics.ES11.All pname, float param) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Set texture environment parameters
        /// </summary>
        /// <param name="target">
        /// Specifies a texture environment. May be TextureEnv, TextureFilterControl or PointSprite.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a single-valued texture environment parameter. May be either TextureEnvMode, TextureLodBias, CombineRgb, CombineAlpha, Src0Rgb, Src1Rgb, Src2Rgb, Src0Alpha, Src1Alpha, Src2Alpha, Operand0Rgb, Operand1Rgb, Operand2Rgb, Operand0Alpha, Operand1Alpha, Operand2Alpha, RgbScale, AlphaScale, or CoordReplace.
        /// </param>
        /// <param name="param">
        /// Specifies a single symbolic constant, one of Add, AddSigned, Interpolate, Modulate, Decal, Blend, Replace, Subtract, Combine, Texture, Constant, PrimaryColor, Previous, SrcColor, OneMinusSrcColor, SrcAlpha, OneMinusSrcAlpha, a single boolean value for the point sprite texture coordinate replacement, a single floating-point value for the texture level-of-detail bias, or 1.0, 2.0, or 4.0 when specifying the RgbScale or AlphaScale.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glTexEnvf")]
        public static void TexEnv(OpenTK.Graphics.ES11.TextureEnvTarget target, OpenTK.Graphics.ES11.TextureEnvParameter pname, float param) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Set texture environment parameters
        /// </summary>
        /// <param name="target">
        /// Specifies a texture environment. May be TextureEnv, TextureFilterControl or PointSprite.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a single-valued texture environment parameter. May be either TextureEnvMode, TextureLodBias, CombineRgb, CombineAlpha, Src0Rgb, Src1Rgb, Src2Rgb, Src0Alpha, Src1Alpha, Src2Alpha, Operand0Rgb, Operand1Rgb, Operand2Rgb, Operand0Alpha, Operand1Alpha, Operand2Alpha, RgbScale, AlphaScale, or CoordReplace.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// Specifies a single symbolic constant, one of Add, AddSigned, Interpolate, Modulate, Decal, Blend, Replace, Subtract, Combine, Texture, Constant, PrimaryColor, Previous, SrcColor, OneMinusSrcColor, SrcAlpha, OneMinusSrcAlpha, a single boolean value for the point sprite texture coordinate replacement, a single floating-point value for the texture level-of-detail bias, or 1.0, 2.0, or 4.0 when specifying the RgbScale or AlphaScale.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glTexEnvfv")]
        public static void TexEnv(OpenTK.Graphics.ES11.All target, OpenTK.Graphics.ES11.All pname, [CountAttribute(Computed = "pname")] float[] @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Set texture environment parameters
        /// </summary>
        /// <param name="target">
        /// Specifies a texture environment. May be TextureEnv, TextureFilterControl or PointSprite.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a single-valued texture environment parameter. May be either TextureEnvMode, TextureLodBias, CombineRgb, CombineAlpha, Src0Rgb, Src1Rgb, Src2Rgb, Src0Alpha, Src1Alpha, Src2Alpha, Operand0Rgb, Operand1Rgb, Operand2Rgb, Operand0Alpha, Operand1Alpha, Operand2Alpha, RgbScale, AlphaScale, or CoordReplace.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// Specifies a single symbolic constant, one of Add, AddSigned, Interpolate, Modulate, Decal, Blend, Replace, Subtract, Combine, Texture, Constant, PrimaryColor, Previous, SrcColor, OneMinusSrcColor, SrcAlpha, OneMinusSrcAlpha, a single boolean value for the point sprite texture coordinate replacement, a single floating-point value for the texture level-of-detail bias, or 1.0, 2.0, or 4.0 when specifying the RgbScale or AlphaScale.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glTexEnvfv")]
        public static unsafe void TexEnv(OpenTK.Graphics.ES11.All target, OpenTK.Graphics.ES11.All pname, [CountAttribute(Computed = "pname")] float* @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Set texture environment parameters
        /// </summary>
        /// <param name="target">
        /// Specifies a texture environment. May be TextureEnv, TextureFilterControl or PointSprite.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a single-valued texture environment parameter. May be either TextureEnvMode, TextureLodBias, CombineRgb, CombineAlpha, Src0Rgb, Src1Rgb, Src2Rgb, Src0Alpha, Src1Alpha, Src2Alpha, Operand0Rgb, Operand1Rgb, Operand2Rgb, Operand0Alpha, Operand1Alpha, Operand2Alpha, RgbScale, AlphaScale, or CoordReplace.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// Specifies a single symbolic constant, one of Add, AddSigned, Interpolate, Modulate, Decal, Blend, Replace, Subtract, Combine, Texture, Constant, PrimaryColor, Previous, SrcColor, OneMinusSrcColor, SrcAlpha, OneMinusSrcAlpha, a single boolean value for the point sprite texture coordinate replacement, a single floating-point value for the texture level-of-detail bias, or 1.0, 2.0, or 4.0 when specifying the RgbScale or AlphaScale.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glTexEnvfv")]
        public static void TexEnv(OpenTK.Graphics.ES11.TextureEnvTarget target, OpenTK.Graphics.ES11.TextureEnvParameter pname, [CountAttribute(Computed = "pname")] float[] @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Set texture environment parameters
        /// </summary>
        /// <param name="target">
        /// Specifies a texture environment. May be TextureEnv, TextureFilterControl or PointSprite.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a single-valued texture environment parameter. May be either TextureEnvMode, TextureLodBias, CombineRgb, CombineAlpha, Src0Rgb, Src1Rgb, Src2Rgb, Src0Alpha, Src1Alpha, Src2Alpha, Operand0Rgb, Operand1Rgb, Operand2Rgb, Operand0Alpha, Operand1Alpha, Operand2Alpha, RgbScale, AlphaScale, or CoordReplace.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// Specifies a single symbolic constant, one of Add, AddSigned, Interpolate, Modulate, Decal, Blend, Replace, Subtract, Combine, Texture, Constant, PrimaryColor, Previous, SrcColor, OneMinusSrcColor, SrcAlpha, OneMinusSrcAlpha, a single boolean value for the point sprite texture coordinate replacement, a single floating-point value for the texture level-of-detail bias, or 1.0, 2.0, or 4.0 when specifying the RgbScale or AlphaScale.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glTexEnvfv")]
        public static unsafe void TexEnv(OpenTK.Graphics.ES11.TextureEnvTarget target, OpenTK.Graphics.ES11.TextureEnvParameter pname, [CountAttribute(Computed = "pname")] float* @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Set texture environment parameters
        /// </summary>
        /// <param name="target">
        /// Specifies a texture environment. May be TextureEnv, TextureFilterControl or PointSprite.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a single-valued texture environment parameter. May be either TextureEnvMode, TextureLodBias, CombineRgb, CombineAlpha, Src0Rgb, Src1Rgb, Src2Rgb, Src0Alpha, Src1Alpha, Src2Alpha, Operand0Rgb, Operand1Rgb, Operand2Rgb, Operand0Alpha, Operand1Alpha, Operand2Alpha, RgbScale, AlphaScale, or CoordReplace.
        /// </param>
        /// <param name="param">
        /// Specifies a single symbolic constant, one of Add, AddSigned, Interpolate, Modulate, Decal, Blend, Replace, Subtract, Combine, Texture, Constant, PrimaryColor, Previous, SrcColor, OneMinusSrcColor, SrcAlpha, OneMinusSrcAlpha, a single boolean value for the point sprite texture coordinate replacement, a single floating-point value for the texture level-of-detail bias, or 1.0, 2.0, or 4.0 when specifying the RgbScale or AlphaScale.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glTexEnvi")]
        public static void TexEnv(OpenTK.Graphics.ES11.All target, OpenTK.Graphics.ES11.All pname, int param) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Set texture environment parameters
        /// </summary>
        /// <param name="target">
        /// Specifies a texture environment. May be TextureEnv, TextureFilterControl or PointSprite.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a single-valued texture environment parameter. May be either TextureEnvMode, TextureLodBias, CombineRgb, CombineAlpha, Src0Rgb, Src1Rgb, Src2Rgb, Src0Alpha, Src1Alpha, Src2Alpha, Operand0Rgb, Operand1Rgb, Operand2Rgb, Operand0Alpha, Operand1Alpha, Operand2Alpha, RgbScale, AlphaScale, or CoordReplace.
        /// </param>
        /// <param name="param">
        /// Specifies a single symbolic constant, one of Add, AddSigned, Interpolate, Modulate, Decal, Blend, Replace, Subtract, Combine, Texture, Constant, PrimaryColor, Previous, SrcColor, OneMinusSrcColor, SrcAlpha, OneMinusSrcAlpha, a single boolean value for the point sprite texture coordinate replacement, a single floating-point value for the texture level-of-detail bias, or 1.0, 2.0, or 4.0 when specifying the RgbScale or AlphaScale.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glTexEnvi")]
        public static void TexEnv(OpenTK.Graphics.ES11.TextureEnvTarget target, OpenTK.Graphics.ES11.TextureEnvParameter pname, int param) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Set texture environment parameters
        /// </summary>
        /// <param name="target">
        /// Specifies a texture environment. May be TextureEnv, TextureFilterControl or PointSprite.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a single-valued texture environment parameter. May be either TextureEnvMode, TextureLodBias, CombineRgb, CombineAlpha, Src0Rgb, Src1Rgb, Src2Rgb, Src0Alpha, Src1Alpha, Src2Alpha, Operand0Rgb, Operand1Rgb, Operand2Rgb, Operand0Alpha, Operand1Alpha, Operand2Alpha, RgbScale, AlphaScale, or CoordReplace.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// Specifies a single symbolic constant, one of Add, AddSigned, Interpolate, Modulate, Decal, Blend, Replace, Subtract, Combine, Texture, Constant, PrimaryColor, Previous, SrcColor, OneMinusSrcColor, SrcAlpha, OneMinusSrcAlpha, a single boolean value for the point sprite texture coordinate replacement, a single floating-point value for the texture level-of-detail bias, or 1.0, 2.0, or 4.0 when specifying the RgbScale or AlphaScale.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glTexEnviv")]
        public static void TexEnv(OpenTK.Graphics.ES11.All target, OpenTK.Graphics.ES11.All pname, [CountAttribute(Computed = "pname")] int[] @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Set texture environment parameters
        /// </summary>
        /// <param name="target">
        /// Specifies a texture environment. May be TextureEnv, TextureFilterControl or PointSprite.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a single-valued texture environment parameter. May be either TextureEnvMode, TextureLodBias, CombineRgb, CombineAlpha, Src0Rgb, Src1Rgb, Src2Rgb, Src0Alpha, Src1Alpha, Src2Alpha, Operand0Rgb, Operand1Rgb, Operand2Rgb, Operand0Alpha, Operand1Alpha, Operand2Alpha, RgbScale, AlphaScale, or CoordReplace.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// Specifies a single symbolic constant, one of Add, AddSigned, Interpolate, Modulate, Decal, Blend, Replace, Subtract, Combine, Texture, Constant, PrimaryColor, Previous, SrcColor, OneMinusSrcColor, SrcAlpha, OneMinusSrcAlpha, a single boolean value for the point sprite texture coordinate replacement, a single floating-point value for the texture level-of-detail bias, or 1.0, 2.0, or 4.0 when specifying the RgbScale or AlphaScale.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glTexEnviv")]
        public static unsafe void TexEnv(OpenTK.Graphics.ES11.All target, OpenTK.Graphics.ES11.All pname, [CountAttribute(Computed = "pname")] int* @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Set texture environment parameters
        /// </summary>
        /// <param name="target">
        /// Specifies a texture environment. May be TextureEnv, TextureFilterControl or PointSprite.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a single-valued texture environment parameter. May be either TextureEnvMode, TextureLodBias, CombineRgb, CombineAlpha, Src0Rgb, Src1Rgb, Src2Rgb, Src0Alpha, Src1Alpha, Src2Alpha, Operand0Rgb, Operand1Rgb, Operand2Rgb, Operand0Alpha, Operand1Alpha, Operand2Alpha, RgbScale, AlphaScale, or CoordReplace.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// Specifies a single symbolic constant, one of Add, AddSigned, Interpolate, Modulate, Decal, Blend, Replace, Subtract, Combine, Texture, Constant, PrimaryColor, Previous, SrcColor, OneMinusSrcColor, SrcAlpha, OneMinusSrcAlpha, a single boolean value for the point sprite texture coordinate replacement, a single floating-point value for the texture level-of-detail bias, or 1.0, 2.0, or 4.0 when specifying the RgbScale or AlphaScale.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glTexEnviv")]
        public static void TexEnv(OpenTK.Graphics.ES11.TextureEnvTarget target, OpenTK.Graphics.ES11.TextureEnvParameter pname, [CountAttribute(Computed = "pname")] int[] @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Set texture environment parameters
        /// </summary>
        /// <param name="target">
        /// Specifies a texture environment. May be TextureEnv, TextureFilterControl or PointSprite.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a single-valued texture environment parameter. May be either TextureEnvMode, TextureLodBias, CombineRgb, CombineAlpha, Src0Rgb, Src1Rgb, Src2Rgb, Src0Alpha, Src1Alpha, Src2Alpha, Operand0Rgb, Operand1Rgb, Operand2Rgb, Operand0Alpha, Operand1Alpha, Operand2Alpha, RgbScale, AlphaScale, or CoordReplace.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// Specifies a single symbolic constant, one of Add, AddSigned, Interpolate, Modulate, Decal, Blend, Replace, Subtract, Combine, Texture, Constant, PrimaryColor, Previous, SrcColor, OneMinusSrcColor, SrcAlpha, OneMinusSrcAlpha, a single boolean value for the point sprite texture coordinate replacement, a single floating-point value for the texture level-of-detail bias, or 1.0, 2.0, or 4.0 when specifying the RgbScale or AlphaScale.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glTexEnviv")]
        public static unsafe void TexEnv(OpenTK.Graphics.ES11.TextureEnvTarget target, OpenTK.Graphics.ES11.TextureEnvParameter pname, [CountAttribute(Computed = "pname")] int* @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="target">
        /// </param>
        /// <param name="pname">
        /// </param>
        /// <param name="param">
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glTexEnvx")]
        public static void TexEnvx(OpenTK.Graphics.ES11.All target, OpenTK.Graphics.ES11.All pname, int param) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="target">
        /// </param>
        /// <param name="pname">
        /// </param>
        /// <param name="param">
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glTexEnvx")]
        public static void TexEnvx(OpenTK.Graphics.ES11.TextureEnvTarget target, OpenTK.Graphics.ES11.TextureEnvParameter pname, int param) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="target">
        /// </param>
        /// <param name="pname">
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glTexEnvxv")]
        public static void TexEnvx(OpenTK.Graphics.ES11.All target, OpenTK.Graphics.ES11.All pname, [CountAttribute(Computed = "pname")] int[] @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="target">
        /// </param>
        /// <param name="pname">
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glTexEnvxv")]
        public static unsafe void TexEnvx(OpenTK.Graphics.ES11.All target, OpenTK.Graphics.ES11.All pname, [CountAttribute(Computed = "pname")] int* @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="target">
        /// </param>
        /// <param name="pname">
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glTexEnvxv")]
        public static void TexEnvx(OpenTK.Graphics.ES11.TextureEnvTarget target, OpenTK.Graphics.ES11.TextureEnvParameter pname, [CountAttribute(Computed = "pname")] int[] @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="target">
        /// </param>
        /// <param name="pname">
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glTexEnvxv")]
        public static unsafe void TexEnvx(OpenTK.Graphics.ES11.TextureEnvTarget target, OpenTK.Graphics.ES11.TextureEnvParameter pname, [CountAttribute(Computed = "pname")] int* @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Specify a two-dimensional texture image
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture of the active texture unit. Must be Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="internalformat">
        /// Specifies the internal format of the texture. Must be one of the following symbolic constants: Alpha, Luminance, LuminanceAlpha, Rgb, Rgba.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture image. All implementations support 2D texture images that are at least 64 texels wide and cube-mapped texture images that are at least 16 texels wide.
        /// </param>
        /// <param name="height">
        /// Specifies the height of the texture image All implementations support 2D texture images that are at least 64 texels high and cube-mapped texture images that are at least 16 texels high.
        /// </param>
        /// <param name="border">
        /// Specifies the width of the border. Must be 0.
        /// </param>
        /// <param name="format">
        /// Specifies the format of the texel data.  Must match internalformat. The following symbolic values are accepted: Alpha, Rgb, Rgba, Luminance, and LuminanceAlpha.
        /// </param>
        /// <param name="type">
        /// Specifies the data type of the texel data. The following symbolic values are accepted: UnsignedByte, UnsignedShort565, UnsignedShort4444, and UnsignedShort5551.
        /// </param>
        /// <param name="pixels">
        /// [length: COMPSIZE(format,type,width,height)]
        /// Specifies a pointer to the image data in memory.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glTexImage2D")]
        public static void TexImage2D(OpenTK.Graphics.ES11.All target, int level, OpenTK.Graphics.ES11.All internalformat, int width, int height, int border, OpenTK.Graphics.ES11.All format, OpenTK.Graphics.ES11.All type, [CountAttribute(Computed = "format,type,width,height")] IntPtr pixels) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Specify a two-dimensional texture image
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture of the active texture unit. Must be Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="internalformat">
        /// Specifies the internal format of the texture. Must be one of the following symbolic constants: Alpha, Luminance, LuminanceAlpha, Rgb, Rgba.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture image. All implementations support 2D texture images that are at least 64 texels wide and cube-mapped texture images that are at least 16 texels wide.
        /// </param>
        /// <param name="height">
        /// Specifies the height of the texture image All implementations support 2D texture images that are at least 64 texels high and cube-mapped texture images that are at least 16 texels high.
        /// </param>
        /// <param name="border">
        /// Specifies the width of the border. Must be 0.
        /// </param>
        /// <param name="format">
        /// Specifies the format of the texel data.  Must match internalformat. The following symbolic values are accepted: Alpha, Rgb, Rgba, Luminance, and LuminanceAlpha.
        /// </param>
        /// <param name="type">
        /// Specifies the data type of the texel data. The following symbolic values are accepted: UnsignedByte, UnsignedShort565, UnsignedShort4444, and UnsignedShort5551.
        /// </param>
        /// <param name="pixels">
        /// [length: COMPSIZE(format,type,width,height)]
        /// Specifies a pointer to the image data in memory.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glTexImage2D")]
        public static void TexImage2D<T8>(OpenTK.Graphics.ES11.All target, int level, OpenTK.Graphics.ES11.All internalformat, int width, int height, int border, OpenTK.Graphics.ES11.All format, OpenTK.Graphics.ES11.All type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type,width,height")] T8[] pixels)
            where T8 : struct
         { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Specify a two-dimensional texture image
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture of the active texture unit. Must be Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="internalformat">
        /// Specifies the internal format of the texture. Must be one of the following symbolic constants: Alpha, Luminance, LuminanceAlpha, Rgb, Rgba.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture image. All implementations support 2D texture images that are at least 64 texels wide and cube-mapped texture images that are at least 16 texels wide.
        /// </param>
        /// <param name="height">
        /// Specifies the height of the texture image All implementations support 2D texture images that are at least 64 texels high and cube-mapped texture images that are at least 16 texels high.
        /// </param>
        /// <param name="border">
        /// Specifies the width of the border. Must be 0.
        /// </param>
        /// <param name="format">
        /// Specifies the format of the texel data.  Must match internalformat. The following symbolic values are accepted: Alpha, Rgb, Rgba, Luminance, and LuminanceAlpha.
        /// </param>
        /// <param name="type">
        /// Specifies the data type of the texel data. The following symbolic values are accepted: UnsignedByte, UnsignedShort565, UnsignedShort4444, and UnsignedShort5551.
        /// </param>
        /// <param name="pixels">
        /// [length: COMPSIZE(format,type,width,height)]
        /// Specifies a pointer to the image data in memory.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glTexImage2D")]
        public static void TexImage2D<T8>(OpenTK.Graphics.ES11.All target, int level, OpenTK.Graphics.ES11.All internalformat, int width, int height, int border, OpenTK.Graphics.ES11.All format, OpenTK.Graphics.ES11.All type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type,width,height")] T8[,] pixels)
            where T8 : struct
         { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Specify a two-dimensional texture image
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture of the active texture unit. Must be Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="internalformat">
        /// Specifies the internal format of the texture. Must be one of the following symbolic constants: Alpha, Luminance, LuminanceAlpha, Rgb, Rgba.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture image. All implementations support 2D texture images that are at least 64 texels wide and cube-mapped texture images that are at least 16 texels wide.
        /// </param>
        /// <param name="height">
        /// Specifies the height of the texture image All implementations support 2D texture images that are at least 64 texels high and cube-mapped texture images that are at least 16 texels high.
        /// </param>
        /// <param name="border">
        /// Specifies the width of the border. Must be 0.
        /// </param>
        /// <param name="format">
        /// Specifies the format of the texel data.  Must match internalformat. The following symbolic values are accepted: Alpha, Rgb, Rgba, Luminance, and LuminanceAlpha.
        /// </param>
        /// <param name="type">
        /// Specifies the data type of the texel data. The following symbolic values are accepted: UnsignedByte, UnsignedShort565, UnsignedShort4444, and UnsignedShort5551.
        /// </param>
        /// <param name="pixels">
        /// [length: COMPSIZE(format,type,width,height)]
        /// Specifies a pointer to the image data in memory.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glTexImage2D")]
        public static void TexImage2D<T8>(OpenTK.Graphics.ES11.All target, int level, OpenTK.Graphics.ES11.All internalformat, int width, int height, int border, OpenTK.Graphics.ES11.All format, OpenTK.Graphics.ES11.All type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type,width,height")] T8[,,] pixels)
            where T8 : struct
         { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Specify a two-dimensional texture image
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture of the active texture unit. Must be Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="internalformat">
        /// Specifies the internal format of the texture. Must be one of the following symbolic constants: Alpha, Luminance, LuminanceAlpha, Rgb, Rgba.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture image. All implementations support 2D texture images that are at least 64 texels wide and cube-mapped texture images that are at least 16 texels wide.
        /// </param>
        /// <param name="height">
        /// Specifies the height of the texture image All implementations support 2D texture images that are at least 64 texels high and cube-mapped texture images that are at least 16 texels high.
        /// </param>
        /// <param name="border">
        /// Specifies the width of the border. Must be 0.
        /// </param>
        /// <param name="format">
        /// Specifies the format of the texel data.  Must match internalformat. The following symbolic values are accepted: Alpha, Rgb, Rgba, Luminance, and LuminanceAlpha.
        /// </param>
        /// <param name="type">
        /// Specifies the data type of the texel data. The following symbolic values are accepted: UnsignedByte, UnsignedShort565, UnsignedShort4444, and UnsignedShort5551.
        /// </param>
        /// <param name="pixels">
        /// [length: COMPSIZE(format,type,width,height)]
        /// Specifies a pointer to the image data in memory.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glTexImage2D")]
        public static void TexImage2D<T8>(OpenTK.Graphics.ES11.All target, int level, OpenTK.Graphics.ES11.All internalformat, int width, int height, int border, OpenTK.Graphics.ES11.All format, OpenTK.Graphics.ES11.All type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type,width,height")] ref T8 pixels)
            where T8 : struct
         { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Specify a two-dimensional texture image
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture of the active texture unit. Must be Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="internalformat">
        /// Specifies the internal format of the texture. Must be one of the following symbolic constants: Alpha, Luminance, LuminanceAlpha, Rgb, Rgba.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture image. All implementations support 2D texture images that are at least 64 texels wide and cube-mapped texture images that are at least 16 texels wide.
        /// </param>
        /// <param name="height">
        /// Specifies the height of the texture image All implementations support 2D texture images that are at least 64 texels high and cube-mapped texture images that are at least 16 texels high.
        /// </param>
        /// <param name="border">
        /// Specifies the width of the border. Must be 0.
        /// </param>
        /// <param name="format">
        /// Specifies the format of the texel data.  Must match internalformat. The following symbolic values are accepted: Alpha, Rgb, Rgba, Luminance, and LuminanceAlpha.
        /// </param>
        /// <param name="type">
        /// Specifies the data type of the texel data. The following symbolic values are accepted: UnsignedByte, UnsignedShort565, UnsignedShort4444, and UnsignedShort5551.
        /// </param>
        /// <param name="pixels">
        /// [length: COMPSIZE(format,type,width,height)]
        /// Specifies a pointer to the image data in memory.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glTexImage2D")]
        public static void TexImage2D(OpenTK.Graphics.ES11.TextureTarget target, int level, OpenTK.Graphics.ES11.InternalFormat internalformat, int width, int height, int border, OpenTK.Graphics.ES11.PixelFormat format, OpenTK.Graphics.ES11.PixelType type, [CountAttribute(Computed = "format,type,width,height")] IntPtr pixels) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Specify a two-dimensional texture image
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture of the active texture unit. Must be Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="internalformat">
        /// Specifies the internal format of the texture. Must be one of the following symbolic constants: Alpha, Luminance, LuminanceAlpha, Rgb, Rgba.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture image. All implementations support 2D texture images that are at least 64 texels wide and cube-mapped texture images that are at least 16 texels wide.
        /// </param>
        /// <param name="height">
        /// Specifies the height of the texture image All implementations support 2D texture images that are at least 64 texels high and cube-mapped texture images that are at least 16 texels high.
        /// </param>
        /// <param name="border">
        /// Specifies the width of the border. Must be 0.
        /// </param>
        /// <param name="format">
        /// Specifies the format of the texel data.  Must match internalformat. The following symbolic values are accepted: Alpha, Rgb, Rgba, Luminance, and LuminanceAlpha.
        /// </param>
        /// <param name="type">
        /// Specifies the data type of the texel data. The following symbolic values are accepted: UnsignedByte, UnsignedShort565, UnsignedShort4444, and UnsignedShort5551.
        /// </param>
        /// <param name="pixels">
        /// [length: COMPSIZE(format,type,width,height)]
        /// Specifies a pointer to the image data in memory.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glTexImage2D")]
        public static void TexImage2D<T8>(OpenTK.Graphics.ES11.TextureTarget target, int level, OpenTK.Graphics.ES11.InternalFormat internalformat, int width, int height, int border, OpenTK.Graphics.ES11.PixelFormat format, OpenTK.Graphics.ES11.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type,width,height")] T8[] pixels)
            where T8 : struct
         { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Specify a two-dimensional texture image
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture of the active texture unit. Must be Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="internalformat">
        /// Specifies the internal format of the texture. Must be one of the following symbolic constants: Alpha, Luminance, LuminanceAlpha, Rgb, Rgba.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture image. All implementations support 2D texture images that are at least 64 texels wide and cube-mapped texture images that are at least 16 texels wide.
        /// </param>
        /// <param name="height">
        /// Specifies the height of the texture image All implementations support 2D texture images that are at least 64 texels high and cube-mapped texture images that are at least 16 texels high.
        /// </param>
        /// <param name="border">
        /// Specifies the width of the border. Must be 0.
        /// </param>
        /// <param name="format">
        /// Specifies the format of the texel data.  Must match internalformat. The following symbolic values are accepted: Alpha, Rgb, Rgba, Luminance, and LuminanceAlpha.
        /// </param>
        /// <param name="type">
        /// Specifies the data type of the texel data. The following symbolic values are accepted: UnsignedByte, UnsignedShort565, UnsignedShort4444, and UnsignedShort5551.
        /// </param>
        /// <param name="pixels">
        /// [length: COMPSIZE(format,type,width,height)]
        /// Specifies a pointer to the image data in memory.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glTexImage2D")]
        public static void TexImage2D<T8>(OpenTK.Graphics.ES11.TextureTarget target, int level, OpenTK.Graphics.ES11.InternalFormat internalformat, int width, int height, int border, OpenTK.Graphics.ES11.PixelFormat format, OpenTK.Graphics.ES11.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type,width,height")] T8[,] pixels)
            where T8 : struct
         { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Specify a two-dimensional texture image
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture of the active texture unit. Must be Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="internalformat">
        /// Specifies the internal format of the texture. Must be one of the following symbolic constants: Alpha, Luminance, LuminanceAlpha, Rgb, Rgba.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture image. All implementations support 2D texture images that are at least 64 texels wide and cube-mapped texture images that are at least 16 texels wide.
        /// </param>
        /// <param name="height">
        /// Specifies the height of the texture image All implementations support 2D texture images that are at least 64 texels high and cube-mapped texture images that are at least 16 texels high.
        /// </param>
        /// <param name="border">
        /// Specifies the width of the border. Must be 0.
        /// </param>
        /// <param name="format">
        /// Specifies the format of the texel data.  Must match internalformat. The following symbolic values are accepted: Alpha, Rgb, Rgba, Luminance, and LuminanceAlpha.
        /// </param>
        /// <param name="type">
        /// Specifies the data type of the texel data. The following symbolic values are accepted: UnsignedByte, UnsignedShort565, UnsignedShort4444, and UnsignedShort5551.
        /// </param>
        /// <param name="pixels">
        /// [length: COMPSIZE(format,type,width,height)]
        /// Specifies a pointer to the image data in memory.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glTexImage2D")]
        public static void TexImage2D<T8>(OpenTK.Graphics.ES11.TextureTarget target, int level, OpenTK.Graphics.ES11.InternalFormat internalformat, int width, int height, int border, OpenTK.Graphics.ES11.PixelFormat format, OpenTK.Graphics.ES11.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type,width,height")] T8[,,] pixels)
            where T8 : struct
         { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Specify a two-dimensional texture image
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture of the active texture unit. Must be Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="internalformat">
        /// Specifies the internal format of the texture. Must be one of the following symbolic constants: Alpha, Luminance, LuminanceAlpha, Rgb, Rgba.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture image. All implementations support 2D texture images that are at least 64 texels wide and cube-mapped texture images that are at least 16 texels wide.
        /// </param>
        /// <param name="height">
        /// Specifies the height of the texture image All implementations support 2D texture images that are at least 64 texels high and cube-mapped texture images that are at least 16 texels high.
        /// </param>
        /// <param name="border">
        /// Specifies the width of the border. Must be 0.
        /// </param>
        /// <param name="format">
        /// Specifies the format of the texel data.  Must match internalformat. The following symbolic values are accepted: Alpha, Rgb, Rgba, Luminance, and LuminanceAlpha.
        /// </param>
        /// <param name="type">
        /// Specifies the data type of the texel data. The following symbolic values are accepted: UnsignedByte, UnsignedShort565, UnsignedShort4444, and UnsignedShort5551.
        /// </param>
        /// <param name="pixels">
        /// [length: COMPSIZE(format,type,width,height)]
        /// Specifies a pointer to the image data in memory.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glTexImage2D")]
        public static void TexImage2D<T8>(OpenTK.Graphics.ES11.TextureTarget target, int level, OpenTK.Graphics.ES11.InternalFormat internalformat, int width, int height, int border, OpenTK.Graphics.ES11.PixelFormat format, OpenTK.Graphics.ES11.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type,width,height")] ref T8 pixels)
            where T8 : struct
         { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Set texture parameters
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture of the active texture unit, which must be either Texture2D or TextureCubeMap.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a single-valued texture parameter. pname can be one of the following: TextureMinFilter, TextureMagFilter, TextureWrapS, or TextureWrapT.
        /// </param>
        /// <param name="param">
        /// Specifies the value of pname.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glTexParameterf")]
        public static void TexParameter(OpenTK.Graphics.ES11.All target, OpenTK.Graphics.ES11.All pname, float param) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Set texture parameters
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture of the active texture unit, which must be either Texture2D or TextureCubeMap.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a single-valued texture parameter. pname can be one of the following: TextureMinFilter, TextureMagFilter, TextureWrapS, or TextureWrapT.
        /// </param>
        /// <param name="param">
        /// Specifies the value of pname.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glTexParameterf")]
        public static void TexParameter(OpenTK.Graphics.ES11.TextureTarget target, OpenTK.Graphics.ES11.TextureParameterName pname, float param) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Set texture parameters
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture of the active texture unit, which must be either Texture2D or TextureCubeMap.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a single-valued texture parameter. pname can be one of the following: TextureMinFilter, TextureMagFilter, TextureWrapS, or TextureWrapT.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// Specifies the value of pname.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glTexParameterfv")]
        public static void TexParameter(OpenTK.Graphics.ES11.All target, OpenTK.Graphics.ES11.All pname, [CountAttribute(Computed = "pname")] float[] @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Set texture parameters
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture of the active texture unit, which must be either Texture2D or TextureCubeMap.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a single-valued texture parameter. pname can be one of the following: TextureMinFilter, TextureMagFilter, TextureWrapS, or TextureWrapT.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// Specifies the value of pname.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glTexParameterfv")]
        public static unsafe void TexParameter(OpenTK.Graphics.ES11.All target, OpenTK.Graphics.ES11.All pname, [CountAttribute(Computed = "pname")] float* @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Set texture parameters
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture of the active texture unit, which must be either Texture2D or TextureCubeMap.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a single-valued texture parameter. pname can be one of the following: TextureMinFilter, TextureMagFilter, TextureWrapS, or TextureWrapT.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// Specifies the value of pname.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glTexParameterfv")]
        public static void TexParameter(OpenTK.Graphics.ES11.TextureTarget target, OpenTK.Graphics.ES11.TextureParameterName pname, [CountAttribute(Computed = "pname")] float[] @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Set texture parameters
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture of the active texture unit, which must be either Texture2D or TextureCubeMap.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a single-valued texture parameter. pname can be one of the following: TextureMinFilter, TextureMagFilter, TextureWrapS, or TextureWrapT.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// Specifies the value of pname.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glTexParameterfv")]
        public static unsafe void TexParameter(OpenTK.Graphics.ES11.TextureTarget target, OpenTK.Graphics.ES11.TextureParameterName pname, [CountAttribute(Computed = "pname")] float* @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Set texture parameters
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture of the active texture unit, which must be either Texture2D or TextureCubeMap.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a single-valued texture parameter. pname can be one of the following: TextureMinFilter, TextureMagFilter, TextureWrapS, or TextureWrapT.
        /// </param>
        /// <param name="param">
        /// Specifies the value of pname.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glTexParameteri")]
        public static void TexParameter(OpenTK.Graphics.ES11.All target, OpenTK.Graphics.ES11.All pname, int param) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Set texture parameters
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture of the active texture unit, which must be either Texture2D or TextureCubeMap.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a single-valued texture parameter. pname can be one of the following: TextureMinFilter, TextureMagFilter, TextureWrapS, or TextureWrapT.
        /// </param>
        /// <param name="param">
        /// Specifies the value of pname.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glTexParameteri")]
        public static void TexParameter(OpenTK.Graphics.ES11.TextureTarget target, OpenTK.Graphics.ES11.TextureParameterName pname, int param) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Set texture parameters
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture of the active texture unit, which must be either Texture2D or TextureCubeMap.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a single-valued texture parameter. pname can be one of the following: TextureMinFilter, TextureMagFilter, TextureWrapS, or TextureWrapT.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// Specifies the value of pname.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glTexParameteriv")]
        public static void TexParameter(OpenTK.Graphics.ES11.All target, OpenTK.Graphics.ES11.All pname, [CountAttribute(Computed = "pname")] int[] @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Set texture parameters
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture of the active texture unit, which must be either Texture2D or TextureCubeMap.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a single-valued texture parameter. pname can be one of the following: TextureMinFilter, TextureMagFilter, TextureWrapS, or TextureWrapT.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// Specifies the value of pname.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glTexParameteriv")]
        public static unsafe void TexParameter(OpenTK.Graphics.ES11.All target, OpenTK.Graphics.ES11.All pname, [CountAttribute(Computed = "pname")] int* @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Set texture parameters
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture of the active texture unit, which must be either Texture2D or TextureCubeMap.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a single-valued texture parameter. pname can be one of the following: TextureMinFilter, TextureMagFilter, TextureWrapS, or TextureWrapT.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// Specifies the value of pname.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glTexParameteriv")]
        public static void TexParameter(OpenTK.Graphics.ES11.TextureTarget target, OpenTK.Graphics.ES11.TextureParameterName pname, [CountAttribute(Computed = "pname")] int[] @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Set texture parameters
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture of the active texture unit, which must be either Texture2D or TextureCubeMap.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a single-valued texture parameter. pname can be one of the following: TextureMinFilter, TextureMagFilter, TextureWrapS, or TextureWrapT.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// Specifies the value of pname.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glTexParameteriv")]
        public static unsafe void TexParameter(OpenTK.Graphics.ES11.TextureTarget target, OpenTK.Graphics.ES11.TextureParameterName pname, [CountAttribute(Computed = "pname")] int* @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="target">
        /// </param>
        /// <param name="pname">
        /// </param>
        /// <param name="param">
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glTexParameterx")]
        public static void TexParameterx(OpenTK.Graphics.ES11.All target, OpenTK.Graphics.ES11.All pname, int param) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="target">
        /// </param>
        /// <param name="pname">
        /// </param>
        /// <param name="param">
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glTexParameterx")]
        public static void TexParameterx(OpenTK.Graphics.ES11.TextureTarget target, OpenTK.Graphics.ES11.GetTextureParameter pname, int param) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="target">
        /// </param>
        /// <param name="pname">
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glTexParameterxv")]
        public static void TexParameterx(OpenTK.Graphics.ES11.All target, OpenTK.Graphics.ES11.All pname, [CountAttribute(Computed = "pname")] int[] @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="target">
        /// </param>
        /// <param name="pname">
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glTexParameterxv")]
        public static unsafe void TexParameterx(OpenTK.Graphics.ES11.All target, OpenTK.Graphics.ES11.All pname, [CountAttribute(Computed = "pname")] int* @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="target">
        /// </param>
        /// <param name="pname">
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glTexParameterxv")]
        public static void TexParameterx(OpenTK.Graphics.ES11.TextureTarget target, OpenTK.Graphics.ES11.GetTextureParameter pname, [CountAttribute(Computed = "pname")] int[] @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="target">
        /// </param>
        /// <param name="pname">
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glTexParameterxv")]
        public static unsafe void TexParameterx(OpenTK.Graphics.ES11.TextureTarget target, OpenTK.Graphics.ES11.GetTextureParameter pname, [CountAttribute(Computed = "pname")] int* @params) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Specify a two-dimensional texture subimage
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture of the active texture unit. Must be Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="xoffset">
        /// Specifies a texel offset in the x direction within the texture array.
        /// </param>
        /// <param name="yoffset">
        /// Specifies a texel offset in the y direction within the texture array.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture subimage.
        /// </param>
        /// <param name="height">
        /// Specifies the height of the texture subimage.
        /// </param>
        /// <param name="format">
        /// Specifies the format of the pixel data. The following symbolic values are accepted: Alpha, Rgb, Rgba, Luminance, and LuminanceAlpha.
        /// </param>
        /// <param name="type">
        /// Specifies the data type of the pixel data. The following symbolic values are accepted: UnsignedByte, UnsignedShort565, UnsignedShort4444, and UnsignedShort5551.
        /// </param>
        /// <param name="pixels">
        /// [length: COMPSIZE(format,type,width,height)]
        /// Specifies a pointer to the image data in memory.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glTexSubImage2D")]
        public static void TexSubImage2D(OpenTK.Graphics.ES11.All target, int level, int xoffset, int yoffset, int width, int height, OpenTK.Graphics.ES11.All format, OpenTK.Graphics.ES11.All type, [CountAttribute(Computed = "format,type,width,height")] IntPtr pixels) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Specify a two-dimensional texture subimage
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture of the active texture unit. Must be Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="xoffset">
        /// Specifies a texel offset in the x direction within the texture array.
        /// </param>
        /// <param name="yoffset">
        /// Specifies a texel offset in the y direction within the texture array.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture subimage.
        /// </param>
        /// <param name="height">
        /// Specifies the height of the texture subimage.
        /// </param>
        /// <param name="format">
        /// Specifies the format of the pixel data. The following symbolic values are accepted: Alpha, Rgb, Rgba, Luminance, and LuminanceAlpha.
        /// </param>
        /// <param name="type">
        /// Specifies the data type of the pixel data. The following symbolic values are accepted: UnsignedByte, UnsignedShort565, UnsignedShort4444, and UnsignedShort5551.
        /// </param>
        /// <param name="pixels">
        /// [length: COMPSIZE(format,type,width,height)]
        /// Specifies a pointer to the image data in memory.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glTexSubImage2D")]
        public static void TexSubImage2D<T8>(OpenTK.Graphics.ES11.All target, int level, int xoffset, int yoffset, int width, int height, OpenTK.Graphics.ES11.All format, OpenTK.Graphics.ES11.All type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type,width,height")] T8[] pixels)
            where T8 : struct
         { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Specify a two-dimensional texture subimage
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture of the active texture unit. Must be Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="xoffset">
        /// Specifies a texel offset in the x direction within the texture array.
        /// </param>
        /// <param name="yoffset">
        /// Specifies a texel offset in the y direction within the texture array.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture subimage.
        /// </param>
        /// <param name="height">
        /// Specifies the height of the texture subimage.
        /// </param>
        /// <param name="format">
        /// Specifies the format of the pixel data. The following symbolic values are accepted: Alpha, Rgb, Rgba, Luminance, and LuminanceAlpha.
        /// </param>
        /// <param name="type">
        /// Specifies the data type of the pixel data. The following symbolic values are accepted: UnsignedByte, UnsignedShort565, UnsignedShort4444, and UnsignedShort5551.
        /// </param>
        /// <param name="pixels">
        /// [length: COMPSIZE(format,type,width,height)]
        /// Specifies a pointer to the image data in memory.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glTexSubImage2D")]
        public static void TexSubImage2D<T8>(OpenTK.Graphics.ES11.All target, int level, int xoffset, int yoffset, int width, int height, OpenTK.Graphics.ES11.All format, OpenTK.Graphics.ES11.All type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type,width,height")] T8[,] pixels)
            where T8 : struct
         { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Specify a two-dimensional texture subimage
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture of the active texture unit. Must be Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="xoffset">
        /// Specifies a texel offset in the x direction within the texture array.
        /// </param>
        /// <param name="yoffset">
        /// Specifies a texel offset in the y direction within the texture array.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture subimage.
        /// </param>
        /// <param name="height">
        /// Specifies the height of the texture subimage.
        /// </param>
        /// <param name="format">
        /// Specifies the format of the pixel data. The following symbolic values are accepted: Alpha, Rgb, Rgba, Luminance, and LuminanceAlpha.
        /// </param>
        /// <param name="type">
        /// Specifies the data type of the pixel data. The following symbolic values are accepted: UnsignedByte, UnsignedShort565, UnsignedShort4444, and UnsignedShort5551.
        /// </param>
        /// <param name="pixels">
        /// [length: COMPSIZE(format,type,width,height)]
        /// Specifies a pointer to the image data in memory.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glTexSubImage2D")]
        public static void TexSubImage2D<T8>(OpenTK.Graphics.ES11.All target, int level, int xoffset, int yoffset, int width, int height, OpenTK.Graphics.ES11.All format, OpenTK.Graphics.ES11.All type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type,width,height")] T8[,,] pixels)
            where T8 : struct
         { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Specify a two-dimensional texture subimage
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture of the active texture unit. Must be Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="xoffset">
        /// Specifies a texel offset in the x direction within the texture array.
        /// </param>
        /// <param name="yoffset">
        /// Specifies a texel offset in the y direction within the texture array.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture subimage.
        /// </param>
        /// <param name="height">
        /// Specifies the height of the texture subimage.
        /// </param>
        /// <param name="format">
        /// Specifies the format of the pixel data. The following symbolic values are accepted: Alpha, Rgb, Rgba, Luminance, and LuminanceAlpha.
        /// </param>
        /// <param name="type">
        /// Specifies the data type of the pixel data. The following symbolic values are accepted: UnsignedByte, UnsignedShort565, UnsignedShort4444, and UnsignedShort5551.
        /// </param>
        /// <param name="pixels">
        /// [length: COMPSIZE(format,type,width,height)]
        /// Specifies a pointer to the image data in memory.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glTexSubImage2D")]
        public static void TexSubImage2D<T8>(OpenTK.Graphics.ES11.All target, int level, int xoffset, int yoffset, int width, int height, OpenTK.Graphics.ES11.All format, OpenTK.Graphics.ES11.All type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type,width,height")] ref T8 pixels)
            where T8 : struct
         { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Specify a two-dimensional texture subimage
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture of the active texture unit. Must be Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="xoffset">
        /// Specifies a texel offset in the x direction within the texture array.
        /// </param>
        /// <param name="yoffset">
        /// Specifies a texel offset in the y direction within the texture array.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture subimage.
        /// </param>
        /// <param name="height">
        /// Specifies the height of the texture subimage.
        /// </param>
        /// <param name="format">
        /// Specifies the format of the pixel data. The following symbolic values are accepted: Alpha, Rgb, Rgba, Luminance, and LuminanceAlpha.
        /// </param>
        /// <param name="type">
        /// Specifies the data type of the pixel data. The following symbolic values are accepted: UnsignedByte, UnsignedShort565, UnsignedShort4444, and UnsignedShort5551.
        /// </param>
        /// <param name="pixels">
        /// [length: COMPSIZE(format,type,width,height)]
        /// Specifies a pointer to the image data in memory.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glTexSubImage2D")]
        public static void TexSubImage2D(OpenTK.Graphics.ES11.TextureTarget target, int level, int xoffset, int yoffset, int width, int height, OpenTK.Graphics.ES11.PixelFormat format, OpenTK.Graphics.ES11.PixelType type, [CountAttribute(Computed = "format,type,width,height")] IntPtr pixels) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Specify a two-dimensional texture subimage
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture of the active texture unit. Must be Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="xoffset">
        /// Specifies a texel offset in the x direction within the texture array.
        /// </param>
        /// <param name="yoffset">
        /// Specifies a texel offset in the y direction within the texture array.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture subimage.
        /// </param>
        /// <param name="height">
        /// Specifies the height of the texture subimage.
        /// </param>
        /// <param name="format">
        /// Specifies the format of the pixel data. The following symbolic values are accepted: Alpha, Rgb, Rgba, Luminance, and LuminanceAlpha.
        /// </param>
        /// <param name="type">
        /// Specifies the data type of the pixel data. The following symbolic values are accepted: UnsignedByte, UnsignedShort565, UnsignedShort4444, and UnsignedShort5551.
        /// </param>
        /// <param name="pixels">
        /// [length: COMPSIZE(format,type,width,height)]
        /// Specifies a pointer to the image data in memory.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glTexSubImage2D")]
        public static void TexSubImage2D<T8>(OpenTK.Graphics.ES11.TextureTarget target, int level, int xoffset, int yoffset, int width, int height, OpenTK.Graphics.ES11.PixelFormat format, OpenTK.Graphics.ES11.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type,width,height")] T8[] pixels)
            where T8 : struct
         { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Specify a two-dimensional texture subimage
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture of the active texture unit. Must be Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="xoffset">
        /// Specifies a texel offset in the x direction within the texture array.
        /// </param>
        /// <param name="yoffset">
        /// Specifies a texel offset in the y direction within the texture array.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture subimage.
        /// </param>
        /// <param name="height">
        /// Specifies the height of the texture subimage.
        /// </param>
        /// <param name="format">
        /// Specifies the format of the pixel data. The following symbolic values are accepted: Alpha, Rgb, Rgba, Luminance, and LuminanceAlpha.
        /// </param>
        /// <param name="type">
        /// Specifies the data type of the pixel data. The following symbolic values are accepted: UnsignedByte, UnsignedShort565, UnsignedShort4444, and UnsignedShort5551.
        /// </param>
        /// <param name="pixels">
        /// [length: COMPSIZE(format,type,width,height)]
        /// Specifies a pointer to the image data in memory.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glTexSubImage2D")]
        public static void TexSubImage2D<T8>(OpenTK.Graphics.ES11.TextureTarget target, int level, int xoffset, int yoffset, int width, int height, OpenTK.Graphics.ES11.PixelFormat format, OpenTK.Graphics.ES11.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type,width,height")] T8[,] pixels)
            where T8 : struct
         { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Specify a two-dimensional texture subimage
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture of the active texture unit. Must be Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="xoffset">
        /// Specifies a texel offset in the x direction within the texture array.
        /// </param>
        /// <param name="yoffset">
        /// Specifies a texel offset in the y direction within the texture array.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture subimage.
        /// </param>
        /// <param name="height">
        /// Specifies the height of the texture subimage.
        /// </param>
        /// <param name="format">
        /// Specifies the format of the pixel data. The following symbolic values are accepted: Alpha, Rgb, Rgba, Luminance, and LuminanceAlpha.
        /// </param>
        /// <param name="type">
        /// Specifies the data type of the pixel data. The following symbolic values are accepted: UnsignedByte, UnsignedShort565, UnsignedShort4444, and UnsignedShort5551.
        /// </param>
        /// <param name="pixels">
        /// [length: COMPSIZE(format,type,width,height)]
        /// Specifies a pointer to the image data in memory.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glTexSubImage2D")]
        public static void TexSubImage2D<T8>(OpenTK.Graphics.ES11.TextureTarget target, int level, int xoffset, int yoffset, int width, int height, OpenTK.Graphics.ES11.PixelFormat format, OpenTK.Graphics.ES11.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type,width,height")] T8[,,] pixels)
            where T8 : struct
         { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Specify a two-dimensional texture subimage
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture of the active texture unit. Must be Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="xoffset">
        /// Specifies a texel offset in the x direction within the texture array.
        /// </param>
        /// <param name="yoffset">
        /// Specifies a texel offset in the y direction within the texture array.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture subimage.
        /// </param>
        /// <param name="height">
        /// Specifies the height of the texture subimage.
        /// </param>
        /// <param name="format">
        /// Specifies the format of the pixel data. The following symbolic values are accepted: Alpha, Rgb, Rgba, Luminance, and LuminanceAlpha.
        /// </param>
        /// <param name="type">
        /// Specifies the data type of the pixel data. The following symbolic values are accepted: UnsignedByte, UnsignedShort565, UnsignedShort4444, and UnsignedShort5551.
        /// </param>
        /// <param name="pixels">
        /// [length: COMPSIZE(format,type,width,height)]
        /// Specifies a pointer to the image data in memory.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glTexSubImage2D")]
        public static void TexSubImage2D<T8>(OpenTK.Graphics.ES11.TextureTarget target, int level, int xoffset, int yoffset, int width, int height, OpenTK.Graphics.ES11.PixelFormat format, OpenTK.Graphics.ES11.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type,width,height")] ref T8 pixels)
            where T8 : struct
         { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Multiply the current matrix by a translation matrix
        /// </summary>
        /// <param name="x">
        /// Specify the x, y, and z coordinates of a translation vector.
        /// </param>
        /// <param name="y">
        /// Specify the x, y, and z coordinates of a translation vector.
        /// </param>
        /// <param name="z">
        /// Specify the x, y, and z coordinates of a translation vector.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glTranslatef")]
        public static void Translate(float x, float y, float z) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="x">
        /// </param>
        /// <param name="y">
        /// </param>
        /// <param name="z">
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glTranslatex")]
        public static void Translatex(int x, int y, int z) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Define an array of vertex data
        /// </summary>
        /// <param name="size">
        /// Specifies the number of coordinates per vertex. Must be 2, 3, or 4. The initial value is 4.
        /// </param>
        /// <param name="type">
        /// Specifies the data type of each coordinate in the array. Symbolic constants Short, Int, Float, or Double are accepted. The initial value is Float.
        /// </param>
        /// <param name="stride">
        /// Specifies the byte offset between consecutive vertices. If stride is 0, the vertices are understood to be tightly packed in the array. The initial value is 0.
        /// </param>
        /// <param name="pointer">
        /// [length: COMPSIZE(size,type,stride)]
        /// Specifies a pointer to the first coordinate of the first vertex in the array. The initial value is 0.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glVertexPointer")]
        public static void VertexPointer(int size, OpenTK.Graphics.ES11.All type, int stride, [CountAttribute(Computed = "size,type,stride")] IntPtr pointer) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Define an array of vertex data
        /// </summary>
        /// <param name="size">
        /// Specifies the number of coordinates per vertex. Must be 2, 3, or 4. The initial value is 4.
        /// </param>
        /// <param name="type">
        /// Specifies the data type of each coordinate in the array. Symbolic constants Short, Int, Float, or Double are accepted. The initial value is Float.
        /// </param>
        /// <param name="stride">
        /// Specifies the byte offset between consecutive vertices. If stride is 0, the vertices are understood to be tightly packed in the array. The initial value is 0.
        /// </param>
        /// <param name="pointer">
        /// [length: COMPSIZE(size,type,stride)]
        /// Specifies a pointer to the first coordinate of the first vertex in the array. The initial value is 0.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glVertexPointer")]
        public static void VertexPointer<T3>(int size, OpenTK.Graphics.ES11.All type, int stride, [InAttribute, OutAttribute, CountAttribute(Computed = "size,type,stride")] T3[] pointer)
            where T3 : struct
         { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Define an array of vertex data
        /// </summary>
        /// <param name="size">
        /// Specifies the number of coordinates per vertex. Must be 2, 3, or 4. The initial value is 4.
        /// </param>
        /// <param name="type">
        /// Specifies the data type of each coordinate in the array. Symbolic constants Short, Int, Float, or Double are accepted. The initial value is Float.
        /// </param>
        /// <param name="stride">
        /// Specifies the byte offset between consecutive vertices. If stride is 0, the vertices are understood to be tightly packed in the array. The initial value is 0.
        /// </param>
        /// <param name="pointer">
        /// [length: COMPSIZE(size,type,stride)]
        /// Specifies a pointer to the first coordinate of the first vertex in the array. The initial value is 0.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glVertexPointer")]
        public static void VertexPointer<T3>(int size, OpenTK.Graphics.ES11.All type, int stride, [InAttribute, OutAttribute, CountAttribute(Computed = "size,type,stride")] T3[,] pointer)
            where T3 : struct
         { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Define an array of vertex data
        /// </summary>
        /// <param name="size">
        /// Specifies the number of coordinates per vertex. Must be 2, 3, or 4. The initial value is 4.
        /// </param>
        /// <param name="type">
        /// Specifies the data type of each coordinate in the array. Symbolic constants Short, Int, Float, or Double are accepted. The initial value is Float.
        /// </param>
        /// <param name="stride">
        /// Specifies the byte offset between consecutive vertices. If stride is 0, the vertices are understood to be tightly packed in the array. The initial value is 0.
        /// </param>
        /// <param name="pointer">
        /// [length: COMPSIZE(size,type,stride)]
        /// Specifies a pointer to the first coordinate of the first vertex in the array. The initial value is 0.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glVertexPointer")]
        public static void VertexPointer<T3>(int size, OpenTK.Graphics.ES11.All type, int stride, [InAttribute, OutAttribute, CountAttribute(Computed = "size,type,stride")] T3[,,] pointer)
            where T3 : struct
         { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Define an array of vertex data
        /// </summary>
        /// <param name="size">
        /// Specifies the number of coordinates per vertex. Must be 2, 3, or 4. The initial value is 4.
        /// </param>
        /// <param name="type">
        /// Specifies the data type of each coordinate in the array. Symbolic constants Short, Int, Float, or Double are accepted. The initial value is Float.
        /// </param>
        /// <param name="stride">
        /// Specifies the byte offset between consecutive vertices. If stride is 0, the vertices are understood to be tightly packed in the array. The initial value is 0.
        /// </param>
        /// <param name="pointer">
        /// [length: COMPSIZE(size,type,stride)]
        /// Specifies a pointer to the first coordinate of the first vertex in the array. The initial value is 0.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glVertexPointer")]
        public static void VertexPointer<T3>(int size, OpenTK.Graphics.ES11.All type, int stride, [InAttribute, OutAttribute, CountAttribute(Computed = "size,type,stride")] ref T3 pointer)
            where T3 : struct
         { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Define an array of vertex data
        /// </summary>
        /// <param name="size">
        /// Specifies the number of coordinates per vertex. Must be 2, 3, or 4. The initial value is 4.
        /// </param>
        /// <param name="type">
        /// Specifies the data type of each coordinate in the array. Symbolic constants Short, Int, Float, or Double are accepted. The initial value is Float.
        /// </param>
        /// <param name="stride">
        /// Specifies the byte offset between consecutive vertices. If stride is 0, the vertices are understood to be tightly packed in the array. The initial value is 0.
        /// </param>
        /// <param name="pointer">
        /// [length: COMPSIZE(size,type,stride)]
        /// Specifies a pointer to the first coordinate of the first vertex in the array. The initial value is 0.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glVertexPointer")]
        public static void VertexPointer(int size, OpenTK.Graphics.ES11.VertexPointerType type, int stride, [CountAttribute(Computed = "size,type,stride")] IntPtr pointer) { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Define an array of vertex data
        /// </summary>
        /// <param name="size">
        /// Specifies the number of coordinates per vertex. Must be 2, 3, or 4. The initial value is 4.
        /// </param>
        /// <param name="type">
        /// Specifies the data type of each coordinate in the array. Symbolic constants Short, Int, Float, or Double are accepted. The initial value is Float.
        /// </param>
        /// <param name="stride">
        /// Specifies the byte offset between consecutive vertices. If stride is 0, the vertices are understood to be tightly packed in the array. The initial value is 0.
        /// </param>
        /// <param name="pointer">
        /// [length: COMPSIZE(size,type,stride)]
        /// Specifies a pointer to the first coordinate of the first vertex in the array. The initial value is 0.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glVertexPointer")]
        public static void VertexPointer<T3>(int size, OpenTK.Graphics.ES11.VertexPointerType type, int stride, [InAttribute, OutAttribute, CountAttribute(Computed = "size,type,stride")] T3[] pointer)
            where T3 : struct
         { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Define an array of vertex data
        /// </summary>
        /// <param name="size">
        /// Specifies the number of coordinates per vertex. Must be 2, 3, or 4. The initial value is 4.
        /// </param>
        /// <param name="type">
        /// Specifies the data type of each coordinate in the array. Symbolic constants Short, Int, Float, or Double are accepted. The initial value is Float.
        /// </param>
        /// <param name="stride">
        /// Specifies the byte offset between consecutive vertices. If stride is 0, the vertices are understood to be tightly packed in the array. The initial value is 0.
        /// </param>
        /// <param name="pointer">
        /// [length: COMPSIZE(size,type,stride)]
        /// Specifies a pointer to the first coordinate of the first vertex in the array. The initial value is 0.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glVertexPointer")]
        public static void VertexPointer<T3>(int size, OpenTK.Graphics.ES11.VertexPointerType type, int stride, [InAttribute, OutAttribute, CountAttribute(Computed = "size,type,stride")] T3[,] pointer)
            where T3 : struct
         { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Define an array of vertex data
        /// </summary>
        /// <param name="size">
        /// Specifies the number of coordinates per vertex. Must be 2, 3, or 4. The initial value is 4.
        /// </param>
        /// <param name="type">
        /// Specifies the data type of each coordinate in the array. Symbolic constants Short, Int, Float, or Double are accepted. The initial value is Float.
        /// </param>
        /// <param name="stride">
        /// Specifies the byte offset between consecutive vertices. If stride is 0, the vertices are understood to be tightly packed in the array. The initial value is 0.
        /// </param>
        /// <param name="pointer">
        /// [length: COMPSIZE(size,type,stride)]
        /// Specifies a pointer to the first coordinate of the first vertex in the array. The initial value is 0.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glVertexPointer")]
        public static void VertexPointer<T3>(int size, OpenTK.Graphics.ES11.VertexPointerType type, int stride, [InAttribute, OutAttribute, CountAttribute(Computed = "size,type,stride")] T3[,,] pointer)
            where T3 : struct
         { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Define an array of vertex data
        /// </summary>
        /// <param name="size">
        /// Specifies the number of coordinates per vertex. Must be 2, 3, or 4. The initial value is 4.
        /// </param>
        /// <param name="type">
        /// Specifies the data type of each coordinate in the array. Symbolic constants Short, Int, Float, or Double are accepted. The initial value is Float.
        /// </param>
        /// <param name="stride">
        /// Specifies the byte offset between consecutive vertices. If stride is 0, the vertices are understood to be tightly packed in the array. The initial value is 0.
        /// </param>
        /// <param name="pointer">
        /// [length: COMPSIZE(size,type,stride)]
        /// Specifies a pointer to the first coordinate of the first vertex in the array. The initial value is 0.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glVertexPointer")]
        public static void VertexPointer<T3>(int size, OpenTK.Graphics.ES11.VertexPointerType type, int stride, [InAttribute, OutAttribute, CountAttribute(Computed = "size,type,stride")] ref T3 pointer)
            where T3 : struct
         { throw new BindingsNotRewrittenException(); }

        /// <summary>
        /// [requires: v1.0]
        /// Set the viewport
        /// </summary>
        /// <param name="x">
        /// Specify the lower left corner of the viewport rectangle, in pixels. The initial value is (0,0).
        /// </param>
        /// <param name="y">
        /// Specify the lower left corner of the viewport rectangle, in pixels. The initial value is (0,0).
        /// </param>
        /// <param name="width">
        /// Specify the width and height of the viewport. When a GL context is first attached to a window, width and height are set to the dimensions of that window.
        /// </param>
        /// <param name="height">
        /// Specify the width and height of the viewport. When a GL context is first attached to a window, width and height are set to the dimensions of that window.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glViewport")]
        public static void Viewport(int x, int y, int width, int height) { throw new BindingsNotRewrittenException(); }

        public static partial class Ext
        {
            /// <summary>
            /// [requires: EXT_blend_minmax]
            /// Specify the equation used for both the RGB blend equation and the Alpha blend equation
            /// </summary>
            /// <param name="mode">
            /// specifies how source and destination colors are combined. It must be FuncAdd, FuncSubtract, or FuncReverseSubtract.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_blend_minmax", Version = "", EntryPoint = "glBlendEquationEXT")]
            public static void BlendEquation(OpenTK.Graphics.ES11.All mode) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: EXT_blend_minmax]
            /// Specify the equation used for both the RGB blend equation and the Alpha blend equation
            /// </summary>
            /// <param name="mode">
            /// specifies how source and destination colors are combined. It must be FuncAdd, FuncSubtract, or FuncReverseSubtract.
            /// </param>
            [AutoGenerated(Category = "EXT_blend_minmax", Version = "", EntryPoint = "glBlendEquationEXT")]
            public static void BlendEquation(OpenTK.Graphics.ES11.BlendEquationModeExt mode) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: EXT_discard_framebuffer]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="numAttachments">
            /// </param>
            /// <param name="attachments">
            /// [length: numAttachments]
            /// </param>
            [AutoGenerated(Category = "EXT_discard_framebuffer", Version = "", EntryPoint = "glDiscardFramebufferEXT")]
            public static void DiscardFramebuffer(OpenTK.Graphics.ES11.All target, int numAttachments, [CountAttribute(Parameter = "numAttachments")] OpenTK.Graphics.ES11.All[] attachments) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: EXT_discard_framebuffer]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="numAttachments">
            /// </param>
            /// <param name="attachments">
            /// [length: numAttachments]
            /// </param>
            [AutoGenerated(Category = "EXT_discard_framebuffer", Version = "", EntryPoint = "glDiscardFramebufferEXT")]
            public static void DiscardFramebuffer(OpenTK.Graphics.ES11.All target, int numAttachments, [CountAttribute(Parameter = "numAttachments")] ref OpenTK.Graphics.ES11.All attachments) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: EXT_discard_framebuffer]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="numAttachments">
            /// </param>
            /// <param name="attachments">
            /// [length: numAttachments]
            /// </param>
            [AutoGenerated(Category = "EXT_discard_framebuffer", Version = "", EntryPoint = "glDiscardFramebufferEXT")]
            public static unsafe void DiscardFramebuffer(OpenTK.Graphics.ES11.All target, int numAttachments, [CountAttribute(Parameter = "numAttachments")] OpenTK.Graphics.ES11.All* attachments) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: EXT_map_buffer_range]
            /// Indicate modifications to a range of a mapped buffer
            /// </summary>
            /// <param name="target">
            /// Specifies the target of the flush operation. target must be ArrayBuffer, CopyReadBuffer, CopyWriteBuffer, DispatchIndirectBuffer, DrawIndirectBuffer, ElementArrayBuffer, PixelPackBuffer, PixelUnpackBuffer, QueryBuffer, ShaderStorageBuffer, TextureBuffer, TransformFeedbackBuffer, or UniformBuffer.
            /// </param>
            /// <param name="offset">
            /// Specifies the start of the buffer subrange, in basic machine units.
            /// </param>
            /// <param name="length">
            /// Specifies the length of the buffer subrange, in basic machine units.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_map_buffer_range", Version = "", EntryPoint = "glFlushMappedBufferRangeEXT")]
            public static void FlushMappedBufferRange(OpenTK.Graphics.ES11.All target, IntPtr offset, int length) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: EXT_map_buffer_range]
            /// Indicate modifications to a range of a mapped buffer
            /// </summary>
            /// <param name="target">
            /// Specifies the target of the flush operation. target must be ArrayBuffer, CopyReadBuffer, CopyWriteBuffer, DispatchIndirectBuffer, DrawIndirectBuffer, ElementArrayBuffer, PixelPackBuffer, PixelUnpackBuffer, QueryBuffer, ShaderStorageBuffer, TextureBuffer, TransformFeedbackBuffer, or UniformBuffer.
            /// </param>
            /// <param name="offset">
            /// Specifies the start of the buffer subrange, in basic machine units.
            /// </param>
            /// <param name="length">
            /// Specifies the length of the buffer subrange, in basic machine units.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_map_buffer_range", Version = "", EntryPoint = "glFlushMappedBufferRangeEXT")]
            public static void FlushMappedBufferRange(OpenTK.Graphics.ES11.All target, IntPtr offset, IntPtr length) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: EXT_map_buffer_range]
            /// Indicate modifications to a range of a mapped buffer
            /// </summary>
            /// <param name="target">
            /// Specifies the target of the flush operation. target must be ArrayBuffer, CopyReadBuffer, CopyWriteBuffer, DispatchIndirectBuffer, DrawIndirectBuffer, ElementArrayBuffer, PixelPackBuffer, PixelUnpackBuffer, QueryBuffer, ShaderStorageBuffer, TextureBuffer, TransformFeedbackBuffer, or UniformBuffer.
            /// </param>
            /// <param name="offset">
            /// Specifies the start of the buffer subrange, in basic machine units.
            /// </param>
            /// <param name="length">
            /// Specifies the length of the buffer subrange, in basic machine units.
            /// </param>
            [AutoGenerated(Category = "EXT_map_buffer_range", Version = "", EntryPoint = "glFlushMappedBufferRangeEXT")]
            public static void FlushMappedBufferRange(OpenTK.Graphics.ES11.BufferTargetArb target, IntPtr offset, int length) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: EXT_map_buffer_range]
            /// Indicate modifications to a range of a mapped buffer
            /// </summary>
            /// <param name="target">
            /// Specifies the target of the flush operation. target must be ArrayBuffer, CopyReadBuffer, CopyWriteBuffer, DispatchIndirectBuffer, DrawIndirectBuffer, ElementArrayBuffer, PixelPackBuffer, PixelUnpackBuffer, QueryBuffer, ShaderStorageBuffer, TextureBuffer, TransformFeedbackBuffer, or UniformBuffer.
            /// </param>
            /// <param name="offset">
            /// Specifies the start of the buffer subrange, in basic machine units.
            /// </param>
            /// <param name="length">
            /// Specifies the length of the buffer subrange, in basic machine units.
            /// </param>
            [AutoGenerated(Category = "EXT_map_buffer_range", Version = "", EntryPoint = "glFlushMappedBufferRangeEXT")]
            public static void FlushMappedBufferRange(OpenTK.Graphics.ES11.BufferTargetArb target, IntPtr offset, IntPtr length) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: EXT_multisampled_render_to_texture]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="attachment">
            /// </param>
            /// <param name="textarget">
            /// </param>
            /// <param name="texture">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="samples">
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_multisampled_render_to_texture", Version = "", EntryPoint = "glFramebufferTexture2DMultisampleEXT")]
            public static void FramebufferTexture2DMultisample(OpenTK.Graphics.ES11.All target, OpenTK.Graphics.ES11.All attachment, OpenTK.Graphics.ES11.All textarget, int texture, int level, int samples) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: EXT_multisampled_render_to_texture]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="attachment">
            /// </param>
            /// <param name="textarget">
            /// </param>
            /// <param name="texture">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="samples">
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_multisampled_render_to_texture", Version = "", EntryPoint = "glFramebufferTexture2DMultisampleEXT")]
            public static void FramebufferTexture2DMultisample(OpenTK.Graphics.ES11.All target, OpenTK.Graphics.ES11.All attachment, OpenTK.Graphics.ES11.All textarget, uint texture, int level, int samples) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: EXT_multisampled_render_to_texture]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="attachment">
            /// </param>
            /// <param name="textarget">
            /// </param>
            /// <param name="texture">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="samples">
            /// </param>
            [AutoGenerated(Category = "EXT_multisampled_render_to_texture", Version = "", EntryPoint = "glFramebufferTexture2DMultisampleEXT")]
            public static void FramebufferTexture2DMultisample(OpenTK.Graphics.ES11.FramebufferTarget target, OpenTK.Graphics.ES11.FramebufferAttachment attachment, OpenTK.Graphics.ES11.TextureTarget textarget, int texture, int level, int samples) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: EXT_multisampled_render_to_texture]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="attachment">
            /// </param>
            /// <param name="textarget">
            /// </param>
            /// <param name="texture">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="samples">
            /// </param>
            [AutoGenerated(Category = "EXT_multisampled_render_to_texture", Version = "", EntryPoint = "glFramebufferTexture2DMultisampleEXT")]
            public static void FramebufferTexture2DMultisample(OpenTK.Graphics.ES11.FramebufferTarget target, OpenTK.Graphics.ES11.FramebufferAttachment attachment, OpenTK.Graphics.ES11.TextureTarget textarget, uint texture, int level, int samples) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: EXT_robustness]
            /// </summary>
            [AutoGenerated(Category = "EXT_robustness", Version = "", EntryPoint = "glGetGraphicsResetStatusEXT")]
            public static OpenTK.Graphics.ES11.GraphicsResetStatus GetGraphicsResetStatus() { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: EXT_robustness]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="location">
            /// </param>
            /// <param name="bufSize">
            /// </param>
            /// <param name="@params">
            /// [length: bufSize]
            /// </param>
            [AutoGenerated(Category = "EXT_robustness", Version = "", EntryPoint = "glGetnUniformfvEXT")]
            public static void GetnUniform(int program, int location, int bufSize, [OutAttribute, CountAttribute(Parameter = "bufSize")] float[] @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: EXT_robustness]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="location">
            /// </param>
            /// <param name="bufSize">
            /// </param>
            /// <param name="@params">
            /// [length: bufSize]
            /// </param>
            [AutoGenerated(Category = "EXT_robustness", Version = "", EntryPoint = "glGetnUniformfvEXT")]
            public static void GetnUniform(int program, int location, int bufSize, [OutAttribute, CountAttribute(Parameter = "bufSize")] out float @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: EXT_robustness]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="location">
            /// </param>
            /// <param name="bufSize">
            /// </param>
            /// <param name="@params">
            /// [length: bufSize]
            /// </param>
            [AutoGenerated(Category = "EXT_robustness", Version = "", EntryPoint = "glGetnUniformfvEXT")]
            public static unsafe void GetnUniform(int program, int location, int bufSize, [OutAttribute, CountAttribute(Parameter = "bufSize")] float* @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: EXT_robustness]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="location">
            /// </param>
            /// <param name="bufSize">
            /// </param>
            /// <param name="@params">
            /// [length: bufSize]
            /// </param>
            [AutoGenerated(Category = "EXT_robustness", Version = "", EntryPoint = "glGetnUniformfvEXT")]
            public static void GetnUniform(uint program, int location, int bufSize, [OutAttribute, CountAttribute(Parameter = "bufSize")] float[] @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: EXT_robustness]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="location">
            /// </param>
            /// <param name="bufSize">
            /// </param>
            /// <param name="@params">
            /// [length: bufSize]
            /// </param>
            [AutoGenerated(Category = "EXT_robustness", Version = "", EntryPoint = "glGetnUniformfvEXT")]
            public static void GetnUniform(uint program, int location, int bufSize, [OutAttribute, CountAttribute(Parameter = "bufSize")] out float @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: EXT_robustness]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="location">
            /// </param>
            /// <param name="bufSize">
            /// </param>
            /// <param name="@params">
            /// [length: bufSize]
            /// </param>
            [AutoGenerated(Category = "EXT_robustness", Version = "", EntryPoint = "glGetnUniformfvEXT")]
            public static unsafe void GetnUniform(uint program, int location, int bufSize, [OutAttribute, CountAttribute(Parameter = "bufSize")] float* @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: EXT_robustness]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="location">
            /// </param>
            /// <param name="bufSize">
            /// </param>
            /// <param name="@params">
            /// [length: bufSize]
            /// </param>
            [AutoGenerated(Category = "EXT_robustness", Version = "", EntryPoint = "glGetnUniformivEXT")]
            public static void GetnUniform(int program, int location, int bufSize, [OutAttribute, CountAttribute(Parameter = "bufSize")] int[] @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: EXT_robustness]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="location">
            /// </param>
            /// <param name="bufSize">
            /// </param>
            /// <param name="@params">
            /// [length: bufSize]
            /// </param>
            [AutoGenerated(Category = "EXT_robustness", Version = "", EntryPoint = "glGetnUniformivEXT")]
            public static void GetnUniform(int program, int location, int bufSize, [OutAttribute, CountAttribute(Parameter = "bufSize")] out int @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: EXT_robustness]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="location">
            /// </param>
            /// <param name="bufSize">
            /// </param>
            /// <param name="@params">
            /// [length: bufSize]
            /// </param>
            [AutoGenerated(Category = "EXT_robustness", Version = "", EntryPoint = "glGetnUniformivEXT")]
            public static unsafe void GetnUniform(int program, int location, int bufSize, [OutAttribute, CountAttribute(Parameter = "bufSize")] int* @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: EXT_robustness]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="location">
            /// </param>
            /// <param name="bufSize">
            /// </param>
            /// <param name="@params">
            /// [length: bufSize]
            /// </param>
            [AutoGenerated(Category = "EXT_robustness", Version = "", EntryPoint = "glGetnUniformivEXT")]
            public static void GetnUniform(uint program, int location, int bufSize, [OutAttribute, CountAttribute(Parameter = "bufSize")] int[] @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: EXT_robustness]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="location">
            /// </param>
            /// <param name="bufSize">
            /// </param>
            /// <param name="@params">
            /// [length: bufSize]
            /// </param>
            [AutoGenerated(Category = "EXT_robustness", Version = "", EntryPoint = "glGetnUniformivEXT")]
            public static void GetnUniform(uint program, int location, int bufSize, [OutAttribute, CountAttribute(Parameter = "bufSize")] out int @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: EXT_robustness]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="location">
            /// </param>
            /// <param name="bufSize">
            /// </param>
            /// <param name="@params">
            /// [length: bufSize]
            /// </param>
            [AutoGenerated(Category = "EXT_robustness", Version = "", EntryPoint = "glGetnUniformivEXT")]
            public static unsafe void GetnUniform(uint program, int location, int bufSize, [OutAttribute, CountAttribute(Parameter = "bufSize")] int* @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: EXT_debug_marker]
            /// </summary>
            /// <param name="length">
            /// </param>
            /// <param name="marker">
            /// </param>
            [AutoGenerated(Category = "EXT_debug_marker", Version = "", EntryPoint = "glInsertEventMarkerEXT")]
            public static void InsertEventMarker(int length, String marker) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: EXT_map_buffer_range]
            /// Map a section of a buffer object's data store
            /// </summary>
            /// <param name="target">
            /// Specifies a binding to which the target buffer is bound.
            /// </param>
            /// <param name="offset">
            /// Specifies a the starting offset within the buffer of the range to be mapped.
            /// </param>
            /// <param name="length">
            /// Specifies a length of the range to be mapped.
            /// </param>
            /// <param name="access">
            /// Specifies a combination of access flags indicating the desired access to the range.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_map_buffer_range", Version = "", EntryPoint = "glMapBufferRangeEXT")]
            public static IntPtr MapBufferRange(OpenTK.Graphics.ES11.All target, IntPtr offset, int length, OpenTK.Graphics.ES11.All access) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: EXT_map_buffer_range]
            /// Map a section of a buffer object's data store
            /// </summary>
            /// <param name="target">
            /// Specifies a binding to which the target buffer is bound.
            /// </param>
            /// <param name="offset">
            /// Specifies a the starting offset within the buffer of the range to be mapped.
            /// </param>
            /// <param name="length">
            /// Specifies a length of the range to be mapped.
            /// </param>
            /// <param name="access">
            /// Specifies a combination of access flags indicating the desired access to the range.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_map_buffer_range", Version = "", EntryPoint = "glMapBufferRangeEXT")]
            public static IntPtr MapBufferRange(OpenTK.Graphics.ES11.All target, IntPtr offset, IntPtr length, OpenTK.Graphics.ES11.All access) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: EXT_map_buffer_range]
            /// Map a section of a buffer object's data store
            /// </summary>
            /// <param name="target">
            /// Specifies a binding to which the target buffer is bound.
            /// </param>
            /// <param name="offset">
            /// Specifies a the starting offset within the buffer of the range to be mapped.
            /// </param>
            /// <param name="length">
            /// Specifies a length of the range to be mapped.
            /// </param>
            /// <param name="access">
            /// Specifies a combination of access flags indicating the desired access to the range.
            /// </param>
            [AutoGenerated(Category = "EXT_map_buffer_range", Version = "", EntryPoint = "glMapBufferRangeEXT")]
            public static IntPtr MapBufferRange(OpenTK.Graphics.ES11.BufferTargetArb target, IntPtr offset, int length, OpenTK.Graphics.ES11.BufferAccessMask access) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: EXT_map_buffer_range]
            /// Map a section of a buffer object's data store
            /// </summary>
            /// <param name="target">
            /// Specifies a binding to which the target buffer is bound.
            /// </param>
            /// <param name="offset">
            /// Specifies a the starting offset within the buffer of the range to be mapped.
            /// </param>
            /// <param name="length">
            /// Specifies a length of the range to be mapped.
            /// </param>
            /// <param name="access">
            /// Specifies a combination of access flags indicating the desired access to the range.
            /// </param>
            [AutoGenerated(Category = "EXT_map_buffer_range", Version = "", EntryPoint = "glMapBufferRangeEXT")]
            public static IntPtr MapBufferRange(OpenTK.Graphics.ES11.BufferTargetArb target, IntPtr offset, IntPtr length, OpenTK.Graphics.ES11.BufferAccessMask access) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: EXT_multi_draw_arrays]
            /// Render multiple sets of primitives from array data
            /// </summary>
            /// <param name="mode">
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
            /// </param>
            /// <param name="first">
            /// [length: COMPSIZE(primcount)]
            /// Points to an array of starting indices in the enabled arrays.
            /// </param>
            /// <param name="count">
            /// [length: COMPSIZE(primcount)]
            /// Points to an array of the number of indices to be rendered.
            /// </param>
            /// <param name="primcount">
            /// Specifies the size of the first and count
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_multi_draw_arrays", Version = "", EntryPoint = "glMultiDrawArraysEXT")]
            public static void MultiDrawArrays(OpenTK.Graphics.ES11.All mode, [CountAttribute(Computed = "primcount")] int[] first, [CountAttribute(Computed = "primcount")] int[] count, int primcount) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: EXT_multi_draw_arrays]
            /// Render multiple sets of primitives from array data
            /// </summary>
            /// <param name="mode">
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
            /// </param>
            /// <param name="first">
            /// [length: COMPSIZE(primcount)]
            /// Points to an array of starting indices in the enabled arrays.
            /// </param>
            /// <param name="count">
            /// [length: COMPSIZE(primcount)]
            /// Points to an array of the number of indices to be rendered.
            /// </param>
            /// <param name="primcount">
            /// Specifies the size of the first and count
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_multi_draw_arrays", Version = "", EntryPoint = "glMultiDrawArraysEXT")]
            public static void MultiDrawArrays(OpenTK.Graphics.ES11.All mode, [CountAttribute(Computed = "primcount")] ref int first, [CountAttribute(Computed = "primcount")] ref int count, int primcount) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: EXT_multi_draw_arrays]
            /// Render multiple sets of primitives from array data
            /// </summary>
            /// <param name="mode">
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
            /// </param>
            /// <param name="first">
            /// [length: COMPSIZE(primcount)]
            /// Points to an array of starting indices in the enabled arrays.
            /// </param>
            /// <param name="count">
            /// [length: COMPSIZE(primcount)]
            /// Points to an array of the number of indices to be rendered.
            /// </param>
            /// <param name="primcount">
            /// Specifies the size of the first and count
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_multi_draw_arrays", Version = "", EntryPoint = "glMultiDrawArraysEXT")]
            public static unsafe void MultiDrawArrays(OpenTK.Graphics.ES11.All mode, [CountAttribute(Computed = "primcount")] int* first, [CountAttribute(Computed = "primcount")] int* count, int primcount) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: EXT_multi_draw_arrays]
            /// Render multiple sets of primitives from array data
            /// </summary>
            /// <param name="mode">
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
            /// </param>
            /// <param name="first">
            /// [length: COMPSIZE(primcount)]
            /// Points to an array of starting indices in the enabled arrays.
            /// </param>
            /// <param name="count">
            /// [length: COMPSIZE(primcount)]
            /// Points to an array of the number of indices to be rendered.
            /// </param>
            /// <param name="primcount">
            /// Specifies the size of the first and count
            /// </param>
            [AutoGenerated(Category = "EXT_multi_draw_arrays", Version = "", EntryPoint = "glMultiDrawArraysEXT")]
            public static void MultiDrawArrays(OpenTK.Graphics.ES11.PrimitiveType mode, [CountAttribute(Computed = "primcount")] int[] first, [CountAttribute(Computed = "primcount")] int[] count, int primcount) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: EXT_multi_draw_arrays]
            /// Render multiple sets of primitives from array data
            /// </summary>
            /// <param name="mode">
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
            /// </param>
            /// <param name="first">
            /// [length: COMPSIZE(primcount)]
            /// Points to an array of starting indices in the enabled arrays.
            /// </param>
            /// <param name="count">
            /// [length: COMPSIZE(primcount)]
            /// Points to an array of the number of indices to be rendered.
            /// </param>
            /// <param name="primcount">
            /// Specifies the size of the first and count
            /// </param>
            [AutoGenerated(Category = "EXT_multi_draw_arrays", Version = "", EntryPoint = "glMultiDrawArraysEXT")]
            public static void MultiDrawArrays(OpenTK.Graphics.ES11.PrimitiveType mode, [CountAttribute(Computed = "primcount")] ref int first, [CountAttribute(Computed = "primcount")] ref int count, int primcount) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: EXT_multi_draw_arrays]
            /// Render multiple sets of primitives from array data
            /// </summary>
            /// <param name="mode">
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
            /// </param>
            /// <param name="first">
            /// [length: COMPSIZE(primcount)]
            /// Points to an array of starting indices in the enabled arrays.
            /// </param>
            /// <param name="count">
            /// [length: COMPSIZE(primcount)]
            /// Points to an array of the number of indices to be rendered.
            /// </param>
            /// <param name="primcount">
            /// Specifies the size of the first and count
            /// </param>
            [AutoGenerated(Category = "EXT_multi_draw_arrays", Version = "", EntryPoint = "glMultiDrawArraysEXT")]
            public static unsafe void MultiDrawArrays(OpenTK.Graphics.ES11.PrimitiveType mode, [CountAttribute(Computed = "primcount")] int* first, [CountAttribute(Computed = "primcount")] int* count, int primcount) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: EXT_multi_draw_arrays]
            /// Render multiple sets of primitives by specifying indices of array data elements
            /// </summary>
            /// <param name="mode">
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
            /// </param>
            /// <param name="count">
            /// [length: COMPSIZE(primcount)]
            /// Points to an array of the elements counts.
            /// </param>
            /// <param name="type">
            /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
            /// </param>
            /// <param name="indices">
            /// [length: COMPSIZE(primcount)]
            /// Specifies a pointer to the location where the indices are stored.
            /// </param>
            /// <param name="primcount">
            /// Specifies the size of the count and indices arrays.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_multi_draw_arrays", Version = "", EntryPoint = "glMultiDrawElementsEXT")]
            public static void MultiDrawElements(OpenTK.Graphics.ES11.All mode, [CountAttribute(Computed = "primcount")] int[] count, OpenTK.Graphics.ES11.All type, [CountAttribute(Computed = "primcount")] IntPtr indices, int primcount) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: EXT_multi_draw_arrays]
            /// Render multiple sets of primitives by specifying indices of array data elements
            /// </summary>
            /// <param name="mode">
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
            /// </param>
            /// <param name="count">
            /// [length: COMPSIZE(primcount)]
            /// Points to an array of the elements counts.
            /// </param>
            /// <param name="type">
            /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
            /// </param>
            /// <param name="indices">
            /// [length: COMPSIZE(primcount)]
            /// Specifies a pointer to the location where the indices are stored.
            /// </param>
            /// <param name="primcount">
            /// Specifies the size of the count and indices arrays.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_multi_draw_arrays", Version = "", EntryPoint = "glMultiDrawElementsEXT")]
            public static void MultiDrawElements<T3>(OpenTK.Graphics.ES11.All mode, [CountAttribute(Computed = "primcount")] int[] count, OpenTK.Graphics.ES11.All type, [InAttribute, OutAttribute, CountAttribute(Computed = "primcount")] T3[] indices, int primcount)
                where T3 : struct
             { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: EXT_multi_draw_arrays]
            /// Render multiple sets of primitives by specifying indices of array data elements
            /// </summary>
            /// <param name="mode">
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
            /// </param>
            /// <param name="count">
            /// [length: COMPSIZE(primcount)]
            /// Points to an array of the elements counts.
            /// </param>
            /// <param name="type">
            /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
            /// </param>
            /// <param name="indices">
            /// [length: COMPSIZE(primcount)]
            /// Specifies a pointer to the location where the indices are stored.
            /// </param>
            /// <param name="primcount">
            /// Specifies the size of the count and indices arrays.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_multi_draw_arrays", Version = "", EntryPoint = "glMultiDrawElementsEXT")]
            public static void MultiDrawElements<T3>(OpenTK.Graphics.ES11.All mode, [CountAttribute(Computed = "primcount")] int[] count, OpenTK.Graphics.ES11.All type, [InAttribute, OutAttribute, CountAttribute(Computed = "primcount")] T3[,] indices, int primcount)
                where T3 : struct
             { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: EXT_multi_draw_arrays]
            /// Render multiple sets of primitives by specifying indices of array data elements
            /// </summary>
            /// <param name="mode">
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
            /// </param>
            /// <param name="count">
            /// [length: COMPSIZE(primcount)]
            /// Points to an array of the elements counts.
            /// </param>
            /// <param name="type">
            /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
            /// </param>
            /// <param name="indices">
            /// [length: COMPSIZE(primcount)]
            /// Specifies a pointer to the location where the indices are stored.
            /// </param>
            /// <param name="primcount">
            /// Specifies the size of the count and indices arrays.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_multi_draw_arrays", Version = "", EntryPoint = "glMultiDrawElementsEXT")]
            public static void MultiDrawElements<T3>(OpenTK.Graphics.ES11.All mode, [CountAttribute(Computed = "primcount")] int[] count, OpenTK.Graphics.ES11.All type, [InAttribute, OutAttribute, CountAttribute(Computed = "primcount")] T3[,,] indices, int primcount)
                where T3 : struct
             { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: EXT_multi_draw_arrays]
            /// Render multiple sets of primitives by specifying indices of array data elements
            /// </summary>
            /// <param name="mode">
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
            /// </param>
            /// <param name="count">
            /// [length: COMPSIZE(primcount)]
            /// Points to an array of the elements counts.
            /// </param>
            /// <param name="type">
            /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
            /// </param>
            /// <param name="indices">
            /// [length: COMPSIZE(primcount)]
            /// Specifies a pointer to the location where the indices are stored.
            /// </param>
            /// <param name="primcount">
            /// Specifies the size of the count and indices arrays.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_multi_draw_arrays", Version = "", EntryPoint = "glMultiDrawElementsEXT")]
            public static void MultiDrawElements<T3>(OpenTK.Graphics.ES11.All mode, [CountAttribute(Computed = "primcount")] int[] count, OpenTK.Graphics.ES11.All type, [InAttribute, OutAttribute, CountAttribute(Computed = "primcount")] ref T3 indices, int primcount)
                where T3 : struct
             { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: EXT_multi_draw_arrays]
            /// Render multiple sets of primitives by specifying indices of array data elements
            /// </summary>
            /// <param name="mode">
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
            /// </param>
            /// <param name="count">
            /// [length: COMPSIZE(primcount)]
            /// Points to an array of the elements counts.
            /// </param>
            /// <param name="type">
            /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
            /// </param>
            /// <param name="indices">
            /// [length: COMPSIZE(primcount)]
            /// Specifies a pointer to the location where the indices are stored.
            /// </param>
            /// <param name="primcount">
            /// Specifies the size of the count and indices arrays.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_multi_draw_arrays", Version = "", EntryPoint = "glMultiDrawElementsEXT")]
            public static void MultiDrawElements(OpenTK.Graphics.ES11.All mode, [CountAttribute(Computed = "primcount")] ref int count, OpenTK.Graphics.ES11.All type, [CountAttribute(Computed = "primcount")] IntPtr indices, int primcount) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: EXT_multi_draw_arrays]
            /// Render multiple sets of primitives by specifying indices of array data elements
            /// </summary>
            /// <param name="mode">
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
            /// </param>
            /// <param name="count">
            /// [length: COMPSIZE(primcount)]
            /// Points to an array of the elements counts.
            /// </param>
            /// <param name="type">
            /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
            /// </param>
            /// <param name="indices">
            /// [length: COMPSIZE(primcount)]
            /// Specifies a pointer to the location where the indices are stored.
            /// </param>
            /// <param name="primcount">
            /// Specifies the size of the count and indices arrays.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_multi_draw_arrays", Version = "", EntryPoint = "glMultiDrawElementsEXT")]
            public static void MultiDrawElements<T3>(OpenTK.Graphics.ES11.All mode, [CountAttribute(Computed = "primcount")] ref int count, OpenTK.Graphics.ES11.All type, [InAttribute, OutAttribute, CountAttribute(Computed = "primcount")] T3[] indices, int primcount)
                where T3 : struct
             { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: EXT_multi_draw_arrays]
            /// Render multiple sets of primitives by specifying indices of array data elements
            /// </summary>
            /// <param name="mode">
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
            /// </param>
            /// <param name="count">
            /// [length: COMPSIZE(primcount)]
            /// Points to an array of the elements counts.
            /// </param>
            /// <param name="type">
            /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
            /// </param>
            /// <param name="indices">
            /// [length: COMPSIZE(primcount)]
            /// Specifies a pointer to the location where the indices are stored.
            /// </param>
            /// <param name="primcount">
            /// Specifies the size of the count and indices arrays.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_multi_draw_arrays", Version = "", EntryPoint = "glMultiDrawElementsEXT")]
            public static void MultiDrawElements<T3>(OpenTK.Graphics.ES11.All mode, [CountAttribute(Computed = "primcount")] ref int count, OpenTK.Graphics.ES11.All type, [InAttribute, OutAttribute, CountAttribute(Computed = "primcount")] T3[,] indices, int primcount)
                where T3 : struct
             { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: EXT_multi_draw_arrays]
            /// Render multiple sets of primitives by specifying indices of array data elements
            /// </summary>
            /// <param name="mode">
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
            /// </param>
            /// <param name="count">
            /// [length: COMPSIZE(primcount)]
            /// Points to an array of the elements counts.
            /// </param>
            /// <param name="type">
            /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
            /// </param>
            /// <param name="indices">
            /// [length: COMPSIZE(primcount)]
            /// Specifies a pointer to the location where the indices are stored.
            /// </param>
            /// <param name="primcount">
            /// Specifies the size of the count and indices arrays.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_multi_draw_arrays", Version = "", EntryPoint = "glMultiDrawElementsEXT")]
            public static void MultiDrawElements<T3>(OpenTK.Graphics.ES11.All mode, [CountAttribute(Computed = "primcount")] ref int count, OpenTK.Graphics.ES11.All type, [InAttribute, OutAttribute, CountAttribute(Computed = "primcount")] T3[,,] indices, int primcount)
                where T3 : struct
             { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: EXT_multi_draw_arrays]
            /// Render multiple sets of primitives by specifying indices of array data elements
            /// </summary>
            /// <param name="mode">
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
            /// </param>
            /// <param name="count">
            /// [length: COMPSIZE(primcount)]
            /// Points to an array of the elements counts.
            /// </param>
            /// <param name="type">
            /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
            /// </param>
            /// <param name="indices">
            /// [length: COMPSIZE(primcount)]
            /// Specifies a pointer to the location where the indices are stored.
            /// </param>
            /// <param name="primcount">
            /// Specifies the size of the count and indices arrays.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_multi_draw_arrays", Version = "", EntryPoint = "glMultiDrawElementsEXT")]
            public static void MultiDrawElements<T3>(OpenTK.Graphics.ES11.All mode, [CountAttribute(Computed = "primcount")] ref int count, OpenTK.Graphics.ES11.All type, [InAttribute, OutAttribute, CountAttribute(Computed = "primcount")] ref T3 indices, int primcount)
                where T3 : struct
             { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: EXT_multi_draw_arrays]
            /// Render multiple sets of primitives by specifying indices of array data elements
            /// </summary>
            /// <param name="mode">
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
            /// </param>
            /// <param name="count">
            /// [length: COMPSIZE(primcount)]
            /// Points to an array of the elements counts.
            /// </param>
            /// <param name="type">
            /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
            /// </param>
            /// <param name="indices">
            /// [length: COMPSIZE(primcount)]
            /// Specifies a pointer to the location where the indices are stored.
            /// </param>
            /// <param name="primcount">
            /// Specifies the size of the count and indices arrays.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_multi_draw_arrays", Version = "", EntryPoint = "glMultiDrawElementsEXT")]
            public static unsafe void MultiDrawElements(OpenTK.Graphics.ES11.All mode, [CountAttribute(Computed = "primcount")] int* count, OpenTK.Graphics.ES11.All type, [CountAttribute(Computed = "primcount")] IntPtr indices, int primcount) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: EXT_multi_draw_arrays]
            /// Render multiple sets of primitives by specifying indices of array data elements
            /// </summary>
            /// <param name="mode">
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
            /// </param>
            /// <param name="count">
            /// [length: COMPSIZE(primcount)]
            /// Points to an array of the elements counts.
            /// </param>
            /// <param name="type">
            /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
            /// </param>
            /// <param name="indices">
            /// [length: COMPSIZE(primcount)]
            /// Specifies a pointer to the location where the indices are stored.
            /// </param>
            /// <param name="primcount">
            /// Specifies the size of the count and indices arrays.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_multi_draw_arrays", Version = "", EntryPoint = "glMultiDrawElementsEXT")]
            public static unsafe void MultiDrawElements<T3>(OpenTK.Graphics.ES11.All mode, [CountAttribute(Computed = "primcount")] int* count, OpenTK.Graphics.ES11.All type, [InAttribute, OutAttribute, CountAttribute(Computed = "primcount")] T3[] indices, int primcount)
                where T3 : struct
             { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: EXT_multi_draw_arrays]
            /// Render multiple sets of primitives by specifying indices of array data elements
            /// </summary>
            /// <param name="mode">
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
            /// </param>
            /// <param name="count">
            /// [length: COMPSIZE(primcount)]
            /// Points to an array of the elements counts.
            /// </param>
            /// <param name="type">
            /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
            /// </param>
            /// <param name="indices">
            /// [length: COMPSIZE(primcount)]
            /// Specifies a pointer to the location where the indices are stored.
            /// </param>
            /// <param name="primcount">
            /// Specifies the size of the count and indices arrays.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_multi_draw_arrays", Version = "", EntryPoint = "glMultiDrawElementsEXT")]
            public static unsafe void MultiDrawElements<T3>(OpenTK.Graphics.ES11.All mode, [CountAttribute(Computed = "primcount")] int* count, OpenTK.Graphics.ES11.All type, [InAttribute, OutAttribute, CountAttribute(Computed = "primcount")] T3[,] indices, int primcount)
                where T3 : struct
             { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: EXT_multi_draw_arrays]
            /// Render multiple sets of primitives by specifying indices of array data elements
            /// </summary>
            /// <param name="mode">
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
            /// </param>
            /// <param name="count">
            /// [length: COMPSIZE(primcount)]
            /// Points to an array of the elements counts.
            /// </param>
            /// <param name="type">
            /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
            /// </param>
            /// <param name="indices">
            /// [length: COMPSIZE(primcount)]
            /// Specifies a pointer to the location where the indices are stored.
            /// </param>
            /// <param name="primcount">
            /// Specifies the size of the count and indices arrays.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_multi_draw_arrays", Version = "", EntryPoint = "glMultiDrawElementsEXT")]
            public static unsafe void MultiDrawElements<T3>(OpenTK.Graphics.ES11.All mode, [CountAttribute(Computed = "primcount")] int* count, OpenTK.Graphics.ES11.All type, [InAttribute, OutAttribute, CountAttribute(Computed = "primcount")] T3[,,] indices, int primcount)
                where T3 : struct
             { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: EXT_multi_draw_arrays]
            /// Render multiple sets of primitives by specifying indices of array data elements
            /// </summary>
            /// <param name="mode">
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
            /// </param>
            /// <param name="count">
            /// [length: COMPSIZE(primcount)]
            /// Points to an array of the elements counts.
            /// </param>
            /// <param name="type">
            /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
            /// </param>
            /// <param name="indices">
            /// [length: COMPSIZE(primcount)]
            /// Specifies a pointer to the location where the indices are stored.
            /// </param>
            /// <param name="primcount">
            /// Specifies the size of the count and indices arrays.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_multi_draw_arrays", Version = "", EntryPoint = "glMultiDrawElementsEXT")]
            public static unsafe void MultiDrawElements<T3>(OpenTK.Graphics.ES11.All mode, [CountAttribute(Computed = "primcount")] int* count, OpenTK.Graphics.ES11.All type, [InAttribute, OutAttribute, CountAttribute(Computed = "primcount")] ref T3 indices, int primcount)
                where T3 : struct
             { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: EXT_multi_draw_arrays]
            /// Render multiple sets of primitives by specifying indices of array data elements
            /// </summary>
            /// <param name="mode">
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
            /// </param>
            /// <param name="count">
            /// [length: COMPSIZE(primcount)]
            /// Points to an array of the elements counts.
            /// </param>
            /// <param name="type">
            /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
            /// </param>
            /// <param name="indices">
            /// [length: COMPSIZE(primcount)]
            /// Specifies a pointer to the location where the indices are stored.
            /// </param>
            /// <param name="primcount">
            /// Specifies the size of the count and indices arrays.
            /// </param>
            [AutoGenerated(Category = "EXT_multi_draw_arrays", Version = "", EntryPoint = "glMultiDrawElementsEXT")]
            public static void MultiDrawElements(OpenTK.Graphics.ES11.PrimitiveType mode, [CountAttribute(Computed = "primcount")] int[] count, OpenTK.Graphics.ES11.DrawElementsType type, [CountAttribute(Computed = "primcount")] IntPtr indices, int primcount) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: EXT_multi_draw_arrays]
            /// Render multiple sets of primitives by specifying indices of array data elements
            /// </summary>
            /// <param name="mode">
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
            /// </param>
            /// <param name="count">
            /// [length: COMPSIZE(primcount)]
            /// Points to an array of the elements counts.
            /// </param>
            /// <param name="type">
            /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
            /// </param>
            /// <param name="indices">
            /// [length: COMPSIZE(primcount)]
            /// Specifies a pointer to the location where the indices are stored.
            /// </param>
            /// <param name="primcount">
            /// Specifies the size of the count and indices arrays.
            /// </param>
            [AutoGenerated(Category = "EXT_multi_draw_arrays", Version = "", EntryPoint = "glMultiDrawElementsEXT")]
            public static void MultiDrawElements<T3>(OpenTK.Graphics.ES11.PrimitiveType mode, [CountAttribute(Computed = "primcount")] int[] count, OpenTK.Graphics.ES11.DrawElementsType type, [InAttribute, OutAttribute, CountAttribute(Computed = "primcount")] T3[] indices, int primcount)
                where T3 : struct
             { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: EXT_multi_draw_arrays]
            /// Render multiple sets of primitives by specifying indices of array data elements
            /// </summary>
            /// <param name="mode">
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
            /// </param>
            /// <param name="count">
            /// [length: COMPSIZE(primcount)]
            /// Points to an array of the elements counts.
            /// </param>
            /// <param name="type">
            /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
            /// </param>
            /// <param name="indices">
            /// [length: COMPSIZE(primcount)]
            /// Specifies a pointer to the location where the indices are stored.
            /// </param>
            /// <param name="primcount">
            /// Specifies the size of the count and indices arrays.
            /// </param>
            [AutoGenerated(Category = "EXT_multi_draw_arrays", Version = "", EntryPoint = "glMultiDrawElementsEXT")]
            public static void MultiDrawElements<T3>(OpenTK.Graphics.ES11.PrimitiveType mode, [CountAttribute(Computed = "primcount")] int[] count, OpenTK.Graphics.ES11.DrawElementsType type, [InAttribute, OutAttribute, CountAttribute(Computed = "primcount")] T3[,] indices, int primcount)
                where T3 : struct
             { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: EXT_multi_draw_arrays]
            /// Render multiple sets of primitives by specifying indices of array data elements
            /// </summary>
            /// <param name="mode">
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
            /// </param>
            /// <param name="count">
            /// [length: COMPSIZE(primcount)]
            /// Points to an array of the elements counts.
            /// </param>
            /// <param name="type">
            /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
            /// </param>
            /// <param name="indices">
            /// [length: COMPSIZE(primcount)]
            /// Specifies a pointer to the location where the indices are stored.
            /// </param>
            /// <param name="primcount">
            /// Specifies the size of the count and indices arrays.
            /// </param>
            [AutoGenerated(Category = "EXT_multi_draw_arrays", Version = "", EntryPoint = "glMultiDrawElementsEXT")]
            public static void MultiDrawElements<T3>(OpenTK.Graphics.ES11.PrimitiveType mode, [CountAttribute(Computed = "primcount")] int[] count, OpenTK.Graphics.ES11.DrawElementsType type, [InAttribute, OutAttribute, CountAttribute(Computed = "primcount")] T3[,,] indices, int primcount)
                where T3 : struct
             { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: EXT_multi_draw_arrays]
            /// Render multiple sets of primitives by specifying indices of array data elements
            /// </summary>
            /// <param name="mode">
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
            /// </param>
            /// <param name="count">
            /// [length: COMPSIZE(primcount)]
            /// Points to an array of the elements counts.
            /// </param>
            /// <param name="type">
            /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
            /// </param>
            /// <param name="indices">
            /// [length: COMPSIZE(primcount)]
            /// Specifies a pointer to the location where the indices are stored.
            /// </param>
            /// <param name="primcount">
            /// Specifies the size of the count and indices arrays.
            /// </param>
            [AutoGenerated(Category = "EXT_multi_draw_arrays", Version = "", EntryPoint = "glMultiDrawElementsEXT")]
            public static void MultiDrawElements<T3>(OpenTK.Graphics.ES11.PrimitiveType mode, [CountAttribute(Computed = "primcount")] int[] count, OpenTK.Graphics.ES11.DrawElementsType type, [InAttribute, OutAttribute, CountAttribute(Computed = "primcount")] ref T3 indices, int primcount)
                where T3 : struct
             { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: EXT_multi_draw_arrays]
            /// Render multiple sets of primitives by specifying indices of array data elements
            /// </summary>
            /// <param name="mode">
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
            /// </param>
            /// <param name="count">
            /// [length: COMPSIZE(primcount)]
            /// Points to an array of the elements counts.
            /// </param>
            /// <param name="type">
            /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
            /// </param>
            /// <param name="indices">
            /// [length: COMPSIZE(primcount)]
            /// Specifies a pointer to the location where the indices are stored.
            /// </param>
            /// <param name="primcount">
            /// Specifies the size of the count and indices arrays.
            /// </param>
            [AutoGenerated(Category = "EXT_multi_draw_arrays", Version = "", EntryPoint = "glMultiDrawElementsEXT")]
            public static void MultiDrawElements(OpenTK.Graphics.ES11.PrimitiveType mode, [CountAttribute(Computed = "primcount")] ref int count, OpenTK.Graphics.ES11.DrawElementsType type, [CountAttribute(Computed = "primcount")] IntPtr indices, int primcount) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: EXT_multi_draw_arrays]
            /// Render multiple sets of primitives by specifying indices of array data elements
            /// </summary>
            /// <param name="mode">
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
            /// </param>
            /// <param name="count">
            /// [length: COMPSIZE(primcount)]
            /// Points to an array of the elements counts.
            /// </param>
            /// <param name="type">
            /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
            /// </param>
            /// <param name="indices">
            /// [length: COMPSIZE(primcount)]
            /// Specifies a pointer to the location where the indices are stored.
            /// </param>
            /// <param name="primcount">
            /// Specifies the size of the count and indices arrays.
            /// </param>
            [AutoGenerated(Category = "EXT_multi_draw_arrays", Version = "", EntryPoint = "glMultiDrawElementsEXT")]
            public static void MultiDrawElements<T3>(OpenTK.Graphics.ES11.PrimitiveType mode, [CountAttribute(Computed = "primcount")] ref int count, OpenTK.Graphics.ES11.DrawElementsType type, [InAttribute, OutAttribute, CountAttribute(Computed = "primcount")] T3[] indices, int primcount)
                where T3 : struct
             { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: EXT_multi_draw_arrays]
            /// Render multiple sets of primitives by specifying indices of array data elements
            /// </summary>
            /// <param name="mode">
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
            /// </param>
            /// <param name="count">
            /// [length: COMPSIZE(primcount)]
            /// Points to an array of the elements counts.
            /// </param>
            /// <param name="type">
            /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
            /// </param>
            /// <param name="indices">
            /// [length: COMPSIZE(primcount)]
            /// Specifies a pointer to the location where the indices are stored.
            /// </param>
            /// <param name="primcount">
            /// Specifies the size of the count and indices arrays.
            /// </param>
            [AutoGenerated(Category = "EXT_multi_draw_arrays", Version = "", EntryPoint = "glMultiDrawElementsEXT")]
            public static void MultiDrawElements<T3>(OpenTK.Graphics.ES11.PrimitiveType mode, [CountAttribute(Computed = "primcount")] ref int count, OpenTK.Graphics.ES11.DrawElementsType type, [InAttribute, OutAttribute, CountAttribute(Computed = "primcount")] T3[,] indices, int primcount)
                where T3 : struct
             { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: EXT_multi_draw_arrays]
            /// Render multiple sets of primitives by specifying indices of array data elements
            /// </summary>
            /// <param name="mode">
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
            /// </param>
            /// <param name="count">
            /// [length: COMPSIZE(primcount)]
            /// Points to an array of the elements counts.
            /// </param>
            /// <param name="type">
            /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
            /// </param>
            /// <param name="indices">
            /// [length: COMPSIZE(primcount)]
            /// Specifies a pointer to the location where the indices are stored.
            /// </param>
            /// <param name="primcount">
            /// Specifies the size of the count and indices arrays.
            /// </param>
            [AutoGenerated(Category = "EXT_multi_draw_arrays", Version = "", EntryPoint = "glMultiDrawElementsEXT")]
            public static void MultiDrawElements<T3>(OpenTK.Graphics.ES11.PrimitiveType mode, [CountAttribute(Computed = "primcount")] ref int count, OpenTK.Graphics.ES11.DrawElementsType type, [InAttribute, OutAttribute, CountAttribute(Computed = "primcount")] T3[,,] indices, int primcount)
                where T3 : struct
             { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: EXT_multi_draw_arrays]
            /// Render multiple sets of primitives by specifying indices of array data elements
            /// </summary>
            /// <param name="mode">
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
            /// </param>
            /// <param name="count">
            /// [length: COMPSIZE(primcount)]
            /// Points to an array of the elements counts.
            /// </param>
            /// <param name="type">
            /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
            /// </param>
            /// <param name="indices">
            /// [length: COMPSIZE(primcount)]
            /// Specifies a pointer to the location where the indices are stored.
            /// </param>
            /// <param name="primcount">
            /// Specifies the size of the count and indices arrays.
            /// </param>
            [AutoGenerated(Category = "EXT_multi_draw_arrays", Version = "", EntryPoint = "glMultiDrawElementsEXT")]
            public static void MultiDrawElements<T3>(OpenTK.Graphics.ES11.PrimitiveType mode, [CountAttribute(Computed = "primcount")] ref int count, OpenTK.Graphics.ES11.DrawElementsType type, [InAttribute, OutAttribute, CountAttribute(Computed = "primcount")] ref T3 indices, int primcount)
                where T3 : struct
             { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: EXT_multi_draw_arrays]
            /// Render multiple sets of primitives by specifying indices of array data elements
            /// </summary>
            /// <param name="mode">
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
            /// </param>
            /// <param name="count">
            /// [length: COMPSIZE(primcount)]
            /// Points to an array of the elements counts.
            /// </param>
            /// <param name="type">
            /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
            /// </param>
            /// <param name="indices">
            /// [length: COMPSIZE(primcount)]
            /// Specifies a pointer to the location where the indices are stored.
            /// </param>
            /// <param name="primcount">
            /// Specifies the size of the count and indices arrays.
            /// </param>
            [AutoGenerated(Category = "EXT_multi_draw_arrays", Version = "", EntryPoint = "glMultiDrawElementsEXT")]
            public static unsafe void MultiDrawElements(OpenTK.Graphics.ES11.PrimitiveType mode, [CountAttribute(Computed = "primcount")] int* count, OpenTK.Graphics.ES11.DrawElementsType type, [CountAttribute(Computed = "primcount")] IntPtr indices, int primcount) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: EXT_multi_draw_arrays]
            /// Render multiple sets of primitives by specifying indices of array data elements
            /// </summary>
            /// <param name="mode">
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
            /// </param>
            /// <param name="count">
            /// [length: COMPSIZE(primcount)]
            /// Points to an array of the elements counts.
            /// </param>
            /// <param name="type">
            /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
            /// </param>
            /// <param name="indices">
            /// [length: COMPSIZE(primcount)]
            /// Specifies a pointer to the location where the indices are stored.
            /// </param>
            /// <param name="primcount">
            /// Specifies the size of the count and indices arrays.
            /// </param>
            [AutoGenerated(Category = "EXT_multi_draw_arrays", Version = "", EntryPoint = "glMultiDrawElementsEXT")]
            public static unsafe void MultiDrawElements<T3>(OpenTK.Graphics.ES11.PrimitiveType mode, [CountAttribute(Computed = "primcount")] int* count, OpenTK.Graphics.ES11.DrawElementsType type, [InAttribute, OutAttribute, CountAttribute(Computed = "primcount")] T3[] indices, int primcount)
                where T3 : struct
             { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: EXT_multi_draw_arrays]
            /// Render multiple sets of primitives by specifying indices of array data elements
            /// </summary>
            /// <param name="mode">
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
            /// </param>
            /// <param name="count">
            /// [length: COMPSIZE(primcount)]
            /// Points to an array of the elements counts.
            /// </param>
            /// <param name="type">
            /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
            /// </param>
            /// <param name="indices">
            /// [length: COMPSIZE(primcount)]
            /// Specifies a pointer to the location where the indices are stored.
            /// </param>
            /// <param name="primcount">
            /// Specifies the size of the count and indices arrays.
            /// </param>
            [AutoGenerated(Category = "EXT_multi_draw_arrays", Version = "", EntryPoint = "glMultiDrawElementsEXT")]
            public static unsafe void MultiDrawElements<T3>(OpenTK.Graphics.ES11.PrimitiveType mode, [CountAttribute(Computed = "primcount")] int* count, OpenTK.Graphics.ES11.DrawElementsType type, [InAttribute, OutAttribute, CountAttribute(Computed = "primcount")] T3[,] indices, int primcount)
                where T3 : struct
             { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: EXT_multi_draw_arrays]
            /// Render multiple sets of primitives by specifying indices of array data elements
            /// </summary>
            /// <param name="mode">
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
            /// </param>
            /// <param name="count">
            /// [length: COMPSIZE(primcount)]
            /// Points to an array of the elements counts.
            /// </param>
            /// <param name="type">
            /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
            /// </param>
            /// <param name="indices">
            /// [length: COMPSIZE(primcount)]
            /// Specifies a pointer to the location where the indices are stored.
            /// </param>
            /// <param name="primcount">
            /// Specifies the size of the count and indices arrays.
            /// </param>
            [AutoGenerated(Category = "EXT_multi_draw_arrays", Version = "", EntryPoint = "glMultiDrawElementsEXT")]
            public static unsafe void MultiDrawElements<T3>(OpenTK.Graphics.ES11.PrimitiveType mode, [CountAttribute(Computed = "primcount")] int* count, OpenTK.Graphics.ES11.DrawElementsType type, [InAttribute, OutAttribute, CountAttribute(Computed = "primcount")] T3[,,] indices, int primcount)
                where T3 : struct
             { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: EXT_multi_draw_arrays]
            /// Render multiple sets of primitives by specifying indices of array data elements
            /// </summary>
            /// <param name="mode">
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
            /// </param>
            /// <param name="count">
            /// [length: COMPSIZE(primcount)]
            /// Points to an array of the elements counts.
            /// </param>
            /// <param name="type">
            /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
            /// </param>
            /// <param name="indices">
            /// [length: COMPSIZE(primcount)]
            /// Specifies a pointer to the location where the indices are stored.
            /// </param>
            /// <param name="primcount">
            /// Specifies the size of the count and indices arrays.
            /// </param>
            [AutoGenerated(Category = "EXT_multi_draw_arrays", Version = "", EntryPoint = "glMultiDrawElementsEXT")]
            public static unsafe void MultiDrawElements<T3>(OpenTK.Graphics.ES11.PrimitiveType mode, [CountAttribute(Computed = "primcount")] int* count, OpenTK.Graphics.ES11.DrawElementsType type, [InAttribute, OutAttribute, CountAttribute(Computed = "primcount")] ref T3 indices, int primcount)
                where T3 : struct
             { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: EXT_debug_marker]
            /// </summary>
            [AutoGenerated(Category = "EXT_debug_marker", Version = "", EntryPoint = "glPopGroupMarkerEXT")]
            public static void PopGroupMarker() { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: EXT_debug_marker]
            /// </summary>
            /// <param name="length">
            /// </param>
            /// <param name="marker">
            /// </param>
            [AutoGenerated(Category = "EXT_debug_marker", Version = "", EntryPoint = "glPushGroupMarkerEXT")]
            public static void PushGroupMarker(int length, String marker) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: EXT_robustness]
            /// </summary>
            /// <param name="x">
            /// </param>
            /// <param name="y">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="height">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="bufSize">
            /// </param>
            /// <param name="data">
            /// [length: bufSize]
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_robustness", Version = "", EntryPoint = "glReadnPixelsEXT")]
            public static void ReadnPixels(int x, int y, int width, int height, OpenTK.Graphics.ES11.All format, OpenTK.Graphics.ES11.All type, int bufSize, [OutAttribute, CountAttribute(Parameter = "bufSize")] IntPtr data) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: EXT_robustness]
            /// </summary>
            /// <param name="x">
            /// </param>
            /// <param name="y">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="height">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="bufSize">
            /// </param>
            /// <param name="data">
            /// [length: bufSize]
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_robustness", Version = "", EntryPoint = "glReadnPixelsEXT")]
            public static void ReadnPixels<T7>(int x, int y, int width, int height, OpenTK.Graphics.ES11.All format, OpenTK.Graphics.ES11.All type, int bufSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "bufSize")] T7[] data)
                where T7 : struct
             { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: EXT_robustness]
            /// </summary>
            /// <param name="x">
            /// </param>
            /// <param name="y">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="height">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="bufSize">
            /// </param>
            /// <param name="data">
            /// [length: bufSize]
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_robustness", Version = "", EntryPoint = "glReadnPixelsEXT")]
            public static void ReadnPixels<T7>(int x, int y, int width, int height, OpenTK.Graphics.ES11.All format, OpenTK.Graphics.ES11.All type, int bufSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "bufSize")] T7[,] data)
                where T7 : struct
             { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: EXT_robustness]
            /// </summary>
            /// <param name="x">
            /// </param>
            /// <param name="y">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="height">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="bufSize">
            /// </param>
            /// <param name="data">
            /// [length: bufSize]
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_robustness", Version = "", EntryPoint = "glReadnPixelsEXT")]
            public static void ReadnPixels<T7>(int x, int y, int width, int height, OpenTK.Graphics.ES11.All format, OpenTK.Graphics.ES11.All type, int bufSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "bufSize")] T7[,,] data)
                where T7 : struct
             { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: EXT_robustness]
            /// </summary>
            /// <param name="x">
            /// </param>
            /// <param name="y">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="height">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="bufSize">
            /// </param>
            /// <param name="data">
            /// [length: bufSize]
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_robustness", Version = "", EntryPoint = "glReadnPixelsEXT")]
            public static void ReadnPixels<T7>(int x, int y, int width, int height, OpenTK.Graphics.ES11.All format, OpenTK.Graphics.ES11.All type, int bufSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "bufSize")] ref T7 data)
                where T7 : struct
             { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: EXT_robustness]
            /// </summary>
            /// <param name="x">
            /// </param>
            /// <param name="y">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="height">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="bufSize">
            /// </param>
            /// <param name="data">
            /// [length: bufSize]
            /// </param>
            [AutoGenerated(Category = "EXT_robustness", Version = "", EntryPoint = "glReadnPixelsEXT")]
            public static void ReadnPixels(int x, int y, int width, int height, OpenTK.Graphics.ES11.PixelFormat format, OpenTK.Graphics.ES11.PixelType type, int bufSize, [OutAttribute, CountAttribute(Parameter = "bufSize")] IntPtr data) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: EXT_robustness]
            /// </summary>
            /// <param name="x">
            /// </param>
            /// <param name="y">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="height">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="bufSize">
            /// </param>
            /// <param name="data">
            /// [length: bufSize]
            /// </param>
            [AutoGenerated(Category = "EXT_robustness", Version = "", EntryPoint = "glReadnPixelsEXT")]
            public static void ReadnPixels<T7>(int x, int y, int width, int height, OpenTK.Graphics.ES11.PixelFormat format, OpenTK.Graphics.ES11.PixelType type, int bufSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "bufSize")] T7[] data)
                where T7 : struct
             { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: EXT_robustness]
            /// </summary>
            /// <param name="x">
            /// </param>
            /// <param name="y">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="height">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="bufSize">
            /// </param>
            /// <param name="data">
            /// [length: bufSize]
            /// </param>
            [AutoGenerated(Category = "EXT_robustness", Version = "", EntryPoint = "glReadnPixelsEXT")]
            public static void ReadnPixels<T7>(int x, int y, int width, int height, OpenTK.Graphics.ES11.PixelFormat format, OpenTK.Graphics.ES11.PixelType type, int bufSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "bufSize")] T7[,] data)
                where T7 : struct
             { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: EXT_robustness]
            /// </summary>
            /// <param name="x">
            /// </param>
            /// <param name="y">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="height">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="bufSize">
            /// </param>
            /// <param name="data">
            /// [length: bufSize]
            /// </param>
            [AutoGenerated(Category = "EXT_robustness", Version = "", EntryPoint = "glReadnPixelsEXT")]
            public static void ReadnPixels<T7>(int x, int y, int width, int height, OpenTK.Graphics.ES11.PixelFormat format, OpenTK.Graphics.ES11.PixelType type, int bufSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "bufSize")] T7[,,] data)
                where T7 : struct
             { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: EXT_robustness]
            /// </summary>
            /// <param name="x">
            /// </param>
            /// <param name="y">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="height">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="bufSize">
            /// </param>
            /// <param name="data">
            /// [length: bufSize]
            /// </param>
            [AutoGenerated(Category = "EXT_robustness", Version = "", EntryPoint = "glReadnPixelsEXT")]
            public static void ReadnPixels<T7>(int x, int y, int width, int height, OpenTK.Graphics.ES11.PixelFormat format, OpenTK.Graphics.ES11.PixelType type, int bufSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "bufSize")] ref T7 data)
                where T7 : struct
             { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: EXT_multisampled_render_to_texture]
            /// Establish data storage, format, dimensions and sample count of a renderbuffer object's image
            /// </summary>
            /// <param name="target">
            /// Specifies a binding to which the target of the allocation and must be Renderbuffer.
            /// </param>
            /// <param name="samples">
            /// Specifies the number of samples to be used for the renderbuffer object's storage.
            /// </param>
            /// <param name="internalformat">
            /// Specifies the internal format to use for the renderbuffer object's image.
            /// </param>
            /// <param name="width">
            /// Specifies the width of the renderbuffer, in pixels.
            /// </param>
            /// <param name="height">
            /// Specifies the height of the renderbuffer, in pixels.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_multisampled_render_to_texture", Version = "", EntryPoint = "glRenderbufferStorageMultisampleEXT")]
            public static void RenderbufferStorageMultisample(OpenTK.Graphics.ES11.All target, int samples, OpenTK.Graphics.ES11.All internalformat, int width, int height) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: EXT_multisampled_render_to_texture]
            /// Establish data storage, format, dimensions and sample count of a renderbuffer object's image
            /// </summary>
            /// <param name="target">
            /// Specifies a binding to which the target of the allocation and must be Renderbuffer.
            /// </param>
            /// <param name="samples">
            /// Specifies the number of samples to be used for the renderbuffer object's storage.
            /// </param>
            /// <param name="internalformat">
            /// Specifies the internal format to use for the renderbuffer object's image.
            /// </param>
            /// <param name="width">
            /// Specifies the width of the renderbuffer, in pixels.
            /// </param>
            /// <param name="height">
            /// Specifies the height of the renderbuffer, in pixels.
            /// </param>
            [AutoGenerated(Category = "EXT_multisampled_render_to_texture", Version = "", EntryPoint = "glRenderbufferStorageMultisampleEXT")]
            public static void RenderbufferStorageMultisample(OpenTK.Graphics.ES11.RenderbufferTarget target, int samples, OpenTK.Graphics.ES11.InternalFormat internalformat, int width, int height) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: EXT_texture_storage]
            /// Simultaneously specify storage for all levels of a one-dimensional texture
            /// </summary>
            /// <param name="target">
            /// Specify the target of the operation. target must be either Texture1D or ProxyTexture1D.
            /// </param>
            /// <param name="levels">
            /// Specify the number of texture levels.
            /// </param>
            /// <param name="internalformat">
            /// Specifies the sized internal format to be used to store texture image data.
            /// </param>
            /// <param name="width">
            /// Specifies the width of the texture, in texels.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_texture_storage", Version = "", EntryPoint = "glTexStorage1DEXT")]
            public static void TexStorage1D(OpenTK.Graphics.ES11.All target, int levels, OpenTK.Graphics.ES11.All internalformat, int width) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: EXT_texture_storage]
            /// Simultaneously specify storage for all levels of a one-dimensional texture
            /// </summary>
            /// <param name="target">
            /// Specify the target of the operation. target must be either Texture1D or ProxyTexture1D.
            /// </param>
            /// <param name="levels">
            /// Specify the number of texture levels.
            /// </param>
            /// <param name="internalformat">
            /// Specifies the sized internal format to be used to store texture image data.
            /// </param>
            /// <param name="width">
            /// Specifies the width of the texture, in texels.
            /// </param>
            [AutoGenerated(Category = "EXT_texture_storage", Version = "", EntryPoint = "glTexStorage1DEXT")]
            public static void TexStorage1D(OpenTK.Graphics.ES11.TextureTarget target, int levels, OpenTK.Graphics.ES11.InternalFormat internalformat, int width) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: EXT_texture_storage]
            /// Simultaneously specify storage for all levels of a two-dimensional or one-dimensional array texture
            /// </summary>
            /// <param name="target">
            /// Specify the target of the operation. target must be one of Texture2D, ProxyTexture2D, Texture1DArray, ProxyTexture1DArray, TextureRectangle, ProxyTextureRectangle, or ProxyTextureCubeMap.
            /// </param>
            /// <param name="levels">
            /// Specify the number of texture levels.
            /// </param>
            /// <param name="internalformat">
            /// Specifies the sized internal format to be used to store texture image data.
            /// </param>
            /// <param name="width">
            /// Specifies the width of the texture, in texels.
            /// </param>
            /// <param name="height">
            /// Specifies the height of the texture, in texels.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_texture_storage", Version = "", EntryPoint = "glTexStorage2DEXT")]
            public static void TexStorage2D(OpenTK.Graphics.ES11.All target, int levels, OpenTK.Graphics.ES11.All internalformat, int width, int height) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: EXT_texture_storage]
            /// Simultaneously specify storage for all levels of a two-dimensional or one-dimensional array texture
            /// </summary>
            /// <param name="target">
            /// Specify the target of the operation. target must be one of Texture2D, ProxyTexture2D, Texture1DArray, ProxyTexture1DArray, TextureRectangle, ProxyTextureRectangle, or ProxyTextureCubeMap.
            /// </param>
            /// <param name="levels">
            /// Specify the number of texture levels.
            /// </param>
            /// <param name="internalformat">
            /// Specifies the sized internal format to be used to store texture image data.
            /// </param>
            /// <param name="width">
            /// Specifies the width of the texture, in texels.
            /// </param>
            /// <param name="height">
            /// Specifies the height of the texture, in texels.
            /// </param>
            [AutoGenerated(Category = "EXT_texture_storage", Version = "", EntryPoint = "glTexStorage2DEXT")]
            public static void TexStorage2D(OpenTK.Graphics.ES11.TextureTarget target, int levels, OpenTK.Graphics.ES11.InternalFormat internalformat, int width, int height) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: EXT_texture_storage]
            /// Simultaneously specify storage for all levels of a three-dimensional, two-dimensional array or cube-map array texture
            /// </summary>
            /// <param name="target">
            /// Specify the target of the operation. target must be one of Texture3D, ProxyTexture3D, Texture2DArray, ProxyTexture2DArray, TextureCubeArray, or ProxyTextureCubeArray.
            /// </param>
            /// <param name="levels">
            /// Specify the number of texture levels.
            /// </param>
            /// <param name="internalformat">
            /// Specifies the sized internal format to be used to store texture image data.
            /// </param>
            /// <param name="width">
            /// Specifies the width of the texture, in texels.
            /// </param>
            /// <param name="height">
            /// Specifies the height of the texture, in texels.
            /// </param>
            /// <param name="depth">
            /// Specifies the depth of the texture, in texels.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_texture_storage", Version = "", EntryPoint = "glTexStorage3DEXT")]
            public static void TexStorage3D(OpenTK.Graphics.ES11.All target, int levels, OpenTK.Graphics.ES11.All internalformat, int width, int height, int depth) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: EXT_texture_storage]
            /// Simultaneously specify storage for all levels of a three-dimensional, two-dimensional array or cube-map array texture
            /// </summary>
            /// <param name="target">
            /// Specify the target of the operation. target must be one of Texture3D, ProxyTexture3D, Texture2DArray, ProxyTexture2DArray, TextureCubeArray, or ProxyTextureCubeArray.
            /// </param>
            /// <param name="levels">
            /// Specify the number of texture levels.
            /// </param>
            /// <param name="internalformat">
            /// Specifies the sized internal format to be used to store texture image data.
            /// </param>
            /// <param name="width">
            /// Specifies the width of the texture, in texels.
            /// </param>
            /// <param name="height">
            /// Specifies the height of the texture, in texels.
            /// </param>
            /// <param name="depth">
            /// Specifies the depth of the texture, in texels.
            /// </param>
            [AutoGenerated(Category = "EXT_texture_storage", Version = "", EntryPoint = "glTexStorage3DEXT")]
            public static void TexStorage3D(OpenTK.Graphics.ES11.TextureTarget target, int levels, OpenTK.Graphics.ES11.InternalFormat internalformat, int width, int height, int depth) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: EXT_texture_storage]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="levels">
            /// </param>
            /// <param name="internalformat">
            /// </param>
            /// <param name="width">
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_texture_storage", Version = "", EntryPoint = "glTextureStorage1DEXT")]
            public static void TextureStorage1D(int texture, OpenTK.Graphics.ES11.All target, int levels, OpenTK.Graphics.ES11.All internalformat, int width) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: EXT_texture_storage]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="levels">
            /// </param>
            /// <param name="internalformat">
            /// </param>
            /// <param name="width">
            /// </param>
            [AutoGenerated(Category = "EXT_texture_storage", Version = "", EntryPoint = "glTextureStorage1DEXT")]
            public static void TextureStorage1D(int texture, OpenTK.Graphics.ES11.All target, int levels, OpenTK.Graphics.ES11.InternalFormat internalformat, int width) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: EXT_texture_storage]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="levels">
            /// </param>
            /// <param name="internalformat">
            /// </param>
            /// <param name="width">
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_texture_storage", Version = "", EntryPoint = "glTextureStorage1DEXT")]
            public static void TextureStorage1D(uint texture, OpenTK.Graphics.ES11.All target, int levels, OpenTK.Graphics.ES11.All internalformat, int width) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: EXT_texture_storage]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="levels">
            /// </param>
            /// <param name="internalformat">
            /// </param>
            /// <param name="width">
            /// </param>
            [AutoGenerated(Category = "EXT_texture_storage", Version = "", EntryPoint = "glTextureStorage1DEXT")]
            public static void TextureStorage1D(uint texture, OpenTK.Graphics.ES11.All target, int levels, OpenTK.Graphics.ES11.InternalFormat internalformat, int width) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: EXT_texture_storage]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="levels">
            /// </param>
            /// <param name="internalformat">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="height">
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_texture_storage", Version = "", EntryPoint = "glTextureStorage2DEXT")]
            public static void TextureStorage2D(int texture, OpenTK.Graphics.ES11.All target, int levels, OpenTK.Graphics.ES11.All internalformat, int width, int height) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: EXT_texture_storage]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="levels">
            /// </param>
            /// <param name="internalformat">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="height">
            /// </param>
            [AutoGenerated(Category = "EXT_texture_storage", Version = "", EntryPoint = "glTextureStorage2DEXT")]
            public static void TextureStorage2D(int texture, OpenTK.Graphics.ES11.All target, int levels, OpenTK.Graphics.ES11.InternalFormat internalformat, int width, int height) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: EXT_texture_storage]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="levels">
            /// </param>
            /// <param name="internalformat">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="height">
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_texture_storage", Version = "", EntryPoint = "glTextureStorage2DEXT")]
            public static void TextureStorage2D(uint texture, OpenTK.Graphics.ES11.All target, int levels, OpenTK.Graphics.ES11.All internalformat, int width, int height) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: EXT_texture_storage]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="levels">
            /// </param>
            /// <param name="internalformat">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="height">
            /// </param>
            [AutoGenerated(Category = "EXT_texture_storage", Version = "", EntryPoint = "glTextureStorage2DEXT")]
            public static void TextureStorage2D(uint texture, OpenTK.Graphics.ES11.All target, int levels, OpenTK.Graphics.ES11.InternalFormat internalformat, int width, int height) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: EXT_texture_storage]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="levels">
            /// </param>
            /// <param name="internalformat">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="height">
            /// </param>
            /// <param name="depth">
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_texture_storage", Version = "", EntryPoint = "glTextureStorage3DEXT")]
            public static void TextureStorage3D(int texture, OpenTK.Graphics.ES11.All target, int levels, OpenTK.Graphics.ES11.All internalformat, int width, int height, int depth) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: EXT_texture_storage]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="levels">
            /// </param>
            /// <param name="internalformat">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="height">
            /// </param>
            /// <param name="depth">
            /// </param>
            [AutoGenerated(Category = "EXT_texture_storage", Version = "", EntryPoint = "glTextureStorage3DEXT")]
            public static void TextureStorage3D(int texture, OpenTK.Graphics.ES11.All target, int levels, OpenTK.Graphics.ES11.InternalFormat internalformat, int width, int height, int depth) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: EXT_texture_storage]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="levels">
            /// </param>
            /// <param name="internalformat">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="height">
            /// </param>
            /// <param name="depth">
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_texture_storage", Version = "", EntryPoint = "glTextureStorage3DEXT")]
            public static void TextureStorage3D(uint texture, OpenTK.Graphics.ES11.All target, int levels, OpenTK.Graphics.ES11.All internalformat, int width, int height, int depth) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: EXT_texture_storage]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="levels">
            /// </param>
            /// <param name="internalformat">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="height">
            /// </param>
            /// <param name="depth">
            /// </param>
            [AutoGenerated(Category = "EXT_texture_storage", Version = "", EntryPoint = "glTextureStorage3DEXT")]
            public static void TextureStorage3D(uint texture, OpenTK.Graphics.ES11.All target, int levels, OpenTK.Graphics.ES11.InternalFormat internalformat, int width, int height, int depth) { throw new BindingsNotRewrittenException(); }

        }

        public static partial class Img
        {
            /// <summary>
            /// [requires: IMG_user_clip_plane]
            /// Specify a plane against which all geometry is clipped
            /// </summary>
            /// <param name="p">
            /// Specifies which clipping plane is being positioned. Symbolic names of the form ClipPlanei, where i is an integer between 0 and MaxClipPlanes - 1, are accepted.
            /// </param>
            /// <param name="eqn">
            /// [length: 4]
            /// Specifies the address of an array of four double-precision floating-point values. These values are interpreted as a plane equation.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "IMG_user_clip_plane", Version = "", EntryPoint = "glClipPlanefIMG")]
            public static void ClipPlane(OpenTK.Graphics.ES11.All p, [CountAttribute(Count = 4)] float[] eqn) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: IMG_user_clip_plane]
            /// Specify a plane against which all geometry is clipped
            /// </summary>
            /// <param name="p">
            /// Specifies which clipping plane is being positioned. Symbolic names of the form ClipPlanei, where i is an integer between 0 and MaxClipPlanes - 1, are accepted.
            /// </param>
            /// <param name="eqn">
            /// [length: 4]
            /// Specifies the address of an array of four double-precision floating-point values. These values are interpreted as a plane equation.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "IMG_user_clip_plane", Version = "", EntryPoint = "glClipPlanefIMG")]
            public static void ClipPlane(OpenTK.Graphics.ES11.All p, [CountAttribute(Count = 4)] ref float eqn) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: IMG_user_clip_plane]
            /// Specify a plane against which all geometry is clipped
            /// </summary>
            /// <param name="p">
            /// Specifies which clipping plane is being positioned. Symbolic names of the form ClipPlanei, where i is an integer between 0 and MaxClipPlanes - 1, are accepted.
            /// </param>
            /// <param name="eqn">
            /// [length: 4]
            /// Specifies the address of an array of four double-precision floating-point values. These values are interpreted as a plane equation.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "IMG_user_clip_plane", Version = "", EntryPoint = "glClipPlanefIMG")]
            public static unsafe void ClipPlane(OpenTK.Graphics.ES11.All p, [CountAttribute(Count = 4)] float* eqn) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: IMG_user_clip_plane]
            /// Specify a plane against which all geometry is clipped
            /// </summary>
            /// <param name="p">
            /// Specifies which clipping plane is being positioned. Symbolic names of the form ClipPlanei, where i is an integer between 0 and MaxClipPlanes - 1, are accepted.
            /// </param>
            /// <param name="eqn">
            /// [length: 4]
            /// Specifies the address of an array of four double-precision floating-point values. These values are interpreted as a plane equation.
            /// </param>
            [AutoGenerated(Category = "IMG_user_clip_plane", Version = "", EntryPoint = "glClipPlanefIMG")]
            public static void ClipPlane(OpenTK.Graphics.ES11.ClipPlaneName p, [CountAttribute(Count = 4)] float[] eqn) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: IMG_user_clip_plane]
            /// Specify a plane against which all geometry is clipped
            /// </summary>
            /// <param name="p">
            /// Specifies which clipping plane is being positioned. Symbolic names of the form ClipPlanei, where i is an integer between 0 and MaxClipPlanes - 1, are accepted.
            /// </param>
            /// <param name="eqn">
            /// [length: 4]
            /// Specifies the address of an array of four double-precision floating-point values. These values are interpreted as a plane equation.
            /// </param>
            [AutoGenerated(Category = "IMG_user_clip_plane", Version = "", EntryPoint = "glClipPlanefIMG")]
            public static void ClipPlane(OpenTK.Graphics.ES11.ClipPlaneName p, [CountAttribute(Count = 4)] ref float eqn) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: IMG_user_clip_plane]
            /// Specify a plane against which all geometry is clipped
            /// </summary>
            /// <param name="p">
            /// Specifies which clipping plane is being positioned. Symbolic names of the form ClipPlanei, where i is an integer between 0 and MaxClipPlanes - 1, are accepted.
            /// </param>
            /// <param name="eqn">
            /// [length: 4]
            /// Specifies the address of an array of four double-precision floating-point values. These values are interpreted as a plane equation.
            /// </param>
            [AutoGenerated(Category = "IMG_user_clip_plane", Version = "", EntryPoint = "glClipPlanefIMG")]
            public static unsafe void ClipPlane(OpenTK.Graphics.ES11.ClipPlaneName p, [CountAttribute(Count = 4)] float* eqn) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: IMG_user_clip_plane]
            /// </summary>
            /// <param name="p">
            /// </param>
            /// <param name="eqn">
            /// [length: 4]
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "IMG_user_clip_plane", Version = "", EntryPoint = "glClipPlanexIMG")]
            public static void ClipPlanex(OpenTK.Graphics.ES11.All p, [CountAttribute(Count = 4)] int[] eqn) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: IMG_user_clip_plane]
            /// </summary>
            /// <param name="p">
            /// </param>
            /// <param name="eqn">
            /// [length: 4]
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "IMG_user_clip_plane", Version = "", EntryPoint = "glClipPlanexIMG")]
            public static void ClipPlanex(OpenTK.Graphics.ES11.All p, [CountAttribute(Count = 4)] ref int eqn) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: IMG_user_clip_plane]
            /// </summary>
            /// <param name="p">
            /// </param>
            /// <param name="eqn">
            /// [length: 4]
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "IMG_user_clip_plane", Version = "", EntryPoint = "glClipPlanexIMG")]
            public static unsafe void ClipPlanex(OpenTK.Graphics.ES11.All p, [CountAttribute(Count = 4)] int* eqn) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: IMG_user_clip_plane]
            /// </summary>
            /// <param name="p">
            /// </param>
            /// <param name="eqn">
            /// [length: 4]
            /// </param>
            [AutoGenerated(Category = "IMG_user_clip_plane", Version = "", EntryPoint = "glClipPlanexIMG")]
            public static void ClipPlanex(OpenTK.Graphics.ES11.ClipPlaneName p, [CountAttribute(Count = 4)] int[] eqn) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: IMG_user_clip_plane]
            /// </summary>
            /// <param name="p">
            /// </param>
            /// <param name="eqn">
            /// [length: 4]
            /// </param>
            [AutoGenerated(Category = "IMG_user_clip_plane", Version = "", EntryPoint = "glClipPlanexIMG")]
            public static void ClipPlanex(OpenTK.Graphics.ES11.ClipPlaneName p, [CountAttribute(Count = 4)] ref int eqn) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: IMG_user_clip_plane]
            /// </summary>
            /// <param name="p">
            /// </param>
            /// <param name="eqn">
            /// [length: 4]
            /// </param>
            [AutoGenerated(Category = "IMG_user_clip_plane", Version = "", EntryPoint = "glClipPlanexIMG")]
            public static unsafe void ClipPlanex(OpenTK.Graphics.ES11.ClipPlaneName p, [CountAttribute(Count = 4)] int* eqn) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: IMG_multisampled_render_to_texture]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="attachment">
            /// </param>
            /// <param name="textarget">
            /// </param>
            /// <param name="texture">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="samples">
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "IMG_multisampled_render_to_texture", Version = "", EntryPoint = "glFramebufferTexture2DMultisampleIMG")]
            public static void FramebufferTexture2DMultisample(OpenTK.Graphics.ES11.All target, OpenTK.Graphics.ES11.All attachment, OpenTK.Graphics.ES11.All textarget, int texture, int level, int samples) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: IMG_multisampled_render_to_texture]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="attachment">
            /// </param>
            /// <param name="textarget">
            /// </param>
            /// <param name="texture">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="samples">
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "IMG_multisampled_render_to_texture", Version = "", EntryPoint = "glFramebufferTexture2DMultisampleIMG")]
            public static void FramebufferTexture2DMultisample(OpenTK.Graphics.ES11.All target, OpenTK.Graphics.ES11.All attachment, OpenTK.Graphics.ES11.All textarget, uint texture, int level, int samples) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: IMG_multisampled_render_to_texture]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="attachment">
            /// </param>
            /// <param name="textarget">
            /// </param>
            /// <param name="texture">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="samples">
            /// </param>
            [AutoGenerated(Category = "IMG_multisampled_render_to_texture", Version = "", EntryPoint = "glFramebufferTexture2DMultisampleIMG")]
            public static void FramebufferTexture2DMultisample(OpenTK.Graphics.ES11.FramebufferTarget target, OpenTK.Graphics.ES11.FramebufferAttachment attachment, OpenTK.Graphics.ES11.TextureTarget textarget, int texture, int level, int samples) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: IMG_multisampled_render_to_texture]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="attachment">
            /// </param>
            /// <param name="textarget">
            /// </param>
            /// <param name="texture">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="samples">
            /// </param>
            [AutoGenerated(Category = "IMG_multisampled_render_to_texture", Version = "", EntryPoint = "glFramebufferTexture2DMultisampleIMG")]
            public static void FramebufferTexture2DMultisample(OpenTK.Graphics.ES11.FramebufferTarget target, OpenTK.Graphics.ES11.FramebufferAttachment attachment, OpenTK.Graphics.ES11.TextureTarget textarget, uint texture, int level, int samples) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: IMG_multisampled_render_to_texture]
            /// Establish data storage, format, dimensions and sample count of a renderbuffer object's image
            /// </summary>
            /// <param name="target">
            /// Specifies a binding to which the target of the allocation and must be Renderbuffer.
            /// </param>
            /// <param name="samples">
            /// Specifies the number of samples to be used for the renderbuffer object's storage.
            /// </param>
            /// <param name="internalformat">
            /// Specifies the internal format to use for the renderbuffer object's image.
            /// </param>
            /// <param name="width">
            /// Specifies the width of the renderbuffer, in pixels.
            /// </param>
            /// <param name="height">
            /// Specifies the height of the renderbuffer, in pixels.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "IMG_multisampled_render_to_texture", Version = "", EntryPoint = "glRenderbufferStorageMultisampleIMG")]
            public static void RenderbufferStorageMultisample(OpenTK.Graphics.ES11.All target, int samples, OpenTK.Graphics.ES11.All internalformat, int width, int height) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: IMG_multisampled_render_to_texture]
            /// Establish data storage, format, dimensions and sample count of a renderbuffer object's image
            /// </summary>
            /// <param name="target">
            /// Specifies a binding to which the target of the allocation and must be Renderbuffer.
            /// </param>
            /// <param name="samples">
            /// Specifies the number of samples to be used for the renderbuffer object's storage.
            /// </param>
            /// <param name="internalformat">
            /// Specifies the internal format to use for the renderbuffer object's image.
            /// </param>
            /// <param name="width">
            /// Specifies the width of the renderbuffer, in pixels.
            /// </param>
            /// <param name="height">
            /// Specifies the height of the renderbuffer, in pixels.
            /// </param>
            [AutoGenerated(Category = "IMG_multisampled_render_to_texture", Version = "", EntryPoint = "glRenderbufferStorageMultisampleIMG")]
            public static void RenderbufferStorageMultisample(OpenTK.Graphics.ES11.RenderbufferTarget target, int samples, OpenTK.Graphics.ES11.InternalFormat internalformat, int width, int height) { throw new BindingsNotRewrittenException(); }

        }

        public static partial class Khr
        {
            /// <summary>
            /// [requires: KHR_debug]
            /// Specify a callback to receive debugging messages from the GL
            /// </summary>
            /// <param name="callback">
            /// The address of a callback function that will be called when a debug message is generated.
            /// </param>
            /// <param name="userParam">
            /// A user supplied pointer that will be passed on each invocation of callback.
            /// </param>
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glDebugMessageCallbackKHR")]
            public static void DebugMessageCallback(DebugProcKhr callback, IntPtr userParam) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: KHR_debug]
            /// Specify a callback to receive debugging messages from the GL
            /// </summary>
            /// <param name="callback">
            /// The address of a callback function that will be called when a debug message is generated.
            /// </param>
            /// <param name="userParam">
            /// A user supplied pointer that will be passed on each invocation of callback.
            /// </param>
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glDebugMessageCallbackKHR")]
            public static void DebugMessageCallback<T1>(DebugProcKhr callback, [InAttribute, OutAttribute] T1[] userParam)
                where T1 : struct
             { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: KHR_debug]
            /// Specify a callback to receive debugging messages from the GL
            /// </summary>
            /// <param name="callback">
            /// The address of a callback function that will be called when a debug message is generated.
            /// </param>
            /// <param name="userParam">
            /// A user supplied pointer that will be passed on each invocation of callback.
            /// </param>
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glDebugMessageCallbackKHR")]
            public static void DebugMessageCallback<T1>(DebugProcKhr callback, [InAttribute, OutAttribute] T1[,] userParam)
                where T1 : struct
             { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: KHR_debug]
            /// Specify a callback to receive debugging messages from the GL
            /// </summary>
            /// <param name="callback">
            /// The address of a callback function that will be called when a debug message is generated.
            /// </param>
            /// <param name="userParam">
            /// A user supplied pointer that will be passed on each invocation of callback.
            /// </param>
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glDebugMessageCallbackKHR")]
            public static void DebugMessageCallback<T1>(DebugProcKhr callback, [InAttribute, OutAttribute] T1[,,] userParam)
                where T1 : struct
             { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: KHR_debug]
            /// Specify a callback to receive debugging messages from the GL
            /// </summary>
            /// <param name="callback">
            /// The address of a callback function that will be called when a debug message is generated.
            /// </param>
            /// <param name="userParam">
            /// A user supplied pointer that will be passed on each invocation of callback.
            /// </param>
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glDebugMessageCallbackKHR")]
            public static void DebugMessageCallback<T1>(DebugProcKhr callback, [InAttribute, OutAttribute] ref T1 userParam)
                where T1 : struct
             { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: KHR_debug]
            /// Control the reporting of debug messages in a debug context
            /// </summary>
            /// <param name="source">
            /// The source of debug messages to enable or disable.
            /// </param>
            /// <param name="type">
            /// The type of debug messages to enable or disable.
            /// </param>
            /// <param name="severity">
            /// The severity of debug messages to enable or disable.
            /// </param>
            /// <param name="count">
            /// The length of the array ids.
            /// </param>
            /// <param name="ids">
            /// The address of an array of unsigned integers contianing the ids of the messages to enable or disable.
            /// </param>
            /// <param name="enabled">
            /// A Boolean flag determining whether the selected messages should be enabled or disabled.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glDebugMessageControlKHR")]
            public static void DebugMessageControl(OpenTK.Graphics.ES11.All source, OpenTK.Graphics.ES11.All type, OpenTK.Graphics.ES11.All severity, int count, int[] ids, bool enabled) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: KHR_debug]
            /// Control the reporting of debug messages in a debug context
            /// </summary>
            /// <param name="source">
            /// The source of debug messages to enable or disable.
            /// </param>
            /// <param name="type">
            /// The type of debug messages to enable or disable.
            /// </param>
            /// <param name="severity">
            /// The severity of debug messages to enable or disable.
            /// </param>
            /// <param name="count">
            /// The length of the array ids.
            /// </param>
            /// <param name="ids">
            /// The address of an array of unsigned integers contianing the ids of the messages to enable or disable.
            /// </param>
            /// <param name="enabled">
            /// A Boolean flag determining whether the selected messages should be enabled or disabled.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glDebugMessageControlKHR")]
            public static void DebugMessageControl(OpenTK.Graphics.ES11.All source, OpenTK.Graphics.ES11.All type, OpenTK.Graphics.ES11.All severity, int count, ref int ids, bool enabled) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: KHR_debug]
            /// Control the reporting of debug messages in a debug context
            /// </summary>
            /// <param name="source">
            /// The source of debug messages to enable or disable.
            /// </param>
            /// <param name="type">
            /// The type of debug messages to enable or disable.
            /// </param>
            /// <param name="severity">
            /// The severity of debug messages to enable or disable.
            /// </param>
            /// <param name="count">
            /// The length of the array ids.
            /// </param>
            /// <param name="ids">
            /// The address of an array of unsigned integers contianing the ids of the messages to enable or disable.
            /// </param>
            /// <param name="enabled">
            /// A Boolean flag determining whether the selected messages should be enabled or disabled.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glDebugMessageControlKHR")]
            public static unsafe void DebugMessageControl(OpenTK.Graphics.ES11.All source, OpenTK.Graphics.ES11.All type, OpenTK.Graphics.ES11.All severity, int count, int* ids, bool enabled) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: KHR_debug]
            /// Control the reporting of debug messages in a debug context
            /// </summary>
            /// <param name="source">
            /// The source of debug messages to enable or disable.
            /// </param>
            /// <param name="type">
            /// The type of debug messages to enable or disable.
            /// </param>
            /// <param name="severity">
            /// The severity of debug messages to enable or disable.
            /// </param>
            /// <param name="count">
            /// The length of the array ids.
            /// </param>
            /// <param name="ids">
            /// The address of an array of unsigned integers contianing the ids of the messages to enable or disable.
            /// </param>
            /// <param name="enabled">
            /// A Boolean flag determining whether the selected messages should be enabled or disabled.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glDebugMessageControlKHR")]
            public static void DebugMessageControl(OpenTK.Graphics.ES11.All source, OpenTK.Graphics.ES11.All type, OpenTK.Graphics.ES11.All severity, int count, uint[] ids, bool enabled) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: KHR_debug]
            /// Control the reporting of debug messages in a debug context
            /// </summary>
            /// <param name="source">
            /// The source of debug messages to enable or disable.
            /// </param>
            /// <param name="type">
            /// The type of debug messages to enable or disable.
            /// </param>
            /// <param name="severity">
            /// The severity of debug messages to enable or disable.
            /// </param>
            /// <param name="count">
            /// The length of the array ids.
            /// </param>
            /// <param name="ids">
            /// The address of an array of unsigned integers contianing the ids of the messages to enable or disable.
            /// </param>
            /// <param name="enabled">
            /// A Boolean flag determining whether the selected messages should be enabled or disabled.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glDebugMessageControlKHR")]
            public static void DebugMessageControl(OpenTK.Graphics.ES11.All source, OpenTK.Graphics.ES11.All type, OpenTK.Graphics.ES11.All severity, int count, ref uint ids, bool enabled) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: KHR_debug]
            /// Control the reporting of debug messages in a debug context
            /// </summary>
            /// <param name="source">
            /// The source of debug messages to enable or disable.
            /// </param>
            /// <param name="type">
            /// The type of debug messages to enable or disable.
            /// </param>
            /// <param name="severity">
            /// The severity of debug messages to enable or disable.
            /// </param>
            /// <param name="count">
            /// The length of the array ids.
            /// </param>
            /// <param name="ids">
            /// The address of an array of unsigned integers contianing the ids of the messages to enable or disable.
            /// </param>
            /// <param name="enabled">
            /// A Boolean flag determining whether the selected messages should be enabled or disabled.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glDebugMessageControlKHR")]
            public static unsafe void DebugMessageControl(OpenTK.Graphics.ES11.All source, OpenTK.Graphics.ES11.All type, OpenTK.Graphics.ES11.All severity, int count, uint* ids, bool enabled) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: KHR_debug]
            /// Control the reporting of debug messages in a debug context
            /// </summary>
            /// <param name="source">
            /// The source of debug messages to enable or disable.
            /// </param>
            /// <param name="type">
            /// The type of debug messages to enable or disable.
            /// </param>
            /// <param name="severity">
            /// The severity of debug messages to enable or disable.
            /// </param>
            /// <param name="count">
            /// The length of the array ids.
            /// </param>
            /// <param name="ids">
            /// The address of an array of unsigned integers contianing the ids of the messages to enable or disable.
            /// </param>
            /// <param name="enabled">
            /// A Boolean flag determining whether the selected messages should be enabled or disabled.
            /// </param>
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glDebugMessageControlKHR")]
            public static void DebugMessageControl(OpenTK.Graphics.ES11.DebugSource source, OpenTK.Graphics.ES11.DebugType type, OpenTK.Graphics.ES11.DebugSeverity severity, int count, int[] ids, bool enabled) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: KHR_debug]
            /// Control the reporting of debug messages in a debug context
            /// </summary>
            /// <param name="source">
            /// The source of debug messages to enable or disable.
            /// </param>
            /// <param name="type">
            /// The type of debug messages to enable or disable.
            /// </param>
            /// <param name="severity">
            /// The severity of debug messages to enable or disable.
            /// </param>
            /// <param name="count">
            /// The length of the array ids.
            /// </param>
            /// <param name="ids">
            /// The address of an array of unsigned integers contianing the ids of the messages to enable or disable.
            /// </param>
            /// <param name="enabled">
            /// A Boolean flag determining whether the selected messages should be enabled or disabled.
            /// </param>
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glDebugMessageControlKHR")]
            public static void DebugMessageControl(OpenTK.Graphics.ES11.DebugSource source, OpenTK.Graphics.ES11.DebugType type, OpenTK.Graphics.ES11.DebugSeverity severity, int count, ref int ids, bool enabled) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: KHR_debug]
            /// Control the reporting of debug messages in a debug context
            /// </summary>
            /// <param name="source">
            /// The source of debug messages to enable or disable.
            /// </param>
            /// <param name="type">
            /// The type of debug messages to enable or disable.
            /// </param>
            /// <param name="severity">
            /// The severity of debug messages to enable or disable.
            /// </param>
            /// <param name="count">
            /// The length of the array ids.
            /// </param>
            /// <param name="ids">
            /// The address of an array of unsigned integers contianing the ids of the messages to enable or disable.
            /// </param>
            /// <param name="enabled">
            /// A Boolean flag determining whether the selected messages should be enabled or disabled.
            /// </param>
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glDebugMessageControlKHR")]
            public static unsafe void DebugMessageControl(OpenTK.Graphics.ES11.DebugSource source, OpenTK.Graphics.ES11.DebugType type, OpenTK.Graphics.ES11.DebugSeverity severity, int count, int* ids, bool enabled) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: KHR_debug]
            /// Control the reporting of debug messages in a debug context
            /// </summary>
            /// <param name="source">
            /// The source of debug messages to enable or disable.
            /// </param>
            /// <param name="type">
            /// The type of debug messages to enable or disable.
            /// </param>
            /// <param name="severity">
            /// The severity of debug messages to enable or disable.
            /// </param>
            /// <param name="count">
            /// The length of the array ids.
            /// </param>
            /// <param name="ids">
            /// The address of an array of unsigned integers contianing the ids of the messages to enable or disable.
            /// </param>
            /// <param name="enabled">
            /// A Boolean flag determining whether the selected messages should be enabled or disabled.
            /// </param>
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glDebugMessageControlKHR")]
            public static void DebugMessageControl(OpenTK.Graphics.ES11.DebugSource source, OpenTK.Graphics.ES11.DebugType type, OpenTK.Graphics.ES11.DebugSeverity severity, int count, uint[] ids, bool enabled) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: KHR_debug]
            /// Control the reporting of debug messages in a debug context
            /// </summary>
            /// <param name="source">
            /// The source of debug messages to enable or disable.
            /// </param>
            /// <param name="type">
            /// The type of debug messages to enable or disable.
            /// </param>
            /// <param name="severity">
            /// The severity of debug messages to enable or disable.
            /// </param>
            /// <param name="count">
            /// The length of the array ids.
            /// </param>
            /// <param name="ids">
            /// The address of an array of unsigned integers contianing the ids of the messages to enable or disable.
            /// </param>
            /// <param name="enabled">
            /// A Boolean flag determining whether the selected messages should be enabled or disabled.
            /// </param>
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glDebugMessageControlKHR")]
            public static void DebugMessageControl(OpenTK.Graphics.ES11.DebugSource source, OpenTK.Graphics.ES11.DebugType type, OpenTK.Graphics.ES11.DebugSeverity severity, int count, ref uint ids, bool enabled) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: KHR_debug]
            /// Control the reporting of debug messages in a debug context
            /// </summary>
            /// <param name="source">
            /// The source of debug messages to enable or disable.
            /// </param>
            /// <param name="type">
            /// The type of debug messages to enable or disable.
            /// </param>
            /// <param name="severity">
            /// The severity of debug messages to enable or disable.
            /// </param>
            /// <param name="count">
            /// The length of the array ids.
            /// </param>
            /// <param name="ids">
            /// The address of an array of unsigned integers contianing the ids of the messages to enable or disable.
            /// </param>
            /// <param name="enabled">
            /// A Boolean flag determining whether the selected messages should be enabled or disabled.
            /// </param>
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glDebugMessageControlKHR")]
            public static unsafe void DebugMessageControl(OpenTK.Graphics.ES11.DebugSource source, OpenTK.Graphics.ES11.DebugType type, OpenTK.Graphics.ES11.DebugSeverity severity, int count, uint* ids, bool enabled) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: KHR_debug]
            /// Inject an application-supplied message into the debug message queue
            /// </summary>
            /// <param name="source">
            /// The source of the debug message to insert.
            /// </param>
            /// <param name="type">
            /// The type of the debug message insert.
            /// </param>
            /// <param name="id">
            /// The user-supplied identifier of the message to insert.
            /// </param>
            /// <param name="severity">
            /// The severity of the debug messages to insert.
            /// </param>
            /// <param name="length">
            /// The length string contained in the character array whose address is given by message.
            /// </param>
            /// <param name="buf">
            /// The address of a character array containing the message to insert.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glDebugMessageInsertKHR")]
            public static void DebugMessageInsert(OpenTK.Graphics.ES11.All source, OpenTK.Graphics.ES11.All type, int id, OpenTK.Graphics.ES11.All severity, int length, String buf) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: KHR_debug]
            /// Inject an application-supplied message into the debug message queue
            /// </summary>
            /// <param name="source">
            /// The source of the debug message to insert.
            /// </param>
            /// <param name="type">
            /// The type of the debug message insert.
            /// </param>
            /// <param name="id">
            /// The user-supplied identifier of the message to insert.
            /// </param>
            /// <param name="severity">
            /// The severity of the debug messages to insert.
            /// </param>
            /// <param name="length">
            /// The length string contained in the character array whose address is given by message.
            /// </param>
            /// <param name="buf">
            /// The address of a character array containing the message to insert.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glDebugMessageInsertKHR")]
            public static void DebugMessageInsert(OpenTK.Graphics.ES11.All source, OpenTK.Graphics.ES11.All type, uint id, OpenTK.Graphics.ES11.All severity, int length, String buf) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: KHR_debug]
            /// Inject an application-supplied message into the debug message queue
            /// </summary>
            /// <param name="source">
            /// The source of the debug message to insert.
            /// </param>
            /// <param name="type">
            /// The type of the debug message insert.
            /// </param>
            /// <param name="id">
            /// The user-supplied identifier of the message to insert.
            /// </param>
            /// <param name="severity">
            /// The severity of the debug messages to insert.
            /// </param>
            /// <param name="length">
            /// The length string contained in the character array whose address is given by message.
            /// </param>
            /// <param name="buf">
            /// The address of a character array containing the message to insert.
            /// </param>
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glDebugMessageInsertKHR")]
            public static void DebugMessageInsert(OpenTK.Graphics.ES11.DebugSource source, OpenTK.Graphics.ES11.DebugType type, int id, OpenTK.Graphics.ES11.DebugSeverity severity, int length, String buf) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: KHR_debug]
            /// Inject an application-supplied message into the debug message queue
            /// </summary>
            /// <param name="source">
            /// The source of the debug message to insert.
            /// </param>
            /// <param name="type">
            /// The type of the debug message insert.
            /// </param>
            /// <param name="id">
            /// The user-supplied identifier of the message to insert.
            /// </param>
            /// <param name="severity">
            /// The severity of the debug messages to insert.
            /// </param>
            /// <param name="length">
            /// The length string contained in the character array whose address is given by message.
            /// </param>
            /// <param name="buf">
            /// The address of a character array containing the message to insert.
            /// </param>
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glDebugMessageInsertKHR")]
            public static void DebugMessageInsert(OpenTK.Graphics.ES11.DebugSource source, OpenTK.Graphics.ES11.DebugType type, uint id, OpenTK.Graphics.ES11.DebugSeverity severity, int length, String buf) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: KHR_debug]
            /// Retrieve messages from the debug message log
            /// </summary>
            /// <param name="count">
            /// The number of debug messages to retrieve from the log.
            /// </param>
            /// <param name="bufSize">
            /// The size of the buffer whose address is given by messageLog.
            /// </param>
            /// <param name="sources">
            /// [length: count]
            /// The address of an array of variables to receive the sources of the retrieved messages.
            /// </param>
            /// <param name="types">
            /// [length: count]
            /// The address of an array of variables to receive the types of the retrieved messages.
            /// </param>
            /// <param name="ids">
            /// [length: count]
            /// The address of an array of unsigned integers to receive the ids of the retrieved messages.
            /// </param>
            /// <param name="severities">
            /// [length: count]
            /// The address of an array of variables to receive the severites of the retrieved messages.
            /// </param>
            /// <param name="lengths">
            /// [length: count]
            /// The address of an array of variables to receive the lengths of the received messages.
            /// </param>
            /// <param name="messageLog">
            /// [length: bufSize]
            /// The address of an array of characters that will receive the messages.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetDebugMessageLogKHR")]
            public static int GetDebugMessageLog(int count, int bufSize, [OutAttribute, CountAttribute(Parameter = "count")] OpenTK.Graphics.ES11.All[] sources, [OutAttribute, CountAttribute(Parameter = "count")] OpenTK.Graphics.ES11.All[] types, [OutAttribute, CountAttribute(Parameter = "count")] int[] ids, [OutAttribute, CountAttribute(Parameter = "count")] OpenTK.Graphics.ES11.All[] severities, [OutAttribute, CountAttribute(Parameter = "count")] int[] lengths, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String messageLog) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: KHR_debug]
            /// Retrieve messages from the debug message log
            /// </summary>
            /// <param name="count">
            /// The number of debug messages to retrieve from the log.
            /// </param>
            /// <param name="bufSize">
            /// The size of the buffer whose address is given by messageLog.
            /// </param>
            /// <param name="sources">
            /// [length: count]
            /// The address of an array of variables to receive the sources of the retrieved messages.
            /// </param>
            /// <param name="types">
            /// [length: count]
            /// The address of an array of variables to receive the types of the retrieved messages.
            /// </param>
            /// <param name="ids">
            /// [length: count]
            /// The address of an array of unsigned integers to receive the ids of the retrieved messages.
            /// </param>
            /// <param name="severities">
            /// [length: count]
            /// The address of an array of variables to receive the severites of the retrieved messages.
            /// </param>
            /// <param name="lengths">
            /// [length: count]
            /// The address of an array of variables to receive the lengths of the received messages.
            /// </param>
            /// <param name="messageLog">
            /// [length: bufSize]
            /// The address of an array of characters that will receive the messages.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetDebugMessageLogKHR")]
            public static int GetDebugMessageLog(int count, int bufSize, [OutAttribute, CountAttribute(Parameter = "count")] out OpenTK.Graphics.ES11.All sources, [OutAttribute, CountAttribute(Parameter = "count")] out OpenTK.Graphics.ES11.All types, [OutAttribute, CountAttribute(Parameter = "count")] out int ids, [OutAttribute, CountAttribute(Parameter = "count")] out OpenTK.Graphics.ES11.All severities, [OutAttribute, CountAttribute(Parameter = "count")] out int lengths, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String messageLog) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: KHR_debug]
            /// Retrieve messages from the debug message log
            /// </summary>
            /// <param name="count">
            /// The number of debug messages to retrieve from the log.
            /// </param>
            /// <param name="bufSize">
            /// The size of the buffer whose address is given by messageLog.
            /// </param>
            /// <param name="sources">
            /// [length: count]
            /// The address of an array of variables to receive the sources of the retrieved messages.
            /// </param>
            /// <param name="types">
            /// [length: count]
            /// The address of an array of variables to receive the types of the retrieved messages.
            /// </param>
            /// <param name="ids">
            /// [length: count]
            /// The address of an array of unsigned integers to receive the ids of the retrieved messages.
            /// </param>
            /// <param name="severities">
            /// [length: count]
            /// The address of an array of variables to receive the severites of the retrieved messages.
            /// </param>
            /// <param name="lengths">
            /// [length: count]
            /// The address of an array of variables to receive the lengths of the received messages.
            /// </param>
            /// <param name="messageLog">
            /// [length: bufSize]
            /// The address of an array of characters that will receive the messages.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetDebugMessageLogKHR")]
            public static unsafe int GetDebugMessageLog(int count, int bufSize, [OutAttribute, CountAttribute(Parameter = "count")] OpenTK.Graphics.ES11.All* sources, [OutAttribute, CountAttribute(Parameter = "count")] OpenTK.Graphics.ES11.All* types, [OutAttribute, CountAttribute(Parameter = "count")] int* ids, [OutAttribute, CountAttribute(Parameter = "count")] OpenTK.Graphics.ES11.All* severities, [OutAttribute, CountAttribute(Parameter = "count")] int* lengths, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String messageLog) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: KHR_debug]
            /// Retrieve messages from the debug message log
            /// </summary>
            /// <param name="count">
            /// The number of debug messages to retrieve from the log.
            /// </param>
            /// <param name="bufSize">
            /// The size of the buffer whose address is given by messageLog.
            /// </param>
            /// <param name="sources">
            /// [length: count]
            /// The address of an array of variables to receive the sources of the retrieved messages.
            /// </param>
            /// <param name="types">
            /// [length: count]
            /// The address of an array of variables to receive the types of the retrieved messages.
            /// </param>
            /// <param name="ids">
            /// [length: count]
            /// The address of an array of unsigned integers to receive the ids of the retrieved messages.
            /// </param>
            /// <param name="severities">
            /// [length: count]
            /// The address of an array of variables to receive the severites of the retrieved messages.
            /// </param>
            /// <param name="lengths">
            /// [length: count]
            /// The address of an array of variables to receive the lengths of the received messages.
            /// </param>
            /// <param name="messageLog">
            /// [length: bufSize]
            /// The address of an array of characters that will receive the messages.
            /// </param>
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetDebugMessageLogKHR")]
            public static int GetDebugMessageLog(int count, int bufSize, [OutAttribute, CountAttribute(Parameter = "count")] OpenTK.Graphics.ES11.DebugSource[] sources, [OutAttribute, CountAttribute(Parameter = "count")] OpenTK.Graphics.ES11.DebugType[] types, [OutAttribute, CountAttribute(Parameter = "count")] int[] ids, [OutAttribute, CountAttribute(Parameter = "count")] OpenTK.Graphics.ES11.DebugSeverity[] severities, [OutAttribute, CountAttribute(Parameter = "count")] int[] lengths, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String messageLog) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: KHR_debug]
            /// Retrieve messages from the debug message log
            /// </summary>
            /// <param name="count">
            /// The number of debug messages to retrieve from the log.
            /// </param>
            /// <param name="bufSize">
            /// The size of the buffer whose address is given by messageLog.
            /// </param>
            /// <param name="sources">
            /// [length: count]
            /// The address of an array of variables to receive the sources of the retrieved messages.
            /// </param>
            /// <param name="types">
            /// [length: count]
            /// The address of an array of variables to receive the types of the retrieved messages.
            /// </param>
            /// <param name="ids">
            /// [length: count]
            /// The address of an array of unsigned integers to receive the ids of the retrieved messages.
            /// </param>
            /// <param name="severities">
            /// [length: count]
            /// The address of an array of variables to receive the severites of the retrieved messages.
            /// </param>
            /// <param name="lengths">
            /// [length: count]
            /// The address of an array of variables to receive the lengths of the received messages.
            /// </param>
            /// <param name="messageLog">
            /// [length: bufSize]
            /// The address of an array of characters that will receive the messages.
            /// </param>
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetDebugMessageLogKHR")]
            public static int GetDebugMessageLog(int count, int bufSize, [OutAttribute, CountAttribute(Parameter = "count")] out OpenTK.Graphics.ES11.DebugSource sources, [OutAttribute, CountAttribute(Parameter = "count")] out OpenTK.Graphics.ES11.DebugType types, [OutAttribute, CountAttribute(Parameter = "count")] out int ids, [OutAttribute, CountAttribute(Parameter = "count")] out OpenTK.Graphics.ES11.DebugSeverity severities, [OutAttribute, CountAttribute(Parameter = "count")] out int lengths, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String messageLog) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: KHR_debug]
            /// Retrieve messages from the debug message log
            /// </summary>
            /// <param name="count">
            /// The number of debug messages to retrieve from the log.
            /// </param>
            /// <param name="bufSize">
            /// The size of the buffer whose address is given by messageLog.
            /// </param>
            /// <param name="sources">
            /// [length: count]
            /// The address of an array of variables to receive the sources of the retrieved messages.
            /// </param>
            /// <param name="types">
            /// [length: count]
            /// The address of an array of variables to receive the types of the retrieved messages.
            /// </param>
            /// <param name="ids">
            /// [length: count]
            /// The address of an array of unsigned integers to receive the ids of the retrieved messages.
            /// </param>
            /// <param name="severities">
            /// [length: count]
            /// The address of an array of variables to receive the severites of the retrieved messages.
            /// </param>
            /// <param name="lengths">
            /// [length: count]
            /// The address of an array of variables to receive the lengths of the received messages.
            /// </param>
            /// <param name="messageLog">
            /// [length: bufSize]
            /// The address of an array of characters that will receive the messages.
            /// </param>
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetDebugMessageLogKHR")]
            public static unsafe int GetDebugMessageLog(int count, int bufSize, [OutAttribute, CountAttribute(Parameter = "count")] OpenTK.Graphics.ES11.DebugSource* sources, [OutAttribute, CountAttribute(Parameter = "count")] OpenTK.Graphics.ES11.DebugType* types, [OutAttribute, CountAttribute(Parameter = "count")] int* ids, [OutAttribute, CountAttribute(Parameter = "count")] OpenTK.Graphics.ES11.DebugSeverity* severities, [OutAttribute, CountAttribute(Parameter = "count")] int* lengths, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String messageLog) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: KHR_debug]
            /// Retrieve messages from the debug message log
            /// </summary>
            /// <param name="count">
            /// The number of debug messages to retrieve from the log.
            /// </param>
            /// <param name="bufSize">
            /// The size of the buffer whose address is given by messageLog.
            /// </param>
            /// <param name="sources">
            /// [length: count]
            /// The address of an array of variables to receive the sources of the retrieved messages.
            /// </param>
            /// <param name="types">
            /// [length: count]
            /// The address of an array of variables to receive the types of the retrieved messages.
            /// </param>
            /// <param name="ids">
            /// [length: count]
            /// The address of an array of unsigned integers to receive the ids of the retrieved messages.
            /// </param>
            /// <param name="severities">
            /// [length: count]
            /// The address of an array of variables to receive the severites of the retrieved messages.
            /// </param>
            /// <param name="lengths">
            /// [length: count]
            /// The address of an array of variables to receive the lengths of the received messages.
            /// </param>
            /// <param name="messageLog">
            /// [length: bufSize]
            /// The address of an array of characters that will receive the messages.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetDebugMessageLogKHR")]
            public static int GetDebugMessageLog(uint count, int bufSize, [OutAttribute, CountAttribute(Parameter = "count")] OpenTK.Graphics.ES11.All[] sources, [OutAttribute, CountAttribute(Parameter = "count")] OpenTK.Graphics.ES11.All[] types, [OutAttribute, CountAttribute(Parameter = "count")] uint[] ids, [OutAttribute, CountAttribute(Parameter = "count")] OpenTK.Graphics.ES11.All[] severities, [OutAttribute, CountAttribute(Parameter = "count")] int[] lengths, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String messageLog) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: KHR_debug]
            /// Retrieve messages from the debug message log
            /// </summary>
            /// <param name="count">
            /// The number of debug messages to retrieve from the log.
            /// </param>
            /// <param name="bufSize">
            /// The size of the buffer whose address is given by messageLog.
            /// </param>
            /// <param name="sources">
            /// [length: count]
            /// The address of an array of variables to receive the sources of the retrieved messages.
            /// </param>
            /// <param name="types">
            /// [length: count]
            /// The address of an array of variables to receive the types of the retrieved messages.
            /// </param>
            /// <param name="ids">
            /// [length: count]
            /// The address of an array of unsigned integers to receive the ids of the retrieved messages.
            /// </param>
            /// <param name="severities">
            /// [length: count]
            /// The address of an array of variables to receive the severites of the retrieved messages.
            /// </param>
            /// <param name="lengths">
            /// [length: count]
            /// The address of an array of variables to receive the lengths of the received messages.
            /// </param>
            /// <param name="messageLog">
            /// [length: bufSize]
            /// The address of an array of characters that will receive the messages.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetDebugMessageLogKHR")]
            public static int GetDebugMessageLog(uint count, int bufSize, [OutAttribute, CountAttribute(Parameter = "count")] out OpenTK.Graphics.ES11.All sources, [OutAttribute, CountAttribute(Parameter = "count")] out OpenTK.Graphics.ES11.All types, [OutAttribute, CountAttribute(Parameter = "count")] out uint ids, [OutAttribute, CountAttribute(Parameter = "count")] out OpenTK.Graphics.ES11.All severities, [OutAttribute, CountAttribute(Parameter = "count")] out int lengths, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String messageLog) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: KHR_debug]
            /// Retrieve messages from the debug message log
            /// </summary>
            /// <param name="count">
            /// The number of debug messages to retrieve from the log.
            /// </param>
            /// <param name="bufSize">
            /// The size of the buffer whose address is given by messageLog.
            /// </param>
            /// <param name="sources">
            /// [length: count]
            /// The address of an array of variables to receive the sources of the retrieved messages.
            /// </param>
            /// <param name="types">
            /// [length: count]
            /// The address of an array of variables to receive the types of the retrieved messages.
            /// </param>
            /// <param name="ids">
            /// [length: count]
            /// The address of an array of unsigned integers to receive the ids of the retrieved messages.
            /// </param>
            /// <param name="severities">
            /// [length: count]
            /// The address of an array of variables to receive the severites of the retrieved messages.
            /// </param>
            /// <param name="lengths">
            /// [length: count]
            /// The address of an array of variables to receive the lengths of the received messages.
            /// </param>
            /// <param name="messageLog">
            /// [length: bufSize]
            /// The address of an array of characters that will receive the messages.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetDebugMessageLogKHR")]
            public static unsafe int GetDebugMessageLog(uint count, int bufSize, [OutAttribute, CountAttribute(Parameter = "count")] OpenTK.Graphics.ES11.All* sources, [OutAttribute, CountAttribute(Parameter = "count")] OpenTK.Graphics.ES11.All* types, [OutAttribute, CountAttribute(Parameter = "count")] uint* ids, [OutAttribute, CountAttribute(Parameter = "count")] OpenTK.Graphics.ES11.All* severities, [OutAttribute, CountAttribute(Parameter = "count")] int* lengths, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String messageLog) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: KHR_debug]
            /// Retrieve messages from the debug message log
            /// </summary>
            /// <param name="count">
            /// The number of debug messages to retrieve from the log.
            /// </param>
            /// <param name="bufSize">
            /// The size of the buffer whose address is given by messageLog.
            /// </param>
            /// <param name="sources">
            /// [length: count]
            /// The address of an array of variables to receive the sources of the retrieved messages.
            /// </param>
            /// <param name="types">
            /// [length: count]
            /// The address of an array of variables to receive the types of the retrieved messages.
            /// </param>
            /// <param name="ids">
            /// [length: count]
            /// The address of an array of unsigned integers to receive the ids of the retrieved messages.
            /// </param>
            /// <param name="severities">
            /// [length: count]
            /// The address of an array of variables to receive the severites of the retrieved messages.
            /// </param>
            /// <param name="lengths">
            /// [length: count]
            /// The address of an array of variables to receive the lengths of the received messages.
            /// </param>
            /// <param name="messageLog">
            /// [length: bufSize]
            /// The address of an array of characters that will receive the messages.
            /// </param>
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetDebugMessageLogKHR")]
            public static int GetDebugMessageLog(uint count, int bufSize, [OutAttribute, CountAttribute(Parameter = "count")] OpenTK.Graphics.ES11.DebugSource[] sources, [OutAttribute, CountAttribute(Parameter = "count")] OpenTK.Graphics.ES11.DebugType[] types, [OutAttribute, CountAttribute(Parameter = "count")] uint[] ids, [OutAttribute, CountAttribute(Parameter = "count")] OpenTK.Graphics.ES11.DebugSeverity[] severities, [OutAttribute, CountAttribute(Parameter = "count")] int[] lengths, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String messageLog) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: KHR_debug]
            /// Retrieve messages from the debug message log
            /// </summary>
            /// <param name="count">
            /// The number of debug messages to retrieve from the log.
            /// </param>
            /// <param name="bufSize">
            /// The size of the buffer whose address is given by messageLog.
            /// </param>
            /// <param name="sources">
            /// [length: count]
            /// The address of an array of variables to receive the sources of the retrieved messages.
            /// </param>
            /// <param name="types">
            /// [length: count]
            /// The address of an array of variables to receive the types of the retrieved messages.
            /// </param>
            /// <param name="ids">
            /// [length: count]
            /// The address of an array of unsigned integers to receive the ids of the retrieved messages.
            /// </param>
            /// <param name="severities">
            /// [length: count]
            /// The address of an array of variables to receive the severites of the retrieved messages.
            /// </param>
            /// <param name="lengths">
            /// [length: count]
            /// The address of an array of variables to receive the lengths of the received messages.
            /// </param>
            /// <param name="messageLog">
            /// [length: bufSize]
            /// The address of an array of characters that will receive the messages.
            /// </param>
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetDebugMessageLogKHR")]
            public static int GetDebugMessageLog(uint count, int bufSize, [OutAttribute, CountAttribute(Parameter = "count")] out OpenTK.Graphics.ES11.DebugSource sources, [OutAttribute, CountAttribute(Parameter = "count")] out OpenTK.Graphics.ES11.DebugType types, [OutAttribute, CountAttribute(Parameter = "count")] out uint ids, [OutAttribute, CountAttribute(Parameter = "count")] out OpenTK.Graphics.ES11.DebugSeverity severities, [OutAttribute, CountAttribute(Parameter = "count")] out int lengths, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String messageLog) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: KHR_debug]
            /// Retrieve messages from the debug message log
            /// </summary>
            /// <param name="count">
            /// The number of debug messages to retrieve from the log.
            /// </param>
            /// <param name="bufSize">
            /// The size of the buffer whose address is given by messageLog.
            /// </param>
            /// <param name="sources">
            /// [length: count]
            /// The address of an array of variables to receive the sources of the retrieved messages.
            /// </param>
            /// <param name="types">
            /// [length: count]
            /// The address of an array of variables to receive the types of the retrieved messages.
            /// </param>
            /// <param name="ids">
            /// [length: count]
            /// The address of an array of unsigned integers to receive the ids of the retrieved messages.
            /// </param>
            /// <param name="severities">
            /// [length: count]
            /// The address of an array of variables to receive the severites of the retrieved messages.
            /// </param>
            /// <param name="lengths">
            /// [length: count]
            /// The address of an array of variables to receive the lengths of the received messages.
            /// </param>
            /// <param name="messageLog">
            /// [length: bufSize]
            /// The address of an array of characters that will receive the messages.
            /// </param>
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetDebugMessageLogKHR")]
            public static unsafe int GetDebugMessageLog(uint count, int bufSize, [OutAttribute, CountAttribute(Parameter = "count")] OpenTK.Graphics.ES11.DebugSource* sources, [OutAttribute, CountAttribute(Parameter = "count")] OpenTK.Graphics.ES11.DebugType* types, [OutAttribute, CountAttribute(Parameter = "count")] uint* ids, [OutAttribute, CountAttribute(Parameter = "count")] OpenTK.Graphics.ES11.DebugSeverity* severities, [OutAttribute, CountAttribute(Parameter = "count")] int* lengths, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String messageLog) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: KHR_debug]
            /// Retrieve the label of a named object identified within a namespace
            /// </summary>
            /// <param name="identifier">
            /// The namespace from which the name of the object is allocated.
            /// </param>
            /// <param name="name">
            /// The name of the object whose label to retrieve.
            /// </param>
            /// <param name="bufSize">
            /// The length of the buffer whose address is in label.
            /// </param>
            /// <param name="length">
            /// The address of a variable to receive the length of the object label.
            /// </param>
            /// <param name="label">
            /// [length: bufSize]
            /// The address of a string that will receive the object label.
            /// </param>
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetObjectLabelKHR")]
            public static void GetObjectLabel(OpenTK.Graphics.ES11.All identifier, int name, int bufSize, [OutAttribute] int[] length, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String label) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: KHR_debug]
            /// Retrieve the label of a named object identified within a namespace
            /// </summary>
            /// <param name="identifier">
            /// The namespace from which the name of the object is allocated.
            /// </param>
            /// <param name="name">
            /// The name of the object whose label to retrieve.
            /// </param>
            /// <param name="bufSize">
            /// The length of the buffer whose address is in label.
            /// </param>
            /// <param name="length">
            /// The address of a variable to receive the length of the object label.
            /// </param>
            /// <param name="label">
            /// [length: bufSize]
            /// The address of a string that will receive the object label.
            /// </param>
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetObjectLabelKHR")]
            public static void GetObjectLabel(OpenTK.Graphics.ES11.All identifier, int name, int bufSize, [OutAttribute] out int length, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String label) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: KHR_debug]
            /// Retrieve the label of a named object identified within a namespace
            /// </summary>
            /// <param name="identifier">
            /// The namespace from which the name of the object is allocated.
            /// </param>
            /// <param name="name">
            /// The name of the object whose label to retrieve.
            /// </param>
            /// <param name="bufSize">
            /// The length of the buffer whose address is in label.
            /// </param>
            /// <param name="length">
            /// The address of a variable to receive the length of the object label.
            /// </param>
            /// <param name="label">
            /// [length: bufSize]
            /// The address of a string that will receive the object label.
            /// </param>
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetObjectLabelKHR")]
            public static unsafe void GetObjectLabel(OpenTK.Graphics.ES11.All identifier, int name, int bufSize, [OutAttribute] int* length, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String label) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: KHR_debug]
            /// Retrieve the label of a named object identified within a namespace
            /// </summary>
            /// <param name="identifier">
            /// The namespace from which the name of the object is allocated.
            /// </param>
            /// <param name="name">
            /// The name of the object whose label to retrieve.
            /// </param>
            /// <param name="bufSize">
            /// The length of the buffer whose address is in label.
            /// </param>
            /// <param name="length">
            /// The address of a variable to receive the length of the object label.
            /// </param>
            /// <param name="label">
            /// [length: bufSize]
            /// The address of a string that will receive the object label.
            /// </param>
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetObjectLabelKHR")]
            public static void GetObjectLabel(OpenTK.Graphics.ES11.All identifier, uint name, int bufSize, [OutAttribute] int[] length, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String label) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: KHR_debug]
            /// Retrieve the label of a named object identified within a namespace
            /// </summary>
            /// <param name="identifier">
            /// The namespace from which the name of the object is allocated.
            /// </param>
            /// <param name="name">
            /// The name of the object whose label to retrieve.
            /// </param>
            /// <param name="bufSize">
            /// The length of the buffer whose address is in label.
            /// </param>
            /// <param name="length">
            /// The address of a variable to receive the length of the object label.
            /// </param>
            /// <param name="label">
            /// [length: bufSize]
            /// The address of a string that will receive the object label.
            /// </param>
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetObjectLabelKHR")]
            public static void GetObjectLabel(OpenTK.Graphics.ES11.All identifier, uint name, int bufSize, [OutAttribute] out int length, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String label) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: KHR_debug]
            /// Retrieve the label of a named object identified within a namespace
            /// </summary>
            /// <param name="identifier">
            /// The namespace from which the name of the object is allocated.
            /// </param>
            /// <param name="name">
            /// The name of the object whose label to retrieve.
            /// </param>
            /// <param name="bufSize">
            /// The length of the buffer whose address is in label.
            /// </param>
            /// <param name="length">
            /// The address of a variable to receive the length of the object label.
            /// </param>
            /// <param name="label">
            /// [length: bufSize]
            /// The address of a string that will receive the object label.
            /// </param>
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetObjectLabelKHR")]
            public static unsafe void GetObjectLabel(OpenTK.Graphics.ES11.All identifier, uint name, int bufSize, [OutAttribute] int* length, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String label) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: KHR_debug]
            /// Retrieve the label of a sync object identified by a pointer
            /// </summary>
            /// <param name="ptr">
            /// The name of the sync object whose label to retrieve.
            /// </param>
            /// <param name="bufSize">
            /// The length of the buffer whose address is in label.
            /// </param>
            /// <param name="length">
            /// [length: 1]
            /// The address of a variable to receive the length of the object label.
            /// </param>
            /// <param name="label">
            /// [length: bufSize]
            /// The address of a string that will receive the object label.
            /// </param>
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetObjectPtrLabelKHR")]
            public static void GetObjectPtrLabel(IntPtr ptr, int bufSize, [OutAttribute, CountAttribute(Count = 1)] out int length, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String label) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: KHR_debug]
            /// Retrieve the label of a sync object identified by a pointer
            /// </summary>
            /// <param name="ptr">
            /// The name of the sync object whose label to retrieve.
            /// </param>
            /// <param name="bufSize">
            /// The length of the buffer whose address is in label.
            /// </param>
            /// <param name="length">
            /// [length: 1]
            /// The address of a variable to receive the length of the object label.
            /// </param>
            /// <param name="label">
            /// [length: bufSize]
            /// The address of a string that will receive the object label.
            /// </param>
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetObjectPtrLabelKHR")]
            public static unsafe void GetObjectPtrLabel(IntPtr ptr, int bufSize, [OutAttribute, CountAttribute(Count = 1)] int* length, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String label) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: KHR_debug]
            /// Retrieve the label of a sync object identified by a pointer
            /// </summary>
            /// <param name="ptr">
            /// The name of the sync object whose label to retrieve.
            /// </param>
            /// <param name="bufSize">
            /// The length of the buffer whose address is in label.
            /// </param>
            /// <param name="length">
            /// [length: 1]
            /// The address of a variable to receive the length of the object label.
            /// </param>
            /// <param name="label">
            /// [length: bufSize]
            /// The address of a string that will receive the object label.
            /// </param>
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetObjectPtrLabelKHR")]
            public static void GetObjectPtrLabel<T0>([InAttribute, OutAttribute] T0[] ptr, int bufSize, [OutAttribute, CountAttribute(Count = 1)] out int length, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String label)
                where T0 : struct
             { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: KHR_debug]
            /// Retrieve the label of a sync object identified by a pointer
            /// </summary>
            /// <param name="ptr">
            /// The name of the sync object whose label to retrieve.
            /// </param>
            /// <param name="bufSize">
            /// The length of the buffer whose address is in label.
            /// </param>
            /// <param name="length">
            /// [length: 1]
            /// The address of a variable to receive the length of the object label.
            /// </param>
            /// <param name="label">
            /// [length: bufSize]
            /// The address of a string that will receive the object label.
            /// </param>
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetObjectPtrLabelKHR")]
            public static unsafe void GetObjectPtrLabel<T0>([InAttribute, OutAttribute] T0[] ptr, int bufSize, [OutAttribute, CountAttribute(Count = 1)] int* length, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String label)
                where T0 : struct
             { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: KHR_debug]
            /// Retrieve the label of a sync object identified by a pointer
            /// </summary>
            /// <param name="ptr">
            /// The name of the sync object whose label to retrieve.
            /// </param>
            /// <param name="bufSize">
            /// The length of the buffer whose address is in label.
            /// </param>
            /// <param name="length">
            /// [length: 1]
            /// The address of a variable to receive the length of the object label.
            /// </param>
            /// <param name="label">
            /// [length: bufSize]
            /// The address of a string that will receive the object label.
            /// </param>
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetObjectPtrLabelKHR")]
            public static void GetObjectPtrLabel<T0>([InAttribute, OutAttribute] T0[,] ptr, int bufSize, [OutAttribute, CountAttribute(Count = 1)] out int length, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String label)
                where T0 : struct
             { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: KHR_debug]
            /// Retrieve the label of a sync object identified by a pointer
            /// </summary>
            /// <param name="ptr">
            /// The name of the sync object whose label to retrieve.
            /// </param>
            /// <param name="bufSize">
            /// The length of the buffer whose address is in label.
            /// </param>
            /// <param name="length">
            /// [length: 1]
            /// The address of a variable to receive the length of the object label.
            /// </param>
            /// <param name="label">
            /// [length: bufSize]
            /// The address of a string that will receive the object label.
            /// </param>
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetObjectPtrLabelKHR")]
            public static unsafe void GetObjectPtrLabel<T0>([InAttribute, OutAttribute] T0[,] ptr, int bufSize, [OutAttribute, CountAttribute(Count = 1)] int* length, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String label)
                where T0 : struct
             { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: KHR_debug]
            /// Retrieve the label of a sync object identified by a pointer
            /// </summary>
            /// <param name="ptr">
            /// The name of the sync object whose label to retrieve.
            /// </param>
            /// <param name="bufSize">
            /// The length of the buffer whose address is in label.
            /// </param>
            /// <param name="length">
            /// [length: 1]
            /// The address of a variable to receive the length of the object label.
            /// </param>
            /// <param name="label">
            /// [length: bufSize]
            /// The address of a string that will receive the object label.
            /// </param>
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetObjectPtrLabelKHR")]
            public static void GetObjectPtrLabel<T0>([InAttribute, OutAttribute] T0[,,] ptr, int bufSize, [OutAttribute, CountAttribute(Count = 1)] out int length, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String label)
                where T0 : struct
             { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: KHR_debug]
            /// Retrieve the label of a sync object identified by a pointer
            /// </summary>
            /// <param name="ptr">
            /// The name of the sync object whose label to retrieve.
            /// </param>
            /// <param name="bufSize">
            /// The length of the buffer whose address is in label.
            /// </param>
            /// <param name="length">
            /// [length: 1]
            /// The address of a variable to receive the length of the object label.
            /// </param>
            /// <param name="label">
            /// [length: bufSize]
            /// The address of a string that will receive the object label.
            /// </param>
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetObjectPtrLabelKHR")]
            public static unsafe void GetObjectPtrLabel<T0>([InAttribute, OutAttribute] T0[,,] ptr, int bufSize, [OutAttribute, CountAttribute(Count = 1)] int* length, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String label)
                where T0 : struct
             { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: KHR_debug]
            /// Retrieve the label of a sync object identified by a pointer
            /// </summary>
            /// <param name="ptr">
            /// The name of the sync object whose label to retrieve.
            /// </param>
            /// <param name="bufSize">
            /// The length of the buffer whose address is in label.
            /// </param>
            /// <param name="length">
            /// [length: 1]
            /// The address of a variable to receive the length of the object label.
            /// </param>
            /// <param name="label">
            /// [length: bufSize]
            /// The address of a string that will receive the object label.
            /// </param>
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetObjectPtrLabelKHR")]
            public static void GetObjectPtrLabel<T0>([InAttribute, OutAttribute] ref T0 ptr, int bufSize, [OutAttribute, CountAttribute(Count = 1)] out int length, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String label)
                where T0 : struct
             { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: KHR_debug]
            /// Retrieve the label of a sync object identified by a pointer
            /// </summary>
            /// <param name="ptr">
            /// The name of the sync object whose label to retrieve.
            /// </param>
            /// <param name="bufSize">
            /// The length of the buffer whose address is in label.
            /// </param>
            /// <param name="length">
            /// [length: 1]
            /// The address of a variable to receive the length of the object label.
            /// </param>
            /// <param name="label">
            /// [length: bufSize]
            /// The address of a string that will receive the object label.
            /// </param>
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetObjectPtrLabelKHR")]
            public static unsafe void GetObjectPtrLabel<T0>([InAttribute, OutAttribute] ref T0 ptr, int bufSize, [OutAttribute, CountAttribute(Count = 1)] int* length, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String label)
                where T0 : struct
             { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: KHR_debug]
            /// </summary>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// </param>
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetPointervKHR")]
            public static void GetPointer(OpenTK.Graphics.ES11.All pname, [OutAttribute] IntPtr @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: KHR_debug]
            /// </summary>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// </param>
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetPointervKHR")]
            public static void GetPointer<T1>(OpenTK.Graphics.ES11.All pname, [InAttribute, OutAttribute] T1[] @params)
                where T1 : struct
             { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: KHR_debug]
            /// </summary>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// </param>
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetPointervKHR")]
            public static void GetPointer<T1>(OpenTK.Graphics.ES11.All pname, [InAttribute, OutAttribute] T1[,] @params)
                where T1 : struct
             { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: KHR_debug]
            /// </summary>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// </param>
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetPointervKHR")]
            public static void GetPointer<T1>(OpenTK.Graphics.ES11.All pname, [InAttribute, OutAttribute] T1[,,] @params)
                where T1 : struct
             { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: KHR_debug]
            /// </summary>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// </param>
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetPointervKHR")]
            public static void GetPointer<T1>(OpenTK.Graphics.ES11.All pname, [InAttribute, OutAttribute] ref T1 @params)
                where T1 : struct
             { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: KHR_debug]
            /// Label a named object identified within a namespace
            /// </summary>
            /// <param name="identifier">
            /// The namespace from which the name of the object is allocated.
            /// </param>
            /// <param name="name">
            /// The name of the object to label.
            /// </param>
            /// <param name="length">
            /// The length of the label to be used for the object.
            /// </param>
            /// <param name="label">
            /// The address of a string containing the label to assign to the object.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glObjectLabelKHR")]
            public static void ObjectLabel(OpenTK.Graphics.ES11.All identifier, int name, int length, String label) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: KHR_debug]
            /// Label a named object identified within a namespace
            /// </summary>
            /// <param name="identifier">
            /// The namespace from which the name of the object is allocated.
            /// </param>
            /// <param name="name">
            /// The name of the object to label.
            /// </param>
            /// <param name="length">
            /// The length of the label to be used for the object.
            /// </param>
            /// <param name="label">
            /// The address of a string containing the label to assign to the object.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glObjectLabelKHR")]
            public static void ObjectLabel(OpenTK.Graphics.ES11.All identifier, uint name, int length, String label) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: KHR_debug]
            /// Label a named object identified within a namespace
            /// </summary>
            /// <param name="identifier">
            /// The namespace from which the name of the object is allocated.
            /// </param>
            /// <param name="name">
            /// The name of the object to label.
            /// </param>
            /// <param name="length">
            /// The length of the label to be used for the object.
            /// </param>
            /// <param name="label">
            /// The address of a string containing the label to assign to the object.
            /// </param>
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glObjectLabelKHR")]
            public static void ObjectLabel(OpenTK.Graphics.ES11.ObjectIdentifier identifier, int name, int length, String label) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: KHR_debug]
            /// Label a named object identified within a namespace
            /// </summary>
            /// <param name="identifier">
            /// The namespace from which the name of the object is allocated.
            /// </param>
            /// <param name="name">
            /// The name of the object to label.
            /// </param>
            /// <param name="length">
            /// The length of the label to be used for the object.
            /// </param>
            /// <param name="label">
            /// The address of a string containing the label to assign to the object.
            /// </param>
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glObjectLabelKHR")]
            public static void ObjectLabel(OpenTK.Graphics.ES11.ObjectIdentifier identifier, uint name, int length, String label) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: KHR_debug]
            /// Label a a sync object identified by a pointer
            /// </summary>
            /// <param name="ptr">
            /// A pointer identifying a sync object.
            /// </param>
            /// <param name="length">
            /// The length of the label to be used for the object.
            /// </param>
            /// <param name="label">
            /// The address of a string containing the label to assign to the object.
            /// </param>
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glObjectPtrLabelKHR")]
            public static void ObjectPtrLabel(IntPtr ptr, int length, String label) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: KHR_debug]
            /// Label a a sync object identified by a pointer
            /// </summary>
            /// <param name="ptr">
            /// A pointer identifying a sync object.
            /// </param>
            /// <param name="length">
            /// The length of the label to be used for the object.
            /// </param>
            /// <param name="label">
            /// The address of a string containing the label to assign to the object.
            /// </param>
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glObjectPtrLabelKHR")]
            public static void ObjectPtrLabel<T0>([InAttribute, OutAttribute] T0[] ptr, int length, String label)
                where T0 : struct
             { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: KHR_debug]
            /// Label a a sync object identified by a pointer
            /// </summary>
            /// <param name="ptr">
            /// A pointer identifying a sync object.
            /// </param>
            /// <param name="length">
            /// The length of the label to be used for the object.
            /// </param>
            /// <param name="label">
            /// The address of a string containing the label to assign to the object.
            /// </param>
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glObjectPtrLabelKHR")]
            public static void ObjectPtrLabel<T0>([InAttribute, OutAttribute] T0[,] ptr, int length, String label)
                where T0 : struct
             { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: KHR_debug]
            /// Label a a sync object identified by a pointer
            /// </summary>
            /// <param name="ptr">
            /// A pointer identifying a sync object.
            /// </param>
            /// <param name="length">
            /// The length of the label to be used for the object.
            /// </param>
            /// <param name="label">
            /// The address of a string containing the label to assign to the object.
            /// </param>
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glObjectPtrLabelKHR")]
            public static void ObjectPtrLabel<T0>([InAttribute, OutAttribute] T0[,,] ptr, int length, String label)
                where T0 : struct
             { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: KHR_debug]
            /// Label a a sync object identified by a pointer
            /// </summary>
            /// <param name="ptr">
            /// A pointer identifying a sync object.
            /// </param>
            /// <param name="length">
            /// The length of the label to be used for the object.
            /// </param>
            /// <param name="label">
            /// The address of a string containing the label to assign to the object.
            /// </param>
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glObjectPtrLabelKHR")]
            public static void ObjectPtrLabel<T0>([InAttribute, OutAttribute] ref T0 ptr, int length, String label)
                where T0 : struct
             { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: KHR_debug]
            /// Pop the active debug group
            /// </summary>
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glPopDebugGroupKHR")]
            public static void PopDebugGroup() { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: KHR_debug]
            /// Push a named debug group into the command stream
            /// </summary>
            /// <param name="source">
            /// The source of the debug message.
            /// </param>
            /// <param name="id">
            /// The identifier of the message.
            /// </param>
            /// <param name="length">
            /// The length of the message to be sent to the debug output stream.
            /// </param>
            /// <param name="message">
            /// The a string containing the message to be sent to the debug output stream.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glPushDebugGroupKHR")]
            public static void PushDebugGroup(OpenTK.Graphics.ES11.All source, int id, int length, String message) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: KHR_debug]
            /// Push a named debug group into the command stream
            /// </summary>
            /// <param name="source">
            /// The source of the debug message.
            /// </param>
            /// <param name="id">
            /// The identifier of the message.
            /// </param>
            /// <param name="length">
            /// The length of the message to be sent to the debug output stream.
            /// </param>
            /// <param name="message">
            /// The a string containing the message to be sent to the debug output stream.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glPushDebugGroupKHR")]
            public static void PushDebugGroup(OpenTK.Graphics.ES11.All source, uint id, int length, String message) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: KHR_debug]
            /// Push a named debug group into the command stream
            /// </summary>
            /// <param name="source">
            /// The source of the debug message.
            /// </param>
            /// <param name="id">
            /// The identifier of the message.
            /// </param>
            /// <param name="length">
            /// The length of the message to be sent to the debug output stream.
            /// </param>
            /// <param name="message">
            /// The a string containing the message to be sent to the debug output stream.
            /// </param>
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glPushDebugGroupKHR")]
            public static void PushDebugGroup(OpenTK.Graphics.ES11.DebugSource source, int id, int length, String message) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: KHR_debug]
            /// Push a named debug group into the command stream
            /// </summary>
            /// <param name="source">
            /// The source of the debug message.
            /// </param>
            /// <param name="id">
            /// The identifier of the message.
            /// </param>
            /// <param name="length">
            /// The length of the message to be sent to the debug output stream.
            /// </param>
            /// <param name="message">
            /// The a string containing the message to be sent to the debug output stream.
            /// </param>
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glPushDebugGroupKHR")]
            public static void PushDebugGroup(OpenTK.Graphics.ES11.DebugSource source, uint id, int length, String message) { throw new BindingsNotRewrittenException(); }

        }

        public static partial class NV
        {
            /// <summary>
            /// [requires: NV_fence]
            /// </summary>
            /// <param name="fences">
            /// [length: n]
            /// </param>
            [AutoGenerated(Category = "NV_fence", Version = "", EntryPoint = "glDeleteFencesNV")]
            public static void DeleteFence([CountAttribute(Parameter = "n")] int fences) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: NV_fence]
            /// </summary>
            /// <param name="fences">
            /// [length: n]
            /// </param>
            [AutoGenerated(Category = "NV_fence", Version = "", EntryPoint = "glDeleteFencesNV")]
            public static void DeleteFence([CountAttribute(Parameter = "n")] uint fences) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: NV_fence]
            /// </summary>
            /// <param name="n">
            /// </param>
            /// <param name="fences">
            /// [length: n]
            /// </param>
            [AutoGenerated(Category = "NV_fence", Version = "", EntryPoint = "glDeleteFencesNV")]
            public static void DeleteFences(int n, [CountAttribute(Parameter = "n")] int[] fences) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: NV_fence]
            /// </summary>
            /// <param name="n">
            /// </param>
            /// <param name="fences">
            /// [length: n]
            /// </param>
            [AutoGenerated(Category = "NV_fence", Version = "", EntryPoint = "glDeleteFencesNV")]
            public static void DeleteFences(int n, [CountAttribute(Parameter = "n")] ref int fences) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: NV_fence]
            /// </summary>
            /// <param name="n">
            /// </param>
            /// <param name="fences">
            /// [length: n]
            /// </param>
            [AutoGenerated(Category = "NV_fence", Version = "", EntryPoint = "glDeleteFencesNV")]
            public static unsafe void DeleteFences(int n, [CountAttribute(Parameter = "n")] int* fences) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: NV_fence]
            /// </summary>
            /// <param name="n">
            /// </param>
            /// <param name="fences">
            /// [length: n]
            /// </param>
            [AutoGenerated(Category = "NV_fence", Version = "", EntryPoint = "glDeleteFencesNV")]
            public static void DeleteFences(int n, [CountAttribute(Parameter = "n")] uint[] fences) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: NV_fence]
            /// </summary>
            /// <param name="n">
            /// </param>
            /// <param name="fences">
            /// [length: n]
            /// </param>
            [AutoGenerated(Category = "NV_fence", Version = "", EntryPoint = "glDeleteFencesNV")]
            public static void DeleteFences(int n, [CountAttribute(Parameter = "n")] ref uint fences) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: NV_fence]
            /// </summary>
            /// <param name="n">
            /// </param>
            /// <param name="fences">
            /// [length: n]
            /// </param>
            [AutoGenerated(Category = "NV_fence", Version = "", EntryPoint = "glDeleteFencesNV")]
            public static unsafe void DeleteFences(int n, [CountAttribute(Parameter = "n")] uint* fences) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: NV_fence]
            /// </summary>
            /// <param name="fence">
            /// </param>
            [AutoGenerated(Category = "NV_fence", Version = "", EntryPoint = "glFinishFenceNV")]
            public static void FinishFence(int fence) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: NV_fence]
            /// </summary>
            /// <param name="fence">
            /// </param>
            [AutoGenerated(Category = "NV_fence", Version = "", EntryPoint = "glFinishFenceNV")]
            public static void FinishFence(uint fence) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: NV_fence]
            /// </summary>
            [AutoGenerated(Category = "NV_fence", Version = "", EntryPoint = "glGenFencesNV")]
            public static int GenFence() { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: NV_fence]
            /// </summary>
            /// <param name="n">
            /// </param>
            /// <param name="fences">
            /// [length: n]
            /// </param>
            [AutoGenerated(Category = "NV_fence", Version = "", EntryPoint = "glGenFencesNV")]
            public static void GenFences(int n, [OutAttribute, CountAttribute(Parameter = "n")] int[] fences) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: NV_fence]
            /// </summary>
            /// <param name="n">
            /// </param>
            /// <param name="fences">
            /// [length: n]
            /// </param>
            [AutoGenerated(Category = "NV_fence", Version = "", EntryPoint = "glGenFencesNV")]
            public static void GenFences(int n, [OutAttribute, CountAttribute(Parameter = "n")] out int fences) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: NV_fence]
            /// </summary>
            /// <param name="n">
            /// </param>
            /// <param name="fences">
            /// [length: n]
            /// </param>
            [AutoGenerated(Category = "NV_fence", Version = "", EntryPoint = "glGenFencesNV")]
            public static unsafe void GenFences(int n, [OutAttribute, CountAttribute(Parameter = "n")] int* fences) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: NV_fence]
            /// </summary>
            /// <param name="n">
            /// </param>
            /// <param name="fences">
            /// [length: n]
            /// </param>
            [AutoGenerated(Category = "NV_fence", Version = "", EntryPoint = "glGenFencesNV")]
            public static void GenFences(int n, [OutAttribute, CountAttribute(Parameter = "n")] uint[] fences) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: NV_fence]
            /// </summary>
            /// <param name="n">
            /// </param>
            /// <param name="fences">
            /// [length: n]
            /// </param>
            [AutoGenerated(Category = "NV_fence", Version = "", EntryPoint = "glGenFencesNV")]
            public static void GenFences(int n, [OutAttribute, CountAttribute(Parameter = "n")] out uint fences) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: NV_fence]
            /// </summary>
            /// <param name="n">
            /// </param>
            /// <param name="fences">
            /// [length: n]
            /// </param>
            [AutoGenerated(Category = "NV_fence", Version = "", EntryPoint = "glGenFencesNV")]
            public static unsafe void GenFences(int n, [OutAttribute, CountAttribute(Parameter = "n")] uint* fences) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: NV_fence]
            /// </summary>
            /// <param name="fence">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "NV_fence", Version = "", EntryPoint = "glGetFenceivNV")]
            public static void GetFence(int fence, OpenTK.Graphics.ES11.All pname, [OutAttribute, CountAttribute(Computed = "pname")] int[] @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: NV_fence]
            /// </summary>
            /// <param name="fence">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "NV_fence", Version = "", EntryPoint = "glGetFenceivNV")]
            public static void GetFence(int fence, OpenTK.Graphics.ES11.All pname, [OutAttribute, CountAttribute(Computed = "pname")] out int @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: NV_fence]
            /// </summary>
            /// <param name="fence">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "NV_fence", Version = "", EntryPoint = "glGetFenceivNV")]
            public static unsafe void GetFence(int fence, OpenTK.Graphics.ES11.All pname, [OutAttribute, CountAttribute(Computed = "pname")] int* @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: NV_fence]
            /// </summary>
            /// <param name="fence">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "NV_fence", Version = "", EntryPoint = "glGetFenceivNV")]
            public static void GetFence(uint fence, OpenTK.Graphics.ES11.All pname, [OutAttribute, CountAttribute(Computed = "pname")] int[] @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: NV_fence]
            /// </summary>
            /// <param name="fence">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "NV_fence", Version = "", EntryPoint = "glGetFenceivNV")]
            public static void GetFence(uint fence, OpenTK.Graphics.ES11.All pname, [OutAttribute, CountAttribute(Computed = "pname")] out int @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: NV_fence]
            /// </summary>
            /// <param name="fence">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "NV_fence", Version = "", EntryPoint = "glGetFenceivNV")]
            public static unsafe void GetFence(uint fence, OpenTK.Graphics.ES11.All pname, [OutAttribute, CountAttribute(Computed = "pname")] int* @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: NV_fence]
            /// </summary>
            /// <param name="fence">
            /// </param>
            [AutoGenerated(Category = "NV_fence", Version = "", EntryPoint = "glIsFenceNV")]
            public static bool IsFence(int fence) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: NV_fence]
            /// </summary>
            /// <param name="fence">
            /// </param>
            [AutoGenerated(Category = "NV_fence", Version = "", EntryPoint = "glIsFenceNV")]
            public static bool IsFence(uint fence) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: NV_fence]
            /// </summary>
            /// <param name="fence">
            /// </param>
            /// <param name="condition">
            /// </param>
            [AutoGenerated(Category = "NV_fence", Version = "", EntryPoint = "glSetFenceNV")]
            public static void SetFence(int fence, OpenTK.Graphics.ES11.All condition) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: NV_fence]
            /// </summary>
            /// <param name="fence">
            /// </param>
            /// <param name="condition">
            /// </param>
            [AutoGenerated(Category = "NV_fence", Version = "", EntryPoint = "glSetFenceNV")]
            public static void SetFence(uint fence, OpenTK.Graphics.ES11.All condition) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: NV_fence]
            /// </summary>
            /// <param name="fence">
            /// </param>
            [AutoGenerated(Category = "NV_fence", Version = "", EntryPoint = "glTestFenceNV")]
            public static bool TestFence(int fence) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: NV_fence]
            /// </summary>
            /// <param name="fence">
            /// </param>
            [AutoGenerated(Category = "NV_fence", Version = "", EntryPoint = "glTestFenceNV")]
            public static bool TestFence(uint fence) { throw new BindingsNotRewrittenException(); }

        }

        public static partial class Oes
        {
            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="op">
            /// </param>
            /// <param name="value">
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glAccumxOES")]
            public static void Accumx(OpenTK.Graphics.ES11.All op, int value) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="func">
            /// </param>
            /// <param name="@ref">
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glAlphaFuncxOES")]
            public static void AlphaFuncx(OpenTK.Graphics.ES11.All func, int @ref) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="func">
            /// </param>
            /// <param name="@ref">
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glAlphaFuncxOES")]
            public static void AlphaFuncx(OpenTK.Graphics.ES11.AlphaFunction func, int @ref) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_framebuffer_object]
            /// Bind a named framebuffer object
            /// </summary>
            /// <param name="target">
            /// Specifies the target to which the framebuffer object is bound. The symbolic constant must be Framebuffer.
            /// </param>
            /// <param name="framebuffer">
            /// Specifies the name of a framebuffer object.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "OES_framebuffer_object", Version = "", EntryPoint = "glBindFramebufferOES")]
            public static void BindFramebuffer(OpenTK.Graphics.ES11.All target, int framebuffer) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_framebuffer_object]
            /// Bind a named framebuffer object
            /// </summary>
            /// <param name="target">
            /// Specifies the target to which the framebuffer object is bound. The symbolic constant must be Framebuffer.
            /// </param>
            /// <param name="framebuffer">
            /// Specifies the name of a framebuffer object.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "OES_framebuffer_object", Version = "", EntryPoint = "glBindFramebufferOES")]
            public static void BindFramebuffer(OpenTK.Graphics.ES11.All target, uint framebuffer) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_framebuffer_object]
            /// Bind a named framebuffer object
            /// </summary>
            /// <param name="target">
            /// Specifies the target to which the framebuffer object is bound. The symbolic constant must be Framebuffer.
            /// </param>
            /// <param name="framebuffer">
            /// Specifies the name of a framebuffer object.
            /// </param>
            [AutoGenerated(Category = "OES_framebuffer_object", Version = "", EntryPoint = "glBindFramebufferOES")]
            public static void BindFramebuffer(OpenTK.Graphics.ES11.FramebufferTarget target, int framebuffer) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_framebuffer_object]
            /// Bind a named framebuffer object
            /// </summary>
            /// <param name="target">
            /// Specifies the target to which the framebuffer object is bound. The symbolic constant must be Framebuffer.
            /// </param>
            /// <param name="framebuffer">
            /// Specifies the name of a framebuffer object.
            /// </param>
            [AutoGenerated(Category = "OES_framebuffer_object", Version = "", EntryPoint = "glBindFramebufferOES")]
            public static void BindFramebuffer(OpenTK.Graphics.ES11.FramebufferTarget target, uint framebuffer) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_framebuffer_object]
            /// Bind a named renderbuffer object
            /// </summary>
            /// <param name="target">
            /// Specifies the target to which the renderbuffer object is bound. The symbolic constant must be Renderbuffer.
            /// </param>
            /// <param name="renderbuffer">
            /// Specifies the name of a renderbuffer object.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "OES_framebuffer_object", Version = "", EntryPoint = "glBindRenderbufferOES")]
            public static void BindRenderbuffer(OpenTK.Graphics.ES11.All target, int renderbuffer) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_framebuffer_object]
            /// Bind a named renderbuffer object
            /// </summary>
            /// <param name="target">
            /// Specifies the target to which the renderbuffer object is bound. The symbolic constant must be Renderbuffer.
            /// </param>
            /// <param name="renderbuffer">
            /// Specifies the name of a renderbuffer object.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "OES_framebuffer_object", Version = "", EntryPoint = "glBindRenderbufferOES")]
            public static void BindRenderbuffer(OpenTK.Graphics.ES11.All target, uint renderbuffer) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_framebuffer_object]
            /// Bind a named renderbuffer object
            /// </summary>
            /// <param name="target">
            /// Specifies the target to which the renderbuffer object is bound. The symbolic constant must be Renderbuffer.
            /// </param>
            /// <param name="renderbuffer">
            /// Specifies the name of a renderbuffer object.
            /// </param>
            [AutoGenerated(Category = "OES_framebuffer_object", Version = "", EntryPoint = "glBindRenderbufferOES")]
            public static void BindRenderbuffer(OpenTK.Graphics.ES11.RenderbufferTarget target, int renderbuffer) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_framebuffer_object]
            /// Bind a named renderbuffer object
            /// </summary>
            /// <param name="target">
            /// Specifies the target to which the renderbuffer object is bound. The symbolic constant must be Renderbuffer.
            /// </param>
            /// <param name="renderbuffer">
            /// Specifies the name of a renderbuffer object.
            /// </param>
            [AutoGenerated(Category = "OES_framebuffer_object", Version = "", EntryPoint = "glBindRenderbufferOES")]
            public static void BindRenderbuffer(OpenTK.Graphics.ES11.RenderbufferTarget target, uint renderbuffer) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_vertex_array_object]
            /// Bind a vertex array object
            /// </summary>
            /// <param name="array">
            /// Specifies the name of the vertex array to bind.
            /// </param>
            [AutoGenerated(Category = "OES_vertex_array_object", Version = "", EntryPoint = "glBindVertexArrayOES")]
            public static void BindVertexArray(int array) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_vertex_array_object]
            /// Bind a vertex array object
            /// </summary>
            /// <param name="array">
            /// Specifies the name of the vertex array to bind.
            /// </param>
            [AutoGenerated(Category = "OES_vertex_array_object", Version = "", EntryPoint = "glBindVertexArrayOES")]
            public static void BindVertexArray(uint array) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="width">
            /// </param>
            /// <param name="height">
            /// </param>
            /// <param name="xorig">
            /// </param>
            /// <param name="yorig">
            /// </param>
            /// <param name="xmove">
            /// </param>
            /// <param name="ymove">
            /// </param>
            /// <param name="bitmap">
            /// [length: COMPSIZE(width,height)]
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glBitmapxOES")]
            public static void Bitmapx(int width, int height, int xorig, int yorig, int xmove, int ymove, [CountAttribute(Computed = "width,height")] Byte[] bitmap) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="width">
            /// </param>
            /// <param name="height">
            /// </param>
            /// <param name="xorig">
            /// </param>
            /// <param name="yorig">
            /// </param>
            /// <param name="xmove">
            /// </param>
            /// <param name="ymove">
            /// </param>
            /// <param name="bitmap">
            /// [length: COMPSIZE(width,height)]
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glBitmapxOES")]
            public static void Bitmapx(int width, int height, int xorig, int yorig, int xmove, int ymove, [CountAttribute(Computed = "width,height")] ref Byte bitmap) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="width">
            /// </param>
            /// <param name="height">
            /// </param>
            /// <param name="xorig">
            /// </param>
            /// <param name="yorig">
            /// </param>
            /// <param name="xmove">
            /// </param>
            /// <param name="ymove">
            /// </param>
            /// <param name="bitmap">
            /// [length: COMPSIZE(width,height)]
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glBitmapxOES")]
            public static unsafe void Bitmapx(int width, int height, int xorig, int yorig, int xmove, int ymove, [CountAttribute(Computed = "width,height")] Byte* bitmap) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="red">
            /// </param>
            /// <param name="green">
            /// </param>
            /// <param name="blue">
            /// </param>
            /// <param name="alpha">
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glBlendColorxOES")]
            public static void BlendColorx(int red, int green, int blue, int alpha) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_blend_subtract]
            /// Specify the equation used for both the RGB blend equation and the Alpha blend equation
            /// </summary>
            /// <param name="mode">
            /// specifies how source and destination colors are combined. It must be FuncAdd, FuncSubtract, or FuncReverseSubtract.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "OES_blend_subtract", Version = "", EntryPoint = "glBlendEquationOES")]
            public static void BlendEquation(OpenTK.Graphics.ES11.All mode) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_blend_subtract]
            /// Specify the equation used for both the RGB blend equation and the Alpha blend equation
            /// </summary>
            /// <param name="mode">
            /// specifies how source and destination colors are combined. It must be FuncAdd, FuncSubtract, or FuncReverseSubtract.
            /// </param>
            [AutoGenerated(Category = "OES_blend_subtract", Version = "", EntryPoint = "glBlendEquationOES")]
            public static void BlendEquation(OpenTK.Graphics.ES11.BlendEquationModeExt mode) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_blend_equation_separate]
            /// Set the RGB blend equation and the alpha blend equation separately
            /// </summary>
            /// <param name="modeRGB">
            /// specifies the RGB blend equation, how the red, green, and blue components of the source and destination colors are combined. It must be FuncAdd, FuncSubtract, or FuncReverseSubtract.
            /// </param>
            /// <param name="modeAlpha">
            /// specifies the alpha blend equation, how the alpha component of the source and destination colors are combined. It must be FuncAdd, FuncSubtract, or FuncReverseSubtract.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "OES_blend_equation_separate", Version = "", EntryPoint = "glBlendEquationSeparateOES")]
            public static void BlendEquationSeparate(OpenTK.Graphics.ES11.All modeRGB, OpenTK.Graphics.ES11.All modeAlpha) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_blend_equation_separate]
            /// Set the RGB blend equation and the alpha blend equation separately
            /// </summary>
            /// <param name="modeRGB">
            /// specifies the RGB blend equation, how the red, green, and blue components of the source and destination colors are combined. It must be FuncAdd, FuncSubtract, or FuncReverseSubtract.
            /// </param>
            /// <param name="modeAlpha">
            /// specifies the alpha blend equation, how the alpha component of the source and destination colors are combined. It must be FuncAdd, FuncSubtract, or FuncReverseSubtract.
            /// </param>
            [AutoGenerated(Category = "OES_blend_equation_separate", Version = "", EntryPoint = "glBlendEquationSeparateOES")]
            public static void BlendEquationSeparate(OpenTK.Graphics.ES11.BlendEquationModeExt modeRGB, OpenTK.Graphics.ES11.BlendEquationModeExt modeAlpha) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_blend_func_separate]
            /// Specify pixel arithmetic for RGB and alpha components separately
            /// </summary>
            /// <param name="srcRGB">
            /// Specifies how the red, green, and blue blending factors are computed. The following symbolic constants are accepted: Zero, One, SrcColor, OneMinusSrcColor, DstColor, OneMinusDstColor, SrcAlpha, OneMinusSrcAlpha, DstAlpha, OneMinusDstAlpha, ConstantColor, OneMinusConstantColor, ConstantAlpha, OneMinusConstantAlpha, and SrcAlphaSaturate. The initial value is One.
            /// </param>
            /// <param name="dstRGB">
            /// Specifies how the red, green, and blue destination blending factors are computed. The following symbolic constants are accepted: Zero, One, SrcColor, OneMinusSrcColor, DstColor, OneMinusDstColor, SrcAlpha, OneMinusSrcAlpha, DstAlpha, OneMinusDstAlpha. ConstantColor, OneMinusConstantColor, ConstantAlpha, and OneMinusConstantAlpha. The initial value is Zero.
            /// </param>
            /// <param name="srcAlpha">
            /// Specified how the alpha source blending factor is computed.  The same symbolic constants are accepted as for srcRGB. The initial value is One.
            /// </param>
            /// <param name="dstAlpha">
            /// Specified how the alpha destination blending factor is computed.  The same symbolic constants are accepted as for dstRGB. The initial value is Zero.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "OES_blend_func_separate", Version = "", EntryPoint = "glBlendFuncSeparateOES")]
            public static void BlendFuncSeparate(OpenTK.Graphics.ES11.All srcRGB, OpenTK.Graphics.ES11.All dstRGB, OpenTK.Graphics.ES11.All srcAlpha, OpenTK.Graphics.ES11.All dstAlpha) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_blend_func_separate]
            /// Specify pixel arithmetic for RGB and alpha components separately
            /// </summary>
            /// <param name="srcRGB">
            /// Specifies how the red, green, and blue blending factors are computed. The following symbolic constants are accepted: Zero, One, SrcColor, OneMinusSrcColor, DstColor, OneMinusDstColor, SrcAlpha, OneMinusSrcAlpha, DstAlpha, OneMinusDstAlpha, ConstantColor, OneMinusConstantColor, ConstantAlpha, OneMinusConstantAlpha, and SrcAlphaSaturate. The initial value is One.
            /// </param>
            /// <param name="dstRGB">
            /// Specifies how the red, green, and blue destination blending factors are computed. The following symbolic constants are accepted: Zero, One, SrcColor, OneMinusSrcColor, DstColor, OneMinusDstColor, SrcAlpha, OneMinusSrcAlpha, DstAlpha, OneMinusDstAlpha. ConstantColor, OneMinusConstantColor, ConstantAlpha, and OneMinusConstantAlpha. The initial value is Zero.
            /// </param>
            /// <param name="srcAlpha">
            /// Specified how the alpha source blending factor is computed.  The same symbolic constants are accepted as for srcRGB. The initial value is One.
            /// </param>
            /// <param name="dstAlpha">
            /// Specified how the alpha destination blending factor is computed.  The same symbolic constants are accepted as for dstRGB. The initial value is Zero.
            /// </param>
            [AutoGenerated(Category = "OES_blend_func_separate", Version = "", EntryPoint = "glBlendFuncSeparateOES")]
            public static void BlendFuncSeparate(OpenTK.Graphics.ES11.BlendingFactor srcRGB, OpenTK.Graphics.ES11.BlendingFactor dstRGB, OpenTK.Graphics.ES11.BlendingFactor srcAlpha, OpenTK.Graphics.ES11.BlendingFactor dstAlpha) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_framebuffer_object]
            /// Return the framebuffer completeness status of a framebuffer object
            /// </summary>
            /// <param name="target">
            /// Specifies the target framebuffer object. The symbolic constant must be Framebuffer.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "OES_framebuffer_object", Version = "", EntryPoint = "glCheckFramebufferStatusOES")]
            public static OpenTK.Graphics.ES11.FramebufferStatus CheckFramebufferStatus(OpenTK.Graphics.ES11.All target) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_framebuffer_object]
            /// Return the framebuffer completeness status of a framebuffer object
            /// </summary>
            /// <param name="target">
            /// Specifies the target framebuffer object. The symbolic constant must be Framebuffer.
            /// </param>
            [AutoGenerated(Category = "OES_framebuffer_object", Version = "", EntryPoint = "glCheckFramebufferStatusOES")]
            public static OpenTK.Graphics.ES11.FramebufferStatus CheckFramebufferStatus(OpenTK.Graphics.ES11.FramebufferTarget target) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="red">
            /// </param>
            /// <param name="green">
            /// </param>
            /// <param name="blue">
            /// </param>
            /// <param name="alpha">
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glClearAccumxOES")]
            public static void ClearAccumx(int red, int green, int blue, int alpha) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="red">
            /// </param>
            /// <param name="green">
            /// </param>
            /// <param name="blue">
            /// </param>
            /// <param name="alpha">
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glClearColorxOES")]
            public static void ClearColorx(int red, int green, int blue, int alpha) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_single_precision]
            /// Specify the clear value for the depth buffer
            /// </summary>
            /// <param name="depth">
            /// Specifies the depth value used when the depth buffer is cleared. The initial value is 1.
            /// </param>
            [AutoGenerated(Category = "OES_single_precision", Version = "", EntryPoint = "glClearDepthfOES")]
            public static void ClearDepth(float depth) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="depth">
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glClearDepthxOES")]
            public static void ClearDepthx(int depth) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_single_precision]
            /// Specify a plane against which all geometry is clipped
            /// </summary>
            /// <param name="plane">
            /// Specifies which clipping plane is being positioned. Symbolic names of the form ClipPlanei, where i is an integer between 0 and MaxClipPlanes - 1, are accepted.
            /// </param>
            /// <param name="equation">
            /// [length: 4]
            /// Specifies the address of an array of four double-precision floating-point values. These values are interpreted as a plane equation.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "OES_single_precision", Version = "", EntryPoint = "glClipPlanefOES")]
            public static void ClipPlane(OpenTK.Graphics.ES11.All plane, [CountAttribute(Count = 4)] float[] equation) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_single_precision]
            /// Specify a plane against which all geometry is clipped
            /// </summary>
            /// <param name="plane">
            /// Specifies which clipping plane is being positioned. Symbolic names of the form ClipPlanei, where i is an integer between 0 and MaxClipPlanes - 1, are accepted.
            /// </param>
            /// <param name="equation">
            /// [length: 4]
            /// Specifies the address of an array of four double-precision floating-point values. These values are interpreted as a plane equation.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "OES_single_precision", Version = "", EntryPoint = "glClipPlanefOES")]
            public static void ClipPlane(OpenTK.Graphics.ES11.All plane, [CountAttribute(Count = 4)] ref float equation) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_single_precision]
            /// Specify a plane against which all geometry is clipped
            /// </summary>
            /// <param name="plane">
            /// Specifies which clipping plane is being positioned. Symbolic names of the form ClipPlanei, where i is an integer between 0 and MaxClipPlanes - 1, are accepted.
            /// </param>
            /// <param name="equation">
            /// [length: 4]
            /// Specifies the address of an array of four double-precision floating-point values. These values are interpreted as a plane equation.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "OES_single_precision", Version = "", EntryPoint = "glClipPlanefOES")]
            public static unsafe void ClipPlane(OpenTK.Graphics.ES11.All plane, [CountAttribute(Count = 4)] float* equation) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_single_precision]
            /// Specify a plane against which all geometry is clipped
            /// </summary>
            /// <param name="plane">
            /// Specifies which clipping plane is being positioned. Symbolic names of the form ClipPlanei, where i is an integer between 0 and MaxClipPlanes - 1, are accepted.
            /// </param>
            /// <param name="equation">
            /// [length: 4]
            /// Specifies the address of an array of four double-precision floating-point values. These values are interpreted as a plane equation.
            /// </param>
            [AutoGenerated(Category = "OES_single_precision", Version = "", EntryPoint = "glClipPlanefOES")]
            public static void ClipPlane(OpenTK.Graphics.ES11.ClipPlaneName plane, [CountAttribute(Count = 4)] float[] equation) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_single_precision]
            /// Specify a plane against which all geometry is clipped
            /// </summary>
            /// <param name="plane">
            /// Specifies which clipping plane is being positioned. Symbolic names of the form ClipPlanei, where i is an integer between 0 and MaxClipPlanes - 1, are accepted.
            /// </param>
            /// <param name="equation">
            /// [length: 4]
            /// Specifies the address of an array of four double-precision floating-point values. These values are interpreted as a plane equation.
            /// </param>
            [AutoGenerated(Category = "OES_single_precision", Version = "", EntryPoint = "glClipPlanefOES")]
            public static void ClipPlane(OpenTK.Graphics.ES11.ClipPlaneName plane, [CountAttribute(Count = 4)] ref float equation) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_single_precision]
            /// Specify a plane against which all geometry is clipped
            /// </summary>
            /// <param name="plane">
            /// Specifies which clipping plane is being positioned. Symbolic names of the form ClipPlanei, where i is an integer between 0 and MaxClipPlanes - 1, are accepted.
            /// </param>
            /// <param name="equation">
            /// [length: 4]
            /// Specifies the address of an array of four double-precision floating-point values. These values are interpreted as a plane equation.
            /// </param>
            [AutoGenerated(Category = "OES_single_precision", Version = "", EntryPoint = "glClipPlanefOES")]
            public static unsafe void ClipPlane(OpenTK.Graphics.ES11.ClipPlaneName plane, [CountAttribute(Count = 4)] float* equation) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="plane">
            /// </param>
            /// <param name="equation">
            /// [length: 4]
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glClipPlanexOES")]
            public static void ClipPlanex(OpenTK.Graphics.ES11.All plane, [CountAttribute(Count = 4)] int[] equation) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="plane">
            /// </param>
            /// <param name="equation">
            /// [length: 4]
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glClipPlanexOES")]
            public static void ClipPlanex(OpenTK.Graphics.ES11.All plane, [CountAttribute(Count = 4)] ref int equation) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="plane">
            /// </param>
            /// <param name="equation">
            /// [length: 4]
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glClipPlanexOES")]
            public static unsafe void ClipPlanex(OpenTK.Graphics.ES11.All plane, [CountAttribute(Count = 4)] int* equation) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="plane">
            /// </param>
            /// <param name="equation">
            /// [length: 4]
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glClipPlanexOES")]
            public static void ClipPlanex(OpenTK.Graphics.ES11.ClipPlaneName plane, [CountAttribute(Count = 4)] int[] equation) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="plane">
            /// </param>
            /// <param name="equation">
            /// [length: 4]
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glClipPlanexOES")]
            public static void ClipPlanex(OpenTK.Graphics.ES11.ClipPlaneName plane, [CountAttribute(Count = 4)] ref int equation) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="plane">
            /// </param>
            /// <param name="equation">
            /// [length: 4]
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glClipPlanexOES")]
            public static unsafe void ClipPlanex(OpenTK.Graphics.ES11.ClipPlaneName plane, [CountAttribute(Count = 4)] int* equation) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="red">
            /// </param>
            /// <param name="green">
            /// </param>
            /// <param name="blue">
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glColor3xOES")]
            public static void Color3x(int red, int green, int blue) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="components">
            /// [length: 3]
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glColor3xvOES")]
            public static void Color3x([CountAttribute(Count = 3)] int[] components) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="components">
            /// [length: 3]
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glColor3xvOES")]
            public static void Color3x([CountAttribute(Count = 3)] ref int components) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="components">
            /// [length: 3]
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glColor3xvOES")]
            public static unsafe void Color3x([CountAttribute(Count = 3)] int* components) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="red">
            /// </param>
            /// <param name="green">
            /// </param>
            /// <param name="blue">
            /// </param>
            /// <param name="alpha">
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glColor4xOES")]
            public static void Color4x(int red, int green, int blue, int alpha) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="components">
            /// [length: 4]
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glColor4xvOES")]
            public static void Color4x([CountAttribute(Count = 4)] int[] components) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="components">
            /// [length: 4]
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glColor4xvOES")]
            public static void Color4x([CountAttribute(Count = 4)] ref int components) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="components">
            /// [length: 4]
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glColor4xvOES")]
            public static unsafe void Color4x([CountAttribute(Count = 4)] int* components) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="param">
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glConvolutionParameterxOES")]
            public static void ConvolutionParameterx(OpenTK.Graphics.ES11.All target, OpenTK.Graphics.ES11.All pname, int param) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="param">
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glConvolutionParameterxOES")]
            public static void ConvolutionParameterx(OpenTK.Graphics.ES11.ConvolutionTargetExt target, OpenTK.Graphics.ES11.ConvolutionParameterExt pname, int param) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glConvolutionParameterxvOES")]
            public static void ConvolutionParameterx(OpenTK.Graphics.ES11.All target, OpenTK.Graphics.ES11.All pname, [CountAttribute(Computed = "pname")] int[] @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glConvolutionParameterxvOES")]
            public static unsafe void ConvolutionParameterx(OpenTK.Graphics.ES11.All target, OpenTK.Graphics.ES11.All pname, [CountAttribute(Computed = "pname")] int* @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glConvolutionParameterxvOES")]
            public static void ConvolutionParameterx(OpenTK.Graphics.ES11.ConvolutionTargetExt target, OpenTK.Graphics.ES11.ConvolutionParameterExt pname, [CountAttribute(Computed = "pname")] int[] @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glConvolutionParameterxvOES")]
            public static unsafe void ConvolutionParameterx(OpenTK.Graphics.ES11.ConvolutionTargetExt target, OpenTK.Graphics.ES11.ConvolutionParameterExt pname, [CountAttribute(Computed = "pname")] int* @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_matrix_palette]
            /// </summary>
            /// <param name="matrixpaletteindex">
            /// </param>
            [AutoGenerated(Category = "OES_matrix_palette", Version = "", EntryPoint = "glCurrentPaletteMatrixOES")]
            public static void CurrentPaletteMatrix(int matrixpaletteindex) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_matrix_palette]
            /// </summary>
            /// <param name="matrixpaletteindex">
            /// </param>
            [AutoGenerated(Category = "OES_matrix_palette", Version = "", EntryPoint = "glCurrentPaletteMatrixOES")]
            public static void CurrentPaletteMatrix(uint matrixpaletteindex) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_framebuffer_object]
            /// Delete named framebuffer objects
            /// </summary>
            /// <param name="framebuffers">
            /// [length: n]
            /// Specifies an array of framebuffer objects to be deleted.
            /// </param>
            [AutoGenerated(Category = "OES_framebuffer_object", Version = "", EntryPoint = "glDeleteFramebuffersOES")]
            public static void DeleteFramebuffer([CountAttribute(Parameter = "n")] int framebuffers) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_framebuffer_object]
            /// Delete named framebuffer objects
            /// </summary>
            /// <param name="framebuffers">
            /// [length: n]
            /// Specifies an array of framebuffer objects to be deleted.
            /// </param>
            [AutoGenerated(Category = "OES_framebuffer_object", Version = "", EntryPoint = "glDeleteFramebuffersOES")]
            public static void DeleteFramebuffer([CountAttribute(Parameter = "n")] uint framebuffers) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_framebuffer_object]
            /// Delete named framebuffer objects
            /// </summary>
            /// <param name="n">
            /// Specifies the number of framebuffer objects to be deleted.
            /// </param>
            /// <param name="framebuffers">
            /// [length: n]
            /// Specifies an array of framebuffer objects to be deleted.
            /// </param>
            [AutoGenerated(Category = "OES_framebuffer_object", Version = "", EntryPoint = "glDeleteFramebuffersOES")]
            public static void DeleteFramebuffers(int n, [CountAttribute(Parameter = "n")] int[] framebuffers) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_framebuffer_object]
            /// Delete named framebuffer objects
            /// </summary>
            /// <param name="n">
            /// Specifies the number of framebuffer objects to be deleted.
            /// </param>
            /// <param name="framebuffers">
            /// [length: n]
            /// Specifies an array of framebuffer objects to be deleted.
            /// </param>
            [AutoGenerated(Category = "OES_framebuffer_object", Version = "", EntryPoint = "glDeleteFramebuffersOES")]
            public static void DeleteFramebuffers(int n, [CountAttribute(Parameter = "n")] ref int framebuffers) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_framebuffer_object]
            /// Delete named framebuffer objects
            /// </summary>
            /// <param name="n">
            /// Specifies the number of framebuffer objects to be deleted.
            /// </param>
            /// <param name="framebuffers">
            /// [length: n]
            /// Specifies an array of framebuffer objects to be deleted.
            /// </param>
            [AutoGenerated(Category = "OES_framebuffer_object", Version = "", EntryPoint = "glDeleteFramebuffersOES")]
            public static unsafe void DeleteFramebuffers(int n, [CountAttribute(Parameter = "n")] int* framebuffers) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_framebuffer_object]
            /// Delete named framebuffer objects
            /// </summary>
            /// <param name="n">
            /// Specifies the number of framebuffer objects to be deleted.
            /// </param>
            /// <param name="framebuffers">
            /// [length: n]
            /// Specifies an array of framebuffer objects to be deleted.
            /// </param>
            [AutoGenerated(Category = "OES_framebuffer_object", Version = "", EntryPoint = "glDeleteFramebuffersOES")]
            public static void DeleteFramebuffers(int n, [CountAttribute(Parameter = "n")] uint[] framebuffers) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_framebuffer_object]
            /// Delete named framebuffer objects
            /// </summary>
            /// <param name="n">
            /// Specifies the number of framebuffer objects to be deleted.
            /// </param>
            /// <param name="framebuffers">
            /// [length: n]
            /// Specifies an array of framebuffer objects to be deleted.
            /// </param>
            [AutoGenerated(Category = "OES_framebuffer_object", Version = "", EntryPoint = "glDeleteFramebuffersOES")]
            public static void DeleteFramebuffers(int n, [CountAttribute(Parameter = "n")] ref uint framebuffers) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_framebuffer_object]
            /// Delete named framebuffer objects
            /// </summary>
            /// <param name="n">
            /// Specifies the number of framebuffer objects to be deleted.
            /// </param>
            /// <param name="framebuffers">
            /// [length: n]
            /// Specifies an array of framebuffer objects to be deleted.
            /// </param>
            [AutoGenerated(Category = "OES_framebuffer_object", Version = "", EntryPoint = "glDeleteFramebuffersOES")]
            public static unsafe void DeleteFramebuffers(int n, [CountAttribute(Parameter = "n")] uint* framebuffers) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_framebuffer_object]
            /// Delete named renderbuffer objects
            /// </summary>
            /// <param name="renderbuffers">
            /// [length: n]
            /// Specifies an array of renderbuffer objects to be deleted.
            /// </param>
            [AutoGenerated(Category = "OES_framebuffer_object", Version = "", EntryPoint = "glDeleteRenderbuffersOES")]
            public static void DeleteRenderbuffer([CountAttribute(Parameter = "n")] int renderbuffers) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_framebuffer_object]
            /// Delete named renderbuffer objects
            /// </summary>
            /// <param name="renderbuffers">
            /// [length: n]
            /// Specifies an array of renderbuffer objects to be deleted.
            /// </param>
            [AutoGenerated(Category = "OES_framebuffer_object", Version = "", EntryPoint = "glDeleteRenderbuffersOES")]
            public static void DeleteRenderbuffer([CountAttribute(Parameter = "n")] uint renderbuffers) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_framebuffer_object]
            /// Delete named renderbuffer objects
            /// </summary>
            /// <param name="n">
            /// Specifies the number of renderbuffer objects to be deleted.
            /// </param>
            /// <param name="renderbuffers">
            /// [length: n]
            /// Specifies an array of renderbuffer objects to be deleted.
            /// </param>
            [AutoGenerated(Category = "OES_framebuffer_object", Version = "", EntryPoint = "glDeleteRenderbuffersOES")]
            public static void DeleteRenderbuffers(int n, [CountAttribute(Parameter = "n")] int[] renderbuffers) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_framebuffer_object]
            /// Delete named renderbuffer objects
            /// </summary>
            /// <param name="n">
            /// Specifies the number of renderbuffer objects to be deleted.
            /// </param>
            /// <param name="renderbuffers">
            /// [length: n]
            /// Specifies an array of renderbuffer objects to be deleted.
            /// </param>
            [AutoGenerated(Category = "OES_framebuffer_object", Version = "", EntryPoint = "glDeleteRenderbuffersOES")]
            public static void DeleteRenderbuffers(int n, [CountAttribute(Parameter = "n")] ref int renderbuffers) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_framebuffer_object]
            /// Delete named renderbuffer objects
            /// </summary>
            /// <param name="n">
            /// Specifies the number of renderbuffer objects to be deleted.
            /// </param>
            /// <param name="renderbuffers">
            /// [length: n]
            /// Specifies an array of renderbuffer objects to be deleted.
            /// </param>
            [AutoGenerated(Category = "OES_framebuffer_object", Version = "", EntryPoint = "glDeleteRenderbuffersOES")]
            public static unsafe void DeleteRenderbuffers(int n, [CountAttribute(Parameter = "n")] int* renderbuffers) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_framebuffer_object]
            /// Delete named renderbuffer objects
            /// </summary>
            /// <param name="n">
            /// Specifies the number of renderbuffer objects to be deleted.
            /// </param>
            /// <param name="renderbuffers">
            /// [length: n]
            /// Specifies an array of renderbuffer objects to be deleted.
            /// </param>
            [AutoGenerated(Category = "OES_framebuffer_object", Version = "", EntryPoint = "glDeleteRenderbuffersOES")]
            public static void DeleteRenderbuffers(int n, [CountAttribute(Parameter = "n")] uint[] renderbuffers) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_framebuffer_object]
            /// Delete named renderbuffer objects
            /// </summary>
            /// <param name="n">
            /// Specifies the number of renderbuffer objects to be deleted.
            /// </param>
            /// <param name="renderbuffers">
            /// [length: n]
            /// Specifies an array of renderbuffer objects to be deleted.
            /// </param>
            [AutoGenerated(Category = "OES_framebuffer_object", Version = "", EntryPoint = "glDeleteRenderbuffersOES")]
            public static void DeleteRenderbuffers(int n, [CountAttribute(Parameter = "n")] ref uint renderbuffers) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_framebuffer_object]
            /// Delete named renderbuffer objects
            /// </summary>
            /// <param name="n">
            /// Specifies the number of renderbuffer objects to be deleted.
            /// </param>
            /// <param name="renderbuffers">
            /// [length: n]
            /// Specifies an array of renderbuffer objects to be deleted.
            /// </param>
            [AutoGenerated(Category = "OES_framebuffer_object", Version = "", EntryPoint = "glDeleteRenderbuffersOES")]
            public static unsafe void DeleteRenderbuffers(int n, [CountAttribute(Parameter = "n")] uint* renderbuffers) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_vertex_array_object]
            /// Delete vertex array objects
            /// </summary>
            /// <param name="arrays">
            /// [length: n]
            /// Specifies the address of an array containing the n names of the objects to be deleted.
            /// </param>
            [AutoGenerated(Category = "OES_vertex_array_object", Version = "", EntryPoint = "glDeleteVertexArraysOES")]
            public static void DeleteVertexArray([CountAttribute(Parameter = "n")] int arrays) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_vertex_array_object]
            /// Delete vertex array objects
            /// </summary>
            /// <param name="arrays">
            /// [length: n]
            /// Specifies the address of an array containing the n names of the objects to be deleted.
            /// </param>
            [AutoGenerated(Category = "OES_vertex_array_object", Version = "", EntryPoint = "glDeleteVertexArraysOES")]
            public static void DeleteVertexArray([CountAttribute(Parameter = "n")] uint arrays) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_vertex_array_object]
            /// Delete vertex array objects
            /// </summary>
            /// <param name="n">
            /// Specifies the number of vertex array objects to be deleted.
            /// </param>
            /// <param name="arrays">
            /// [length: n]
            /// Specifies the address of an array containing the n names of the objects to be deleted.
            /// </param>
            [AutoGenerated(Category = "OES_vertex_array_object", Version = "", EntryPoint = "glDeleteVertexArraysOES")]
            public static void DeleteVertexArrays(int n, [CountAttribute(Parameter = "n")] int[] arrays) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_vertex_array_object]
            /// Delete vertex array objects
            /// </summary>
            /// <param name="n">
            /// Specifies the number of vertex array objects to be deleted.
            /// </param>
            /// <param name="arrays">
            /// [length: n]
            /// Specifies the address of an array containing the n names of the objects to be deleted.
            /// </param>
            [AutoGenerated(Category = "OES_vertex_array_object", Version = "", EntryPoint = "glDeleteVertexArraysOES")]
            public static void DeleteVertexArrays(int n, [CountAttribute(Parameter = "n")] ref int arrays) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_vertex_array_object]
            /// Delete vertex array objects
            /// </summary>
            /// <param name="n">
            /// Specifies the number of vertex array objects to be deleted.
            /// </param>
            /// <param name="arrays">
            /// [length: n]
            /// Specifies the address of an array containing the n names of the objects to be deleted.
            /// </param>
            [AutoGenerated(Category = "OES_vertex_array_object", Version = "", EntryPoint = "glDeleteVertexArraysOES")]
            public static unsafe void DeleteVertexArrays(int n, [CountAttribute(Parameter = "n")] int* arrays) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_vertex_array_object]
            /// Delete vertex array objects
            /// </summary>
            /// <param name="n">
            /// Specifies the number of vertex array objects to be deleted.
            /// </param>
            /// <param name="arrays">
            /// [length: n]
            /// Specifies the address of an array containing the n names of the objects to be deleted.
            /// </param>
            [AutoGenerated(Category = "OES_vertex_array_object", Version = "", EntryPoint = "glDeleteVertexArraysOES")]
            public static void DeleteVertexArrays(int n, [CountAttribute(Parameter = "n")] uint[] arrays) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_vertex_array_object]
            /// Delete vertex array objects
            /// </summary>
            /// <param name="n">
            /// Specifies the number of vertex array objects to be deleted.
            /// </param>
            /// <param name="arrays">
            /// [length: n]
            /// Specifies the address of an array containing the n names of the objects to be deleted.
            /// </param>
            [AutoGenerated(Category = "OES_vertex_array_object", Version = "", EntryPoint = "glDeleteVertexArraysOES")]
            public static void DeleteVertexArrays(int n, [CountAttribute(Parameter = "n")] ref uint arrays) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_vertex_array_object]
            /// Delete vertex array objects
            /// </summary>
            /// <param name="n">
            /// Specifies the number of vertex array objects to be deleted.
            /// </param>
            /// <param name="arrays">
            /// [length: n]
            /// Specifies the address of an array containing the n names of the objects to be deleted.
            /// </param>
            [AutoGenerated(Category = "OES_vertex_array_object", Version = "", EntryPoint = "glDeleteVertexArraysOES")]
            public static unsafe void DeleteVertexArrays(int n, [CountAttribute(Parameter = "n")] uint* arrays) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_single_precision]
            /// Specify mapping of depth values from normalized device coordinates to window coordinates
            /// </summary>
            /// <param name="n">
            /// Specifies the mapping of the near clipping plane to window coordinates. The initial value is 0.
            /// </param>
            /// <param name="f">
            /// Specifies the mapping of the far clipping plane to window coordinates. The initial value is 1.
            /// </param>
            [AutoGenerated(Category = "OES_single_precision", Version = "", EntryPoint = "glDepthRangefOES")]
            public static void DepthRange(float n, float f) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="n">
            /// </param>
            /// <param name="f">
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glDepthRangexOES")]
            public static void DepthRangex(int n, int f) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_draw_texture]
            /// </summary>
            /// <param name="x">
            /// </param>
            /// <param name="y">
            /// </param>
            /// <param name="z">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="height">
            /// </param>
            [AutoGenerated(Category = "OES_draw_texture", Version = "", EntryPoint = "glDrawTexfOES")]
            public static void DrawTex(float x, float y, float z, float width, float height) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_draw_texture]
            /// </summary>
            /// <param name="coords">
            /// </param>
            [AutoGenerated(Category = "OES_draw_texture", Version = "", EntryPoint = "glDrawTexfvOES")]
            public static void DrawTex(float[] coords) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_draw_texture]
            /// </summary>
            /// <param name="coords">
            /// </param>
            [AutoGenerated(Category = "OES_draw_texture", Version = "", EntryPoint = "glDrawTexfvOES")]
            public static void DrawTex(ref float coords) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_draw_texture]
            /// </summary>
            /// <param name="coords">
            /// </param>
            [AutoGenerated(Category = "OES_draw_texture", Version = "", EntryPoint = "glDrawTexfvOES")]
            public static unsafe void DrawTex(float* coords) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_draw_texture]
            /// </summary>
            /// <param name="x">
            /// </param>
            /// <param name="y">
            /// </param>
            /// <param name="z">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="height">
            /// </param>
            [AutoGenerated(Category = "OES_draw_texture", Version = "", EntryPoint = "glDrawTexiOES")]
            public static void DrawTex(int x, int y, int z, int width, int height) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_draw_texture]
            /// </summary>
            /// <param name="coords">
            /// </param>
            [AutoGenerated(Category = "OES_draw_texture", Version = "", EntryPoint = "glDrawTexivOES")]
            public static void DrawTex(int[] coords) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_draw_texture]
            /// </summary>
            /// <param name="coords">
            /// </param>
            [AutoGenerated(Category = "OES_draw_texture", Version = "", EntryPoint = "glDrawTexivOES")]
            public static void DrawTex(ref int coords) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_draw_texture]
            /// </summary>
            /// <param name="coords">
            /// </param>
            [AutoGenerated(Category = "OES_draw_texture", Version = "", EntryPoint = "glDrawTexivOES")]
            public static unsafe void DrawTex(int* coords) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_draw_texture]
            /// </summary>
            /// <param name="x">
            /// </param>
            /// <param name="y">
            /// </param>
            /// <param name="z">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="height">
            /// </param>
            [AutoGenerated(Category = "OES_draw_texture", Version = "", EntryPoint = "glDrawTexsOES")]
            public static void DrawTex(short x, short y, short z, short width, short height) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_draw_texture]
            /// </summary>
            /// <param name="coords">
            /// </param>
            [AutoGenerated(Category = "OES_draw_texture", Version = "", EntryPoint = "glDrawTexsvOES")]
            public static void DrawTex(short[] coords) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_draw_texture]
            /// </summary>
            /// <param name="coords">
            /// </param>
            [AutoGenerated(Category = "OES_draw_texture", Version = "", EntryPoint = "glDrawTexsvOES")]
            public static void DrawTex(ref short coords) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_draw_texture]
            /// </summary>
            /// <param name="coords">
            /// </param>
            [AutoGenerated(Category = "OES_draw_texture", Version = "", EntryPoint = "glDrawTexsvOES")]
            public static unsafe void DrawTex(short* coords) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_draw_texture]
            /// </summary>
            /// <param name="x">
            /// </param>
            /// <param name="y">
            /// </param>
            /// <param name="z">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="height">
            /// </param>
            [AutoGenerated(Category = "OES_draw_texture", Version = "", EntryPoint = "glDrawTexxOES")]
            public static void DrawTexx(int x, int y, int z, int width, int height) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_draw_texture]
            /// </summary>
            /// <param name="coords">
            /// </param>
            [AutoGenerated(Category = "OES_draw_texture", Version = "", EntryPoint = "glDrawTexxvOES")]
            public static void DrawTexx(int[] coords) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_draw_texture]
            /// </summary>
            /// <param name="coords">
            /// </param>
            [AutoGenerated(Category = "OES_draw_texture", Version = "", EntryPoint = "glDrawTexxvOES")]
            public static void DrawTexx(ref int coords) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_draw_texture]
            /// </summary>
            /// <param name="coords">
            /// </param>
            [AutoGenerated(Category = "OES_draw_texture", Version = "", EntryPoint = "glDrawTexxvOES")]
            public static unsafe void DrawTexx(int* coords) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_EGL_image]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="image">
            /// </param>
            [AutoGenerated(Category = "OES_EGL_image", Version = "", EntryPoint = "glEGLImageTargetRenderbufferStorageOES")]
            public static void EGLImageTargetRenderbufferStorage(OpenTK.Graphics.ES11.All target, IntPtr image) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_EGL_image]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="image">
            /// </param>
            [AutoGenerated(Category = "OES_EGL_image", Version = "", EntryPoint = "glEGLImageTargetTexture2DOES")]
            public static void EGLImageTargetTexture2D(OpenTK.Graphics.ES11.All target, IntPtr image) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="u">
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glEvalCoord1xOES")]
            public static void EvalCoord1x(int u) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="coords">
            /// [length: 1]
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glEvalCoord1xvOES")]
            public static unsafe void EvalCoord1x([CountAttribute(Count = 1)] int* coords) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="u">
            /// </param>
            /// <param name="v">
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glEvalCoord2xOES")]
            public static void EvalCoord2x(int u, int v) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="coords">
            /// [length: 2]
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glEvalCoord2xvOES")]
            public static void EvalCoord2x([CountAttribute(Count = 2)] int[] coords) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="coords">
            /// [length: 2]
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glEvalCoord2xvOES")]
            public static void EvalCoord2x([CountAttribute(Count = 2)] ref int coords) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="coords">
            /// [length: 2]
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glEvalCoord2xvOES")]
            public static unsafe void EvalCoord2x([CountAttribute(Count = 2)] int* coords) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="n">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="buffer">
            /// [length: n]
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glFeedbackBufferxOES")]
            public static void FeedbackBufferx(int n, OpenTK.Graphics.ES11.All type, [CountAttribute(Parameter = "n")] int[] buffer) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="n">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="buffer">
            /// [length: n]
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glFeedbackBufferxOES")]
            public static void FeedbackBufferx(int n, OpenTK.Graphics.ES11.All type, [CountAttribute(Parameter = "n")] ref int buffer) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="n">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="buffer">
            /// [length: n]
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glFeedbackBufferxOES")]
            public static unsafe void FeedbackBufferx(int n, OpenTK.Graphics.ES11.All type, [CountAttribute(Parameter = "n")] int* buffer) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="pname">
            /// </param>
            /// <param name="param">
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glFogxOES")]
            public static void Fogx(OpenTK.Graphics.ES11.All pname, int param) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="pname">
            /// </param>
            /// <param name="param">
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glFogxOES")]
            public static void Fogx(OpenTK.Graphics.ES11.FogPName pname, int param) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="pname">
            /// </param>
            /// <param name="param">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glFogxvOES")]
            public static void Fogx(OpenTK.Graphics.ES11.All pname, [CountAttribute(Computed = "pname")] int[] param) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="pname">
            /// </param>
            /// <param name="param">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glFogxvOES")]
            public static unsafe void Fogx(OpenTK.Graphics.ES11.All pname, [CountAttribute(Computed = "pname")] int* param) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="pname">
            /// </param>
            /// <param name="param">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glFogxvOES")]
            public static void Fogx(OpenTK.Graphics.ES11.FogPName pname, [CountAttribute(Computed = "pname")] int[] param) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="pname">
            /// </param>
            /// <param name="param">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glFogxvOES")]
            public static unsafe void Fogx(OpenTK.Graphics.ES11.FogPName pname, [CountAttribute(Computed = "pname")] int* param) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_framebuffer_object]
            /// Attach a renderbuffer object to a framebuffer object
            /// </summary>
            /// <param name="target">
            /// Specifies the framebuffer target. The symbolic constant must be Framebuffer.
            /// </param>
            /// <param name="attachment">
            /// Specifies the attachment point to which renderbuffer should be attached. Must be one of the following symbolic constants: ColorAttachment0, DepthAttachment, or StencilAttachment.
            /// </param>
            /// <param name="renderbuffertarget">
            /// Specifies the renderbuffer target. The symbolic constant must be Renderbuffer.
            /// </param>
            /// <param name="renderbuffer">
            /// Specifies the renderbuffer object that is to be attached.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "OES_framebuffer_object", Version = "", EntryPoint = "glFramebufferRenderbufferOES")]
            public static void FramebufferRenderbuffer(OpenTK.Graphics.ES11.All target, OpenTK.Graphics.ES11.All attachment, OpenTK.Graphics.ES11.All renderbuffertarget, int renderbuffer) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_framebuffer_object]
            /// Attach a renderbuffer object to a framebuffer object
            /// </summary>
            /// <param name="target">
            /// Specifies the framebuffer target. The symbolic constant must be Framebuffer.
            /// </param>
            /// <param name="attachment">
            /// Specifies the attachment point to which renderbuffer should be attached. Must be one of the following symbolic constants: ColorAttachment0, DepthAttachment, or StencilAttachment.
            /// </param>
            /// <param name="renderbuffertarget">
            /// Specifies the renderbuffer target. The symbolic constant must be Renderbuffer.
            /// </param>
            /// <param name="renderbuffer">
            /// Specifies the renderbuffer object that is to be attached.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "OES_framebuffer_object", Version = "", EntryPoint = "glFramebufferRenderbufferOES")]
            public static void FramebufferRenderbuffer(OpenTK.Graphics.ES11.All target, OpenTK.Graphics.ES11.All attachment, OpenTK.Graphics.ES11.All renderbuffertarget, uint renderbuffer) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_framebuffer_object]
            /// Attach a renderbuffer object to a framebuffer object
            /// </summary>
            /// <param name="target">
            /// Specifies the framebuffer target. The symbolic constant must be Framebuffer.
            /// </param>
            /// <param name="attachment">
            /// Specifies the attachment point to which renderbuffer should be attached. Must be one of the following symbolic constants: ColorAttachment0, DepthAttachment, or StencilAttachment.
            /// </param>
            /// <param name="renderbuffertarget">
            /// Specifies the renderbuffer target. The symbolic constant must be Renderbuffer.
            /// </param>
            /// <param name="renderbuffer">
            /// Specifies the renderbuffer object that is to be attached.
            /// </param>
            [AutoGenerated(Category = "OES_framebuffer_object", Version = "", EntryPoint = "glFramebufferRenderbufferOES")]
            public static void FramebufferRenderbuffer(OpenTK.Graphics.ES11.FramebufferTarget target, OpenTK.Graphics.ES11.FramebufferAttachment attachment, OpenTK.Graphics.ES11.RenderbufferTarget renderbuffertarget, int renderbuffer) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_framebuffer_object]
            /// Attach a renderbuffer object to a framebuffer object
            /// </summary>
            /// <param name="target">
            /// Specifies the framebuffer target. The symbolic constant must be Framebuffer.
            /// </param>
            /// <param name="attachment">
            /// Specifies the attachment point to which renderbuffer should be attached. Must be one of the following symbolic constants: ColorAttachment0, DepthAttachment, or StencilAttachment.
            /// </param>
            /// <param name="renderbuffertarget">
            /// Specifies the renderbuffer target. The symbolic constant must be Renderbuffer.
            /// </param>
            /// <param name="renderbuffer">
            /// Specifies the renderbuffer object that is to be attached.
            /// </param>
            [AutoGenerated(Category = "OES_framebuffer_object", Version = "", EntryPoint = "glFramebufferRenderbufferOES")]
            public static void FramebufferRenderbuffer(OpenTK.Graphics.ES11.FramebufferTarget target, OpenTK.Graphics.ES11.FramebufferAttachment attachment, OpenTK.Graphics.ES11.RenderbufferTarget renderbuffertarget, uint renderbuffer) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_framebuffer_object]
            /// Attach a texture image to a framebuffer object
            /// </summary>
            /// <param name="target">
            /// Specifies the framebuffer target. The symbolic constant must be Framebuffer.
            /// </param>
            /// <param name="attachment">
            /// Specifies the attachment point to which an image from texture should be attached. Must be one of the following symbolic constants: ColorAttachment0, DepthAttachment, or StencilAttachment.
            /// </param>
            /// <param name="textarget">
            /// Specifies the texture target. Must be one of the following symbolic constants: Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.
            /// </param>
            /// <param name="texture">
            /// Specifies the texture object whose image is to be attached.
            /// </param>
            /// <param name="level">
            /// Specifies the mipmap level of the texture image to be attached, which must be 0.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "OES_framebuffer_object", Version = "", EntryPoint = "glFramebufferTexture2DOES")]
            public static void FramebufferTexture2D(OpenTK.Graphics.ES11.All target, OpenTK.Graphics.ES11.All attachment, OpenTK.Graphics.ES11.All textarget, int texture, int level) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_framebuffer_object]
            /// Attach a texture image to a framebuffer object
            /// </summary>
            /// <param name="target">
            /// Specifies the framebuffer target. The symbolic constant must be Framebuffer.
            /// </param>
            /// <param name="attachment">
            /// Specifies the attachment point to which an image from texture should be attached. Must be one of the following symbolic constants: ColorAttachment0, DepthAttachment, or StencilAttachment.
            /// </param>
            /// <param name="textarget">
            /// Specifies the texture target. Must be one of the following symbolic constants: Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.
            /// </param>
            /// <param name="texture">
            /// Specifies the texture object whose image is to be attached.
            /// </param>
            /// <param name="level">
            /// Specifies the mipmap level of the texture image to be attached, which must be 0.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "OES_framebuffer_object", Version = "", EntryPoint = "glFramebufferTexture2DOES")]
            public static void FramebufferTexture2D(OpenTK.Graphics.ES11.All target, OpenTK.Graphics.ES11.All attachment, OpenTK.Graphics.ES11.All textarget, uint texture, int level) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_framebuffer_object]
            /// Attach a texture image to a framebuffer object
            /// </summary>
            /// <param name="target">
            /// Specifies the framebuffer target. The symbolic constant must be Framebuffer.
            /// </param>
            /// <param name="attachment">
            /// Specifies the attachment point to which an image from texture should be attached. Must be one of the following symbolic constants: ColorAttachment0, DepthAttachment, or StencilAttachment.
            /// </param>
            /// <param name="textarget">
            /// Specifies the texture target. Must be one of the following symbolic constants: Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.
            /// </param>
            /// <param name="texture">
            /// Specifies the texture object whose image is to be attached.
            /// </param>
            /// <param name="level">
            /// Specifies the mipmap level of the texture image to be attached, which must be 0.
            /// </param>
            [AutoGenerated(Category = "OES_framebuffer_object", Version = "", EntryPoint = "glFramebufferTexture2DOES")]
            public static void FramebufferTexture2D(OpenTK.Graphics.ES11.FramebufferTarget target, OpenTK.Graphics.ES11.FramebufferAttachment attachment, OpenTK.Graphics.ES11.TextureTarget textarget, int texture, int level) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_framebuffer_object]
            /// Attach a texture image to a framebuffer object
            /// </summary>
            /// <param name="target">
            /// Specifies the framebuffer target. The symbolic constant must be Framebuffer.
            /// </param>
            /// <param name="attachment">
            /// Specifies the attachment point to which an image from texture should be attached. Must be one of the following symbolic constants: ColorAttachment0, DepthAttachment, or StencilAttachment.
            /// </param>
            /// <param name="textarget">
            /// Specifies the texture target. Must be one of the following symbolic constants: Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.
            /// </param>
            /// <param name="texture">
            /// Specifies the texture object whose image is to be attached.
            /// </param>
            /// <param name="level">
            /// Specifies the mipmap level of the texture image to be attached, which must be 0.
            /// </param>
            [AutoGenerated(Category = "OES_framebuffer_object", Version = "", EntryPoint = "glFramebufferTexture2DOES")]
            public static void FramebufferTexture2D(OpenTK.Graphics.ES11.FramebufferTarget target, OpenTK.Graphics.ES11.FramebufferAttachment attachment, OpenTK.Graphics.ES11.TextureTarget textarget, uint texture, int level) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_single_precision]
            /// Multiply the current matrix by a perspective matrix
            /// </summary>
            /// <param name="l">
            /// Specify the coordinates for the left and right vertical clipping planes.
            /// </param>
            /// <param name="r">
            /// Specify the coordinates for the left and right vertical clipping planes.
            /// </param>
            /// <param name="b">
            /// Specify the coordinates for the bottom and top horizontal clipping planes.
            /// </param>
            /// <param name="t">
            /// Specify the coordinates for the bottom and top horizontal clipping planes.
            /// </param>
            /// <param name="n">
            /// Specify the distances to the near and far depth clipping planes. Both distances must be positive.
            /// </param>
            /// <param name="f">
            /// Specify the distances to the near and far depth clipping planes. Both distances must be positive.
            /// </param>
            [AutoGenerated(Category = "OES_single_precision", Version = "", EntryPoint = "glFrustumfOES")]
            public static void Frustum(float l, float r, float b, float t, float n, float f) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="l">
            /// </param>
            /// <param name="r">
            /// </param>
            /// <param name="b">
            /// </param>
            /// <param name="t">
            /// </param>
            /// <param name="n">
            /// </param>
            /// <param name="f">
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glFrustumxOES")]
            public static void Frustumx(int l, int r, int b, int t, int n, int f) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_framebuffer_object]
            /// Generate a complete set of mipmaps for a texture object
            /// </summary>
            /// <param name="target">
            /// Specifies the texture target of the active texture unit to which the texture object is bound whose mipmaps will be generated.  Must be one of the following symbolic constants: Texture2D or TextureCubeMap.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "OES_framebuffer_object", Version = "", EntryPoint = "glGenerateMipmapOES")]
            public static void GenerateMipmap(OpenTK.Graphics.ES11.All target) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_framebuffer_object]
            /// Generate a complete set of mipmaps for a texture object
            /// </summary>
            /// <param name="target">
            /// Specifies the texture target of the active texture unit to which the texture object is bound whose mipmaps will be generated.  Must be one of the following symbolic constants: Texture2D or TextureCubeMap.
            /// </param>
            [AutoGenerated(Category = "OES_framebuffer_object", Version = "", EntryPoint = "glGenerateMipmapOES")]
            public static void GenerateMipmap(OpenTK.Graphics.ES11.TextureTarget target) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_framebuffer_object]
            /// Generate framebuffer object names
            /// </summary>
            [AutoGenerated(Category = "OES_framebuffer_object", Version = "", EntryPoint = "glGenFramebuffersOES")]
            public static int GenFramebuffer() { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_framebuffer_object]
            /// Generate framebuffer object names
            /// </summary>
            /// <param name="n">
            /// Specifies the number of framebuffer object names to be generated.
            /// </param>
            /// <param name="framebuffers">
            /// [length: n]
            /// Specifies an array in which the generated framebuffer object names are stored.
            /// </param>
            [AutoGenerated(Category = "OES_framebuffer_object", Version = "", EntryPoint = "glGenFramebuffersOES")]
            public static void GenFramebuffers(int n, [OutAttribute, CountAttribute(Parameter = "n")] int[] framebuffers) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_framebuffer_object]
            /// Generate framebuffer object names
            /// </summary>
            /// <param name="n">
            /// Specifies the number of framebuffer object names to be generated.
            /// </param>
            /// <param name="framebuffers">
            /// [length: n]
            /// Specifies an array in which the generated framebuffer object names are stored.
            /// </param>
            [AutoGenerated(Category = "OES_framebuffer_object", Version = "", EntryPoint = "glGenFramebuffersOES")]
            public static void GenFramebuffers(int n, [OutAttribute, CountAttribute(Parameter = "n")] out int framebuffers) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_framebuffer_object]
            /// Generate framebuffer object names
            /// </summary>
            /// <param name="n">
            /// Specifies the number of framebuffer object names to be generated.
            /// </param>
            /// <param name="framebuffers">
            /// [length: n]
            /// Specifies an array in which the generated framebuffer object names are stored.
            /// </param>
            [AutoGenerated(Category = "OES_framebuffer_object", Version = "", EntryPoint = "glGenFramebuffersOES")]
            public static unsafe void GenFramebuffers(int n, [OutAttribute, CountAttribute(Parameter = "n")] int* framebuffers) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_framebuffer_object]
            /// Generate framebuffer object names
            /// </summary>
            /// <param name="n">
            /// Specifies the number of framebuffer object names to be generated.
            /// </param>
            /// <param name="framebuffers">
            /// [length: n]
            /// Specifies an array in which the generated framebuffer object names are stored.
            /// </param>
            [AutoGenerated(Category = "OES_framebuffer_object", Version = "", EntryPoint = "glGenFramebuffersOES")]
            public static void GenFramebuffers(int n, [OutAttribute, CountAttribute(Parameter = "n")] uint[] framebuffers) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_framebuffer_object]
            /// Generate framebuffer object names
            /// </summary>
            /// <param name="n">
            /// Specifies the number of framebuffer object names to be generated.
            /// </param>
            /// <param name="framebuffers">
            /// [length: n]
            /// Specifies an array in which the generated framebuffer object names are stored.
            /// </param>
            [AutoGenerated(Category = "OES_framebuffer_object", Version = "", EntryPoint = "glGenFramebuffersOES")]
            public static void GenFramebuffers(int n, [OutAttribute, CountAttribute(Parameter = "n")] out uint framebuffers) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_framebuffer_object]
            /// Generate framebuffer object names
            /// </summary>
            /// <param name="n">
            /// Specifies the number of framebuffer object names to be generated.
            /// </param>
            /// <param name="framebuffers">
            /// [length: n]
            /// Specifies an array in which the generated framebuffer object names are stored.
            /// </param>
            [AutoGenerated(Category = "OES_framebuffer_object", Version = "", EntryPoint = "glGenFramebuffersOES")]
            public static unsafe void GenFramebuffers(int n, [OutAttribute, CountAttribute(Parameter = "n")] uint* framebuffers) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_framebuffer_object]
            /// Generate renderbuffer object names
            /// </summary>
            [AutoGenerated(Category = "OES_framebuffer_object", Version = "", EntryPoint = "glGenRenderbuffersOES")]
            public static int GenRenderbuffer() { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_framebuffer_object]
            /// Generate renderbuffer object names
            /// </summary>
            /// <param name="n">
            /// Specifies the number of renderbuffer object names to be generated.
            /// </param>
            /// <param name="renderbuffers">
            /// [length: n]
            /// Specifies an array in which the generated renderbuffer object names are stored.
            /// </param>
            [AutoGenerated(Category = "OES_framebuffer_object", Version = "", EntryPoint = "glGenRenderbuffersOES")]
            public static void GenRenderbuffers(int n, [OutAttribute, CountAttribute(Parameter = "n")] int[] renderbuffers) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_framebuffer_object]
            /// Generate renderbuffer object names
            /// </summary>
            /// <param name="n">
            /// Specifies the number of renderbuffer object names to be generated.
            /// </param>
            /// <param name="renderbuffers">
            /// [length: n]
            /// Specifies an array in which the generated renderbuffer object names are stored.
            /// </param>
            [AutoGenerated(Category = "OES_framebuffer_object", Version = "", EntryPoint = "glGenRenderbuffersOES")]
            public static void GenRenderbuffers(int n, [OutAttribute, CountAttribute(Parameter = "n")] out int renderbuffers) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_framebuffer_object]
            /// Generate renderbuffer object names
            /// </summary>
            /// <param name="n">
            /// Specifies the number of renderbuffer object names to be generated.
            /// </param>
            /// <param name="renderbuffers">
            /// [length: n]
            /// Specifies an array in which the generated renderbuffer object names are stored.
            /// </param>
            [AutoGenerated(Category = "OES_framebuffer_object", Version = "", EntryPoint = "glGenRenderbuffersOES")]
            public static unsafe void GenRenderbuffers(int n, [OutAttribute, CountAttribute(Parameter = "n")] int* renderbuffers) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_framebuffer_object]
            /// Generate renderbuffer object names
            /// </summary>
            /// <param name="n">
            /// Specifies the number of renderbuffer object names to be generated.
            /// </param>
            /// <param name="renderbuffers">
            /// [length: n]
            /// Specifies an array in which the generated renderbuffer object names are stored.
            /// </param>
            [AutoGenerated(Category = "OES_framebuffer_object", Version = "", EntryPoint = "glGenRenderbuffersOES")]
            public static void GenRenderbuffers(int n, [OutAttribute, CountAttribute(Parameter = "n")] uint[] renderbuffers) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_framebuffer_object]
            /// Generate renderbuffer object names
            /// </summary>
            /// <param name="n">
            /// Specifies the number of renderbuffer object names to be generated.
            /// </param>
            /// <param name="renderbuffers">
            /// [length: n]
            /// Specifies an array in which the generated renderbuffer object names are stored.
            /// </param>
            [AutoGenerated(Category = "OES_framebuffer_object", Version = "", EntryPoint = "glGenRenderbuffersOES")]
            public static void GenRenderbuffers(int n, [OutAttribute, CountAttribute(Parameter = "n")] out uint renderbuffers) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_framebuffer_object]
            /// Generate renderbuffer object names
            /// </summary>
            /// <param name="n">
            /// Specifies the number of renderbuffer object names to be generated.
            /// </param>
            /// <param name="renderbuffers">
            /// [length: n]
            /// Specifies an array in which the generated renderbuffer object names are stored.
            /// </param>
            [AutoGenerated(Category = "OES_framebuffer_object", Version = "", EntryPoint = "glGenRenderbuffersOES")]
            public static unsafe void GenRenderbuffers(int n, [OutAttribute, CountAttribute(Parameter = "n")] uint* renderbuffers) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_vertex_array_object]
            /// Generate vertex array object names
            /// </summary>
            [AutoGenerated(Category = "OES_vertex_array_object", Version = "", EntryPoint = "glGenVertexArraysOES")]
            public static int GenVertexArray() { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_vertex_array_object]
            /// Generate vertex array object names
            /// </summary>
            /// <param name="n">
            /// Specifies the number of vertex array object names to generate.
            /// </param>
            /// <param name="arrays">
            /// [length: n]
            /// Specifies an array in which the generated vertex array object names are stored.
            /// </param>
            [AutoGenerated(Category = "OES_vertex_array_object", Version = "", EntryPoint = "glGenVertexArraysOES")]
            public static void GenVertexArrays(int n, [OutAttribute, CountAttribute(Parameter = "n")] int[] arrays) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_vertex_array_object]
            /// Generate vertex array object names
            /// </summary>
            /// <param name="n">
            /// Specifies the number of vertex array object names to generate.
            /// </param>
            /// <param name="arrays">
            /// [length: n]
            /// Specifies an array in which the generated vertex array object names are stored.
            /// </param>
            [AutoGenerated(Category = "OES_vertex_array_object", Version = "", EntryPoint = "glGenVertexArraysOES")]
            public static void GenVertexArrays(int n, [OutAttribute, CountAttribute(Parameter = "n")] out int arrays) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_vertex_array_object]
            /// Generate vertex array object names
            /// </summary>
            /// <param name="n">
            /// Specifies the number of vertex array object names to generate.
            /// </param>
            /// <param name="arrays">
            /// [length: n]
            /// Specifies an array in which the generated vertex array object names are stored.
            /// </param>
            [AutoGenerated(Category = "OES_vertex_array_object", Version = "", EntryPoint = "glGenVertexArraysOES")]
            public static unsafe void GenVertexArrays(int n, [OutAttribute, CountAttribute(Parameter = "n")] int* arrays) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_vertex_array_object]
            /// Generate vertex array object names
            /// </summary>
            /// <param name="n">
            /// Specifies the number of vertex array object names to generate.
            /// </param>
            /// <param name="arrays">
            /// [length: n]
            /// Specifies an array in which the generated vertex array object names are stored.
            /// </param>
            [AutoGenerated(Category = "OES_vertex_array_object", Version = "", EntryPoint = "glGenVertexArraysOES")]
            public static void GenVertexArrays(int n, [OutAttribute, CountAttribute(Parameter = "n")] uint[] arrays) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_vertex_array_object]
            /// Generate vertex array object names
            /// </summary>
            /// <param name="n">
            /// Specifies the number of vertex array object names to generate.
            /// </param>
            /// <param name="arrays">
            /// [length: n]
            /// Specifies an array in which the generated vertex array object names are stored.
            /// </param>
            [AutoGenerated(Category = "OES_vertex_array_object", Version = "", EntryPoint = "glGenVertexArraysOES")]
            public static void GenVertexArrays(int n, [OutAttribute, CountAttribute(Parameter = "n")] out uint arrays) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_vertex_array_object]
            /// Generate vertex array object names
            /// </summary>
            /// <param name="n">
            /// Specifies the number of vertex array object names to generate.
            /// </param>
            /// <param name="arrays">
            /// [length: n]
            /// Specifies an array in which the generated vertex array object names are stored.
            /// </param>
            [AutoGenerated(Category = "OES_vertex_array_object", Version = "", EntryPoint = "glGenVertexArraysOES")]
            public static unsafe void GenVertexArrays(int n, [OutAttribute, CountAttribute(Parameter = "n")] uint* arrays) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_mapbuffer]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "OES_mapbuffer", Version = "", EntryPoint = "glGetBufferPointervOES")]
            public static void GetBufferPointer(OpenTK.Graphics.ES11.All target, OpenTK.Graphics.ES11.All pname, [OutAttribute] IntPtr @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_mapbuffer]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "OES_mapbuffer", Version = "", EntryPoint = "glGetBufferPointervOES")]
            public static void GetBufferPointer<T2>(OpenTK.Graphics.ES11.All target, OpenTK.Graphics.ES11.All pname, [InAttribute, OutAttribute] T2[] @params)
                where T2 : struct
             { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_mapbuffer]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "OES_mapbuffer", Version = "", EntryPoint = "glGetBufferPointervOES")]
            public static void GetBufferPointer<T2>(OpenTK.Graphics.ES11.All target, OpenTK.Graphics.ES11.All pname, [InAttribute, OutAttribute] T2[,] @params)
                where T2 : struct
             { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_mapbuffer]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "OES_mapbuffer", Version = "", EntryPoint = "glGetBufferPointervOES")]
            public static void GetBufferPointer<T2>(OpenTK.Graphics.ES11.All target, OpenTK.Graphics.ES11.All pname, [InAttribute, OutAttribute] T2[,,] @params)
                where T2 : struct
             { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_mapbuffer]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "OES_mapbuffer", Version = "", EntryPoint = "glGetBufferPointervOES")]
            public static void GetBufferPointer<T2>(OpenTK.Graphics.ES11.All target, OpenTK.Graphics.ES11.All pname, [InAttribute, OutAttribute] ref T2 @params)
                where T2 : struct
             { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_mapbuffer]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// </param>
            [AutoGenerated(Category = "OES_mapbuffer", Version = "", EntryPoint = "glGetBufferPointervOES")]
            public static void GetBufferPointer(OpenTK.Graphics.ES11.BufferTargetArb target, OpenTK.Graphics.ES11.All pname, [OutAttribute] IntPtr @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_mapbuffer]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// </param>
            [AutoGenerated(Category = "OES_mapbuffer", Version = "", EntryPoint = "glGetBufferPointervOES")]
            public static void GetBufferPointer<T2>(OpenTK.Graphics.ES11.BufferTargetArb target, OpenTK.Graphics.ES11.All pname, [InAttribute, OutAttribute] T2[] @params)
                where T2 : struct
             { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_mapbuffer]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// </param>
            [AutoGenerated(Category = "OES_mapbuffer", Version = "", EntryPoint = "glGetBufferPointervOES")]
            public static void GetBufferPointer<T2>(OpenTK.Graphics.ES11.BufferTargetArb target, OpenTK.Graphics.ES11.All pname, [InAttribute, OutAttribute] T2[,] @params)
                where T2 : struct
             { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_mapbuffer]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// </param>
            [AutoGenerated(Category = "OES_mapbuffer", Version = "", EntryPoint = "glGetBufferPointervOES")]
            public static void GetBufferPointer<T2>(OpenTK.Graphics.ES11.BufferTargetArb target, OpenTK.Graphics.ES11.All pname, [InAttribute, OutAttribute] T2[,,] @params)
                where T2 : struct
             { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_mapbuffer]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// </param>
            [AutoGenerated(Category = "OES_mapbuffer", Version = "", EntryPoint = "glGetBufferPointervOES")]
            public static void GetBufferPointer<T2>(OpenTK.Graphics.ES11.BufferTargetArb target, OpenTK.Graphics.ES11.All pname, [InAttribute, OutAttribute] ref T2 @params)
                where T2 : struct
             { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_single_precision]
            /// Return the coefficients of the specified clipping plane
            /// </summary>
            /// <param name="plane">
            /// Specifies a clipping plane. The number of clipping planes depends on the implementation, but at least six clipping planes are supported. They are identified by symbolic names of the form ClipPlane  where i ranges from 0 to the value of MaxClipPlanes - 1.
            /// </param>
            /// <param name="equation">
            /// [length: 4]
            /// Returns four double-precision values that are the coefficients of the plane equation of plane in eye coordinates. The initial value is (0, 0, 0, 0).
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "OES_single_precision", Version = "", EntryPoint = "glGetClipPlanefOES")]
            public static void GetClipPlane(OpenTK.Graphics.ES11.All plane, [OutAttribute, CountAttribute(Count = 4)] float[] equation) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_single_precision]
            /// Return the coefficients of the specified clipping plane
            /// </summary>
            /// <param name="plane">
            /// Specifies a clipping plane. The number of clipping planes depends on the implementation, but at least six clipping planes are supported. They are identified by symbolic names of the form ClipPlane  where i ranges from 0 to the value of MaxClipPlanes - 1.
            /// </param>
            /// <param name="equation">
            /// [length: 4]
            /// Returns four double-precision values that are the coefficients of the plane equation of plane in eye coordinates. The initial value is (0, 0, 0, 0).
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "OES_single_precision", Version = "", EntryPoint = "glGetClipPlanefOES")]
            public static void GetClipPlane(OpenTK.Graphics.ES11.All plane, [OutAttribute, CountAttribute(Count = 4)] out float equation) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_single_precision]
            /// Return the coefficients of the specified clipping plane
            /// </summary>
            /// <param name="plane">
            /// Specifies a clipping plane. The number of clipping planes depends on the implementation, but at least six clipping planes are supported. They are identified by symbolic names of the form ClipPlane  where i ranges from 0 to the value of MaxClipPlanes - 1.
            /// </param>
            /// <param name="equation">
            /// [length: 4]
            /// Returns four double-precision values that are the coefficients of the plane equation of plane in eye coordinates. The initial value is (0, 0, 0, 0).
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "OES_single_precision", Version = "", EntryPoint = "glGetClipPlanefOES")]
            public static unsafe void GetClipPlane(OpenTK.Graphics.ES11.All plane, [OutAttribute, CountAttribute(Count = 4)] float* equation) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_single_precision]
            /// Return the coefficients of the specified clipping plane
            /// </summary>
            /// <param name="plane">
            /// Specifies a clipping plane. The number of clipping planes depends on the implementation, but at least six clipping planes are supported. They are identified by symbolic names of the form ClipPlane  where i ranges from 0 to the value of MaxClipPlanes - 1.
            /// </param>
            /// <param name="equation">
            /// [length: 4]
            /// Returns four double-precision values that are the coefficients of the plane equation of plane in eye coordinates. The initial value is (0, 0, 0, 0).
            /// </param>
            [AutoGenerated(Category = "OES_single_precision", Version = "", EntryPoint = "glGetClipPlanefOES")]
            public static void GetClipPlane(OpenTK.Graphics.ES11.ClipPlaneName plane, [OutAttribute, CountAttribute(Count = 4)] float[] equation) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_single_precision]
            /// Return the coefficients of the specified clipping plane
            /// </summary>
            /// <param name="plane">
            /// Specifies a clipping plane. The number of clipping planes depends on the implementation, but at least six clipping planes are supported. They are identified by symbolic names of the form ClipPlane  where i ranges from 0 to the value of MaxClipPlanes - 1.
            /// </param>
            /// <param name="equation">
            /// [length: 4]
            /// Returns four double-precision values that are the coefficients of the plane equation of plane in eye coordinates. The initial value is (0, 0, 0, 0).
            /// </param>
            [AutoGenerated(Category = "OES_single_precision", Version = "", EntryPoint = "glGetClipPlanefOES")]
            public static void GetClipPlane(OpenTK.Graphics.ES11.ClipPlaneName plane, [OutAttribute, CountAttribute(Count = 4)] out float equation) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_single_precision]
            /// Return the coefficients of the specified clipping plane
            /// </summary>
            /// <param name="plane">
            /// Specifies a clipping plane. The number of clipping planes depends on the implementation, but at least six clipping planes are supported. They are identified by symbolic names of the form ClipPlane  where i ranges from 0 to the value of MaxClipPlanes - 1.
            /// </param>
            /// <param name="equation">
            /// [length: 4]
            /// Returns four double-precision values that are the coefficients of the plane equation of plane in eye coordinates. The initial value is (0, 0, 0, 0).
            /// </param>
            [AutoGenerated(Category = "OES_single_precision", Version = "", EntryPoint = "glGetClipPlanefOES")]
            public static unsafe void GetClipPlane(OpenTK.Graphics.ES11.ClipPlaneName plane, [OutAttribute, CountAttribute(Count = 4)] float* equation) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="plane">
            /// </param>
            /// <param name="equation">
            /// [length: 4]
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glGetClipPlanexOES")]
            public static void GetClipPlanex(OpenTK.Graphics.ES11.All plane, [OutAttribute, CountAttribute(Count = 4)] int[] equation) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="plane">
            /// </param>
            /// <param name="equation">
            /// [length: 4]
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glGetClipPlanexOES")]
            public static void GetClipPlanex(OpenTK.Graphics.ES11.All plane, [OutAttribute, CountAttribute(Count = 4)] out int equation) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="plane">
            /// </param>
            /// <param name="equation">
            /// [length: 4]
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glGetClipPlanexOES")]
            public static unsafe void GetClipPlanex(OpenTK.Graphics.ES11.All plane, [OutAttribute, CountAttribute(Count = 4)] int* equation) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="plane">
            /// </param>
            /// <param name="equation">
            /// [length: 4]
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glGetClipPlanexOES")]
            public static void GetClipPlanex(OpenTK.Graphics.ES11.ClipPlaneName plane, [OutAttribute, CountAttribute(Count = 4)] int[] equation) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="plane">
            /// </param>
            /// <param name="equation">
            /// [length: 4]
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glGetClipPlanexOES")]
            public static void GetClipPlanex(OpenTK.Graphics.ES11.ClipPlaneName plane, [OutAttribute, CountAttribute(Count = 4)] out int equation) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="plane">
            /// </param>
            /// <param name="equation">
            /// [length: 4]
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glGetClipPlanexOES")]
            public static unsafe void GetClipPlanex(OpenTK.Graphics.ES11.ClipPlaneName plane, [OutAttribute, CountAttribute(Count = 4)] int* equation) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glGetConvolutionParameterxvOES")]
            public static void GetConvolutionParameterx(OpenTK.Graphics.ES11.All target, OpenTK.Graphics.ES11.All pname, [OutAttribute, CountAttribute(Computed = "pname")] int[] @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glGetConvolutionParameterxvOES")]
            public static void GetConvolutionParameterx(OpenTK.Graphics.ES11.All target, OpenTK.Graphics.ES11.All pname, [OutAttribute, CountAttribute(Computed = "pname")] out int @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glGetConvolutionParameterxvOES")]
            public static unsafe void GetConvolutionParameterx(OpenTK.Graphics.ES11.All target, OpenTK.Graphics.ES11.All pname, [OutAttribute, CountAttribute(Computed = "pname")] int* @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="pname">
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glGetFixedvOES")]
            public static int GetFixed(OpenTK.Graphics.ES11.All pname) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="pname">
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glGetFixedvOES")]
            public static int GetFixed(OpenTK.Graphics.ES11.GetPName pname) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glGetFixedvOES")]
            public static void GetFixed(OpenTK.Graphics.ES11.All pname, [OutAttribute, CountAttribute(Computed = "pname")] int[] @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glGetFixedvOES")]
            public static void GetFixed(OpenTK.Graphics.ES11.All pname, [OutAttribute, CountAttribute(Computed = "pname")] out int @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glGetFixedvOES")]
            public static unsafe void GetFixed(OpenTK.Graphics.ES11.All pname, [OutAttribute, CountAttribute(Computed = "pname")] int* @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glGetFixedvOES")]
            public static void GetFixed(OpenTK.Graphics.ES11.GetPName pname, [OutAttribute, CountAttribute(Computed = "pname")] int[] @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glGetFixedvOES")]
            public static void GetFixed(OpenTK.Graphics.ES11.GetPName pname, [OutAttribute, CountAttribute(Computed = "pname")] out int @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glGetFixedvOES")]
            public static unsafe void GetFixed(OpenTK.Graphics.ES11.GetPName pname, [OutAttribute, CountAttribute(Computed = "pname")] int* @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_framebuffer_object]
            /// Retrieve information about attachments of a bound framebuffer object
            /// </summary>
            /// <param name="target">
            /// Specifies the target of the query operation.
            /// </param>
            /// <param name="attachment">
            /// Specifies the attachment within target
            /// </param>
            /// <param name="pname">
            /// Specifies the parameter of attachment to query.
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// Specifies the address of a variable receive the value of pname for attachment.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "OES_framebuffer_object", Version = "", EntryPoint = "glGetFramebufferAttachmentParameterivOES")]
            public static void GetFramebufferAttachmentParameter(OpenTK.Graphics.ES11.All target, OpenTK.Graphics.ES11.All attachment, OpenTK.Graphics.ES11.All pname, [OutAttribute, CountAttribute(Computed = "pname")] int[] @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_framebuffer_object]
            /// Retrieve information about attachments of a bound framebuffer object
            /// </summary>
            /// <param name="target">
            /// Specifies the target of the query operation.
            /// </param>
            /// <param name="attachment">
            /// Specifies the attachment within target
            /// </param>
            /// <param name="pname">
            /// Specifies the parameter of attachment to query.
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// Specifies the address of a variable receive the value of pname for attachment.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "OES_framebuffer_object", Version = "", EntryPoint = "glGetFramebufferAttachmentParameterivOES")]
            public static void GetFramebufferAttachmentParameter(OpenTK.Graphics.ES11.All target, OpenTK.Graphics.ES11.All attachment, OpenTK.Graphics.ES11.All pname, [OutAttribute, CountAttribute(Computed = "pname")] out int @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_framebuffer_object]
            /// Retrieve information about attachments of a bound framebuffer object
            /// </summary>
            /// <param name="target">
            /// Specifies the target of the query operation.
            /// </param>
            /// <param name="attachment">
            /// Specifies the attachment within target
            /// </param>
            /// <param name="pname">
            /// Specifies the parameter of attachment to query.
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// Specifies the address of a variable receive the value of pname for attachment.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "OES_framebuffer_object", Version = "", EntryPoint = "glGetFramebufferAttachmentParameterivOES")]
            public static unsafe void GetFramebufferAttachmentParameter(OpenTK.Graphics.ES11.All target, OpenTK.Graphics.ES11.All attachment, OpenTK.Graphics.ES11.All pname, [OutAttribute, CountAttribute(Computed = "pname")] int* @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_framebuffer_object]
            /// Retrieve information about attachments of a bound framebuffer object
            /// </summary>
            /// <param name="target">
            /// Specifies the target of the query operation.
            /// </param>
            /// <param name="attachment">
            /// Specifies the attachment within target
            /// </param>
            /// <param name="pname">
            /// Specifies the parameter of attachment to query.
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// Specifies the address of a variable receive the value of pname for attachment.
            /// </param>
            [AutoGenerated(Category = "OES_framebuffer_object", Version = "", EntryPoint = "glGetFramebufferAttachmentParameterivOES")]
            public static void GetFramebufferAttachmentParameter(OpenTK.Graphics.ES11.FramebufferTarget target, OpenTK.Graphics.ES11.FramebufferAttachment attachment, OpenTK.Graphics.ES11.FramebufferAttachmentParameterName pname, [OutAttribute, CountAttribute(Computed = "pname")] int[] @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_framebuffer_object]
            /// Retrieve information about attachments of a bound framebuffer object
            /// </summary>
            /// <param name="target">
            /// Specifies the target of the query operation.
            /// </param>
            /// <param name="attachment">
            /// Specifies the attachment within target
            /// </param>
            /// <param name="pname">
            /// Specifies the parameter of attachment to query.
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// Specifies the address of a variable receive the value of pname for attachment.
            /// </param>
            [AutoGenerated(Category = "OES_framebuffer_object", Version = "", EntryPoint = "glGetFramebufferAttachmentParameterivOES")]
            public static void GetFramebufferAttachmentParameter(OpenTK.Graphics.ES11.FramebufferTarget target, OpenTK.Graphics.ES11.FramebufferAttachment attachment, OpenTK.Graphics.ES11.FramebufferAttachmentParameterName pname, [OutAttribute, CountAttribute(Computed = "pname")] out int @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_framebuffer_object]
            /// Retrieve information about attachments of a bound framebuffer object
            /// </summary>
            /// <param name="target">
            /// Specifies the target of the query operation.
            /// </param>
            /// <param name="attachment">
            /// Specifies the attachment within target
            /// </param>
            /// <param name="pname">
            /// Specifies the parameter of attachment to query.
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// Specifies the address of a variable receive the value of pname for attachment.
            /// </param>
            [AutoGenerated(Category = "OES_framebuffer_object", Version = "", EntryPoint = "glGetFramebufferAttachmentParameterivOES")]
            public static unsafe void GetFramebufferAttachmentParameter(OpenTK.Graphics.ES11.FramebufferTarget target, OpenTK.Graphics.ES11.FramebufferAttachment attachment, OpenTK.Graphics.ES11.FramebufferAttachmentParameterName pname, [OutAttribute, CountAttribute(Computed = "pname")] int* @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glGetHistogramParameterxvOES")]
            public static void GetHistogramParameterx(OpenTK.Graphics.ES11.All target, OpenTK.Graphics.ES11.All pname, [OutAttribute, CountAttribute(Computed = "pname")] int[] @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glGetHistogramParameterxvOES")]
            public static void GetHistogramParameterx(OpenTK.Graphics.ES11.All target, OpenTK.Graphics.ES11.All pname, [OutAttribute, CountAttribute(Computed = "pname")] out int @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glGetHistogramParameterxvOES")]
            public static unsafe void GetHistogramParameterx(OpenTK.Graphics.ES11.All target, OpenTK.Graphics.ES11.All pname, [OutAttribute, CountAttribute(Computed = "pname")] int* @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glGetHistogramParameterxvOES")]
            public static void GetHistogramParameterx(OpenTK.Graphics.ES11.HistogramTargetExt target, OpenTK.Graphics.ES11.GetHistogramParameterPNameExt pname, [OutAttribute, CountAttribute(Computed = "pname")] int[] @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glGetHistogramParameterxvOES")]
            public static void GetHistogramParameterx(OpenTK.Graphics.ES11.HistogramTargetExt target, OpenTK.Graphics.ES11.GetHistogramParameterPNameExt pname, [OutAttribute, CountAttribute(Computed = "pname")] out int @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glGetHistogramParameterxvOES")]
            public static unsafe void GetHistogramParameterx(OpenTK.Graphics.ES11.HistogramTargetExt target, OpenTK.Graphics.ES11.GetHistogramParameterPNameExt pname, [OutAttribute, CountAttribute(Computed = "pname")] int* @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="light">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glGetLightxOES")]
            public static void GetLightx(OpenTK.Graphics.ES11.All light, OpenTK.Graphics.ES11.All pname, [OutAttribute, CountAttribute(Computed = "pname")] int[] @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="light">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glGetLightxOES")]
            public static void GetLightx(OpenTK.Graphics.ES11.All light, OpenTK.Graphics.ES11.All pname, [OutAttribute, CountAttribute(Computed = "pname")] out int @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="light">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glGetLightxOES")]
            public static unsafe void GetLightx(OpenTK.Graphics.ES11.All light, OpenTK.Graphics.ES11.All pname, [OutAttribute, CountAttribute(Computed = "pname")] int* @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="light">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glGetLightxOES")]
            public static void GetLightx(OpenTK.Graphics.ES11.LightName light, OpenTK.Graphics.ES11.LightParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] int[] @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="light">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glGetLightxOES")]
            public static void GetLightx(OpenTK.Graphics.ES11.LightName light, OpenTK.Graphics.ES11.LightParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] out int @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="light">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glGetLightxOES")]
            public static unsafe void GetLightx(OpenTK.Graphics.ES11.LightName light, OpenTK.Graphics.ES11.LightParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] int* @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="query">
            /// </param>
            /// <param name="v">
            /// [length: COMPSIZE(query)]
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glGetMapxvOES")]
            public static void GetMapx(OpenTK.Graphics.ES11.All target, OpenTK.Graphics.ES11.All query, [OutAttribute, CountAttribute(Computed = "query")] int[] v) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="query">
            /// </param>
            /// <param name="v">
            /// [length: COMPSIZE(query)]
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glGetMapxvOES")]
            public static void GetMapx(OpenTK.Graphics.ES11.All target, OpenTK.Graphics.ES11.All query, [OutAttribute, CountAttribute(Computed = "query")] out int v) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="query">
            /// </param>
            /// <param name="v">
            /// [length: COMPSIZE(query)]
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glGetMapxvOES")]
            public static unsafe void GetMapx(OpenTK.Graphics.ES11.All target, OpenTK.Graphics.ES11.All query, [OutAttribute, CountAttribute(Computed = "query")] int* v) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="query">
            /// </param>
            /// <param name="v">
            /// [length: COMPSIZE(query)]
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glGetMapxvOES")]
            public static void GetMapx(OpenTK.Graphics.ES11.MapTarget target, OpenTK.Graphics.ES11.GetMapQuery query, [OutAttribute, CountAttribute(Computed = "query")] int[] v) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="query">
            /// </param>
            /// <param name="v">
            /// [length: COMPSIZE(query)]
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glGetMapxvOES")]
            public static void GetMapx(OpenTK.Graphics.ES11.MapTarget target, OpenTK.Graphics.ES11.GetMapQuery query, [OutAttribute, CountAttribute(Computed = "query")] out int v) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="query">
            /// </param>
            /// <param name="v">
            /// [length: COMPSIZE(query)]
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glGetMapxvOES")]
            public static unsafe void GetMapx(OpenTK.Graphics.ES11.MapTarget target, OpenTK.Graphics.ES11.GetMapQuery query, [OutAttribute, CountAttribute(Computed = "query")] int* v) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="face">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="param">
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glGetMaterialxOES")]
            public static void GetMaterialx(OpenTK.Graphics.ES11.All face, OpenTK.Graphics.ES11.All pname, int param) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="face">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="param">
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glGetMaterialxOES")]
            public static void GetMaterialx(OpenTK.Graphics.ES11.MaterialFace face, OpenTK.Graphics.ES11.MaterialParameter pname, int param) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="face">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glGetMaterialxvOES")]
            public static void GetMaterialx(OpenTK.Graphics.ES11.All face, OpenTK.Graphics.ES11.All pname, [OutAttribute, CountAttribute(Computed = "pname")] int[] @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="face">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glGetMaterialxvOES")]
            public static unsafe void GetMaterialx(OpenTK.Graphics.ES11.All face, OpenTK.Graphics.ES11.All pname, [OutAttribute, CountAttribute(Computed = "pname")] int* @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="face">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glGetMaterialxvOES")]
            public static void GetMaterialx(OpenTK.Graphics.ES11.MaterialFace face, OpenTK.Graphics.ES11.MaterialParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] int[] @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="face">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glGetMaterialxvOES")]
            public static unsafe void GetMaterialx(OpenTK.Graphics.ES11.MaterialFace face, OpenTK.Graphics.ES11.MaterialParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] int* @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_framebuffer_object]
            /// Retrieve information about a bound renderbuffer object
            /// </summary>
            /// <param name="target">
            /// Specifies the target of the query operation. target must be Renderbuffer.
            /// </param>
            /// <param name="pname">
            /// Specifies the parameter whose value to retrieve from the renderbuffer bound to target.
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// Specifies the address of an array to receive the value of the queried parameter.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "OES_framebuffer_object", Version = "", EntryPoint = "glGetRenderbufferParameterivOES")]
            public static void GetRenderbufferParameter(OpenTK.Graphics.ES11.All target, OpenTK.Graphics.ES11.All pname, [OutAttribute, CountAttribute(Computed = "pname")] int[] @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_framebuffer_object]
            /// Retrieve information about a bound renderbuffer object
            /// </summary>
            /// <param name="target">
            /// Specifies the target of the query operation. target must be Renderbuffer.
            /// </param>
            /// <param name="pname">
            /// Specifies the parameter whose value to retrieve from the renderbuffer bound to target.
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// Specifies the address of an array to receive the value of the queried parameter.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "OES_framebuffer_object", Version = "", EntryPoint = "glGetRenderbufferParameterivOES")]
            public static void GetRenderbufferParameter(OpenTK.Graphics.ES11.All target, OpenTK.Graphics.ES11.All pname, [OutAttribute, CountAttribute(Computed = "pname")] out int @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_framebuffer_object]
            /// Retrieve information about a bound renderbuffer object
            /// </summary>
            /// <param name="target">
            /// Specifies the target of the query operation. target must be Renderbuffer.
            /// </param>
            /// <param name="pname">
            /// Specifies the parameter whose value to retrieve from the renderbuffer bound to target.
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// Specifies the address of an array to receive the value of the queried parameter.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "OES_framebuffer_object", Version = "", EntryPoint = "glGetRenderbufferParameterivOES")]
            public static unsafe void GetRenderbufferParameter(OpenTK.Graphics.ES11.All target, OpenTK.Graphics.ES11.All pname, [OutAttribute, CountAttribute(Computed = "pname")] int* @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_framebuffer_object]
            /// Retrieve information about a bound renderbuffer object
            /// </summary>
            /// <param name="target">
            /// Specifies the target of the query operation. target must be Renderbuffer.
            /// </param>
            /// <param name="pname">
            /// Specifies the parameter whose value to retrieve from the renderbuffer bound to target.
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// Specifies the address of an array to receive the value of the queried parameter.
            /// </param>
            [AutoGenerated(Category = "OES_framebuffer_object", Version = "", EntryPoint = "glGetRenderbufferParameterivOES")]
            public static void GetRenderbufferParameter(OpenTK.Graphics.ES11.RenderbufferTarget target, OpenTK.Graphics.ES11.RenderbufferParameterName pname, [OutAttribute, CountAttribute(Computed = "pname")] int[] @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_framebuffer_object]
            /// Retrieve information about a bound renderbuffer object
            /// </summary>
            /// <param name="target">
            /// Specifies the target of the query operation. target must be Renderbuffer.
            /// </param>
            /// <param name="pname">
            /// Specifies the parameter whose value to retrieve from the renderbuffer bound to target.
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// Specifies the address of an array to receive the value of the queried parameter.
            /// </param>
            [AutoGenerated(Category = "OES_framebuffer_object", Version = "", EntryPoint = "glGetRenderbufferParameterivOES")]
            public static void GetRenderbufferParameter(OpenTK.Graphics.ES11.RenderbufferTarget target, OpenTK.Graphics.ES11.RenderbufferParameterName pname, [OutAttribute, CountAttribute(Computed = "pname")] out int @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_framebuffer_object]
            /// Retrieve information about a bound renderbuffer object
            /// </summary>
            /// <param name="target">
            /// Specifies the target of the query operation. target must be Renderbuffer.
            /// </param>
            /// <param name="pname">
            /// Specifies the parameter whose value to retrieve from the renderbuffer bound to target.
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// Specifies the address of an array to receive the value of the queried parameter.
            /// </param>
            [AutoGenerated(Category = "OES_framebuffer_object", Version = "", EntryPoint = "glGetRenderbufferParameterivOES")]
            public static unsafe void GetRenderbufferParameter(OpenTK.Graphics.ES11.RenderbufferTarget target, OpenTK.Graphics.ES11.RenderbufferParameterName pname, [OutAttribute, CountAttribute(Computed = "pname")] int* @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glGetTexEnvxvOES")]
            public static void GetTexEnvx(OpenTK.Graphics.ES11.All target, OpenTK.Graphics.ES11.All pname, [OutAttribute, CountAttribute(Computed = "pname")] int[] @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glGetTexEnvxvOES")]
            public static void GetTexEnvx(OpenTK.Graphics.ES11.All target, OpenTK.Graphics.ES11.All pname, [OutAttribute, CountAttribute(Computed = "pname")] out int @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glGetTexEnvxvOES")]
            public static unsafe void GetTexEnvx(OpenTK.Graphics.ES11.All target, OpenTK.Graphics.ES11.All pname, [OutAttribute, CountAttribute(Computed = "pname")] int* @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glGetTexEnvxvOES")]
            public static void GetTexEnvx(OpenTK.Graphics.ES11.TextureEnvTarget target, OpenTK.Graphics.ES11.TextureEnvParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] int[] @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glGetTexEnvxvOES")]
            public static void GetTexEnvx(OpenTK.Graphics.ES11.TextureEnvTarget target, OpenTK.Graphics.ES11.TextureEnvParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] out int @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glGetTexEnvxvOES")]
            public static unsafe void GetTexEnvx(OpenTK.Graphics.ES11.TextureEnvTarget target, OpenTK.Graphics.ES11.TextureEnvParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] int* @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_texture_cube_map]
            /// Return texture coordinate generation parameters
            /// </summary>
            /// <param name="coord">
            /// Specifies a texture coordinate. Must be S, T, R, or Q.
            /// </param>
            /// <param name="pname">
            /// Specifies the symbolic name of the value(s) to be returned. Must be either TextureGenMode or the name of one of the texture generation plane equations: ObjectPlane or EyePlane.
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// Returns the requested data.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "OES_texture_cube_map", Version = "", EntryPoint = "glGetTexGenfvOES")]
            public static void GetTexGen(OpenTK.Graphics.ES11.All coord, OpenTK.Graphics.ES11.All pname, [OutAttribute, CountAttribute(Computed = "pname")] float[] @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_texture_cube_map]
            /// Return texture coordinate generation parameters
            /// </summary>
            /// <param name="coord">
            /// Specifies a texture coordinate. Must be S, T, R, or Q.
            /// </param>
            /// <param name="pname">
            /// Specifies the symbolic name of the value(s) to be returned. Must be either TextureGenMode or the name of one of the texture generation plane equations: ObjectPlane or EyePlane.
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// Returns the requested data.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "OES_texture_cube_map", Version = "", EntryPoint = "glGetTexGenfvOES")]
            public static void GetTexGen(OpenTK.Graphics.ES11.All coord, OpenTK.Graphics.ES11.All pname, [OutAttribute, CountAttribute(Computed = "pname")] out float @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_texture_cube_map]
            /// Return texture coordinate generation parameters
            /// </summary>
            /// <param name="coord">
            /// Specifies a texture coordinate. Must be S, T, R, or Q.
            /// </param>
            /// <param name="pname">
            /// Specifies the symbolic name of the value(s) to be returned. Must be either TextureGenMode or the name of one of the texture generation plane equations: ObjectPlane or EyePlane.
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// Returns the requested data.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "OES_texture_cube_map", Version = "", EntryPoint = "glGetTexGenfvOES")]
            public static unsafe void GetTexGen(OpenTK.Graphics.ES11.All coord, OpenTK.Graphics.ES11.All pname, [OutAttribute, CountAttribute(Computed = "pname")] float* @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_texture_cube_map]
            /// Return texture coordinate generation parameters
            /// </summary>
            /// <param name="coord">
            /// Specifies a texture coordinate. Must be S, T, R, or Q.
            /// </param>
            /// <param name="pname">
            /// Specifies the symbolic name of the value(s) to be returned. Must be either TextureGenMode or the name of one of the texture generation plane equations: ObjectPlane or EyePlane.
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// Returns the requested data.
            /// </param>
            [AutoGenerated(Category = "OES_texture_cube_map", Version = "", EntryPoint = "glGetTexGenfvOES")]
            public static void GetTexGen(OpenTK.Graphics.ES11.TextureCoordName coord, OpenTK.Graphics.ES11.TextureGenParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] float[] @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_texture_cube_map]
            /// Return texture coordinate generation parameters
            /// </summary>
            /// <param name="coord">
            /// Specifies a texture coordinate. Must be S, T, R, or Q.
            /// </param>
            /// <param name="pname">
            /// Specifies the symbolic name of the value(s) to be returned. Must be either TextureGenMode or the name of one of the texture generation plane equations: ObjectPlane or EyePlane.
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// Returns the requested data.
            /// </param>
            [AutoGenerated(Category = "OES_texture_cube_map", Version = "", EntryPoint = "glGetTexGenfvOES")]
            public static void GetTexGen(OpenTK.Graphics.ES11.TextureCoordName coord, OpenTK.Graphics.ES11.TextureGenParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] out float @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_texture_cube_map]
            /// Return texture coordinate generation parameters
            /// </summary>
            /// <param name="coord">
            /// Specifies a texture coordinate. Must be S, T, R, or Q.
            /// </param>
            /// <param name="pname">
            /// Specifies the symbolic name of the value(s) to be returned. Must be either TextureGenMode or the name of one of the texture generation plane equations: ObjectPlane or EyePlane.
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// Returns the requested data.
            /// </param>
            [AutoGenerated(Category = "OES_texture_cube_map", Version = "", EntryPoint = "glGetTexGenfvOES")]
            public static unsafe void GetTexGen(OpenTK.Graphics.ES11.TextureCoordName coord, OpenTK.Graphics.ES11.TextureGenParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] float* @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_texture_cube_map]
            /// Return texture coordinate generation parameters
            /// </summary>
            /// <param name="coord">
            /// Specifies a texture coordinate. Must be S, T, R, or Q.
            /// </param>
            /// <param name="pname">
            /// Specifies the symbolic name of the value(s) to be returned. Must be either TextureGenMode or the name of one of the texture generation plane equations: ObjectPlane or EyePlane.
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// Returns the requested data.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "OES_texture_cube_map", Version = "", EntryPoint = "glGetTexGenivOES")]
            public static void GetTexGen(OpenTK.Graphics.ES11.All coord, OpenTK.Graphics.ES11.All pname, [OutAttribute, CountAttribute(Computed = "pname")] int[] @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_texture_cube_map]
            /// Return texture coordinate generation parameters
            /// </summary>
            /// <param name="coord">
            /// Specifies a texture coordinate. Must be S, T, R, or Q.
            /// </param>
            /// <param name="pname">
            /// Specifies the symbolic name of the value(s) to be returned. Must be either TextureGenMode or the name of one of the texture generation plane equations: ObjectPlane or EyePlane.
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// Returns the requested data.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "OES_texture_cube_map", Version = "", EntryPoint = "glGetTexGenivOES")]
            public static void GetTexGen(OpenTK.Graphics.ES11.All coord, OpenTK.Graphics.ES11.All pname, [OutAttribute, CountAttribute(Computed = "pname")] out int @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_texture_cube_map]
            /// Return texture coordinate generation parameters
            /// </summary>
            /// <param name="coord">
            /// Specifies a texture coordinate. Must be S, T, R, or Q.
            /// </param>
            /// <param name="pname">
            /// Specifies the symbolic name of the value(s) to be returned. Must be either TextureGenMode or the name of one of the texture generation plane equations: ObjectPlane or EyePlane.
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// Returns the requested data.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "OES_texture_cube_map", Version = "", EntryPoint = "glGetTexGenivOES")]
            public static unsafe void GetTexGen(OpenTK.Graphics.ES11.All coord, OpenTK.Graphics.ES11.All pname, [OutAttribute, CountAttribute(Computed = "pname")] int* @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_texture_cube_map]
            /// Return texture coordinate generation parameters
            /// </summary>
            /// <param name="coord">
            /// Specifies a texture coordinate. Must be S, T, R, or Q.
            /// </param>
            /// <param name="pname">
            /// Specifies the symbolic name of the value(s) to be returned. Must be either TextureGenMode or the name of one of the texture generation plane equations: ObjectPlane or EyePlane.
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// Returns the requested data.
            /// </param>
            [AutoGenerated(Category = "OES_texture_cube_map", Version = "", EntryPoint = "glGetTexGenivOES")]
            public static void GetTexGen(OpenTK.Graphics.ES11.TextureCoordName coord, OpenTK.Graphics.ES11.TextureGenParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] int[] @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_texture_cube_map]
            /// Return texture coordinate generation parameters
            /// </summary>
            /// <param name="coord">
            /// Specifies a texture coordinate. Must be S, T, R, or Q.
            /// </param>
            /// <param name="pname">
            /// Specifies the symbolic name of the value(s) to be returned. Must be either TextureGenMode or the name of one of the texture generation plane equations: ObjectPlane or EyePlane.
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// Returns the requested data.
            /// </param>
            [AutoGenerated(Category = "OES_texture_cube_map", Version = "", EntryPoint = "glGetTexGenivOES")]
            public static void GetTexGen(OpenTK.Graphics.ES11.TextureCoordName coord, OpenTK.Graphics.ES11.TextureGenParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] out int @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_texture_cube_map]
            /// Return texture coordinate generation parameters
            /// </summary>
            /// <param name="coord">
            /// Specifies a texture coordinate. Must be S, T, R, or Q.
            /// </param>
            /// <param name="pname">
            /// Specifies the symbolic name of the value(s) to be returned. Must be either TextureGenMode or the name of one of the texture generation plane equations: ObjectPlane or EyePlane.
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// Returns the requested data.
            /// </param>
            [AutoGenerated(Category = "OES_texture_cube_map", Version = "", EntryPoint = "glGetTexGenivOES")]
            public static unsafe void GetTexGen(OpenTK.Graphics.ES11.TextureCoordName coord, OpenTK.Graphics.ES11.TextureGenParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] int* @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_fixed_point|OES_texture_cube_map]
            /// </summary>
            /// <param name="coord">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "OES_fixed_point|OES_texture_cube_map", Version = "", EntryPoint = "glGetTexGenxvOES")]
            public static void GetTexGenx(OpenTK.Graphics.ES11.All coord, OpenTK.Graphics.ES11.All pname, [OutAttribute, CountAttribute(Computed = "pname")] int[] @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_fixed_point|OES_texture_cube_map]
            /// </summary>
            /// <param name="coord">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "OES_fixed_point|OES_texture_cube_map", Version = "", EntryPoint = "glGetTexGenxvOES")]
            public static void GetTexGenx(OpenTK.Graphics.ES11.All coord, OpenTK.Graphics.ES11.All pname, [OutAttribute, CountAttribute(Computed = "pname")] out int @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_fixed_point|OES_texture_cube_map]
            /// </summary>
            /// <param name="coord">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "OES_fixed_point|OES_texture_cube_map", Version = "", EntryPoint = "glGetTexGenxvOES")]
            public static unsafe void GetTexGenx(OpenTK.Graphics.ES11.All coord, OpenTK.Graphics.ES11.All pname, [OutAttribute, CountAttribute(Computed = "pname")] int* @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_fixed_point|OES_texture_cube_map]
            /// </summary>
            /// <param name="coord">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point|OES_texture_cube_map", Version = "", EntryPoint = "glGetTexGenxvOES")]
            public static void GetTexGenx(OpenTK.Graphics.ES11.TextureCoordName coord, OpenTK.Graphics.ES11.TextureGenParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] int[] @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_fixed_point|OES_texture_cube_map]
            /// </summary>
            /// <param name="coord">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point|OES_texture_cube_map", Version = "", EntryPoint = "glGetTexGenxvOES")]
            public static void GetTexGenx(OpenTK.Graphics.ES11.TextureCoordName coord, OpenTK.Graphics.ES11.TextureGenParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] out int @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_fixed_point|OES_texture_cube_map]
            /// </summary>
            /// <param name="coord">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point|OES_texture_cube_map", Version = "", EntryPoint = "glGetTexGenxvOES")]
            public static unsafe void GetTexGenx(OpenTK.Graphics.ES11.TextureCoordName coord, OpenTK.Graphics.ES11.TextureGenParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] int* @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glGetTexLevelParameterxvOES")]
            public static void GetTexLevelParameterx(OpenTK.Graphics.ES11.All target, int level, OpenTK.Graphics.ES11.All pname, [OutAttribute, CountAttribute(Computed = "pname")] int[] @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glGetTexLevelParameterxvOES")]
            public static void GetTexLevelParameterx(OpenTK.Graphics.ES11.All target, int level, OpenTK.Graphics.ES11.All pname, [OutAttribute, CountAttribute(Computed = "pname")] out int @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glGetTexLevelParameterxvOES")]
            public static unsafe void GetTexLevelParameterx(OpenTK.Graphics.ES11.All target, int level, OpenTK.Graphics.ES11.All pname, [OutAttribute, CountAttribute(Computed = "pname")] int* @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glGetTexLevelParameterxvOES")]
            public static void GetTexLevelParameterx(OpenTK.Graphics.ES11.TextureTarget target, int level, OpenTK.Graphics.ES11.GetTextureParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] int[] @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glGetTexLevelParameterxvOES")]
            public static void GetTexLevelParameterx(OpenTK.Graphics.ES11.TextureTarget target, int level, OpenTK.Graphics.ES11.GetTextureParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] out int @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glGetTexLevelParameterxvOES")]
            public static unsafe void GetTexLevelParameterx(OpenTK.Graphics.ES11.TextureTarget target, int level, OpenTK.Graphics.ES11.GetTextureParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] int* @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glGetTexParameterxvOES")]
            public static void GetTexParameterx(OpenTK.Graphics.ES11.All target, OpenTK.Graphics.ES11.All pname, [OutAttribute, CountAttribute(Computed = "pname")] int[] @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glGetTexParameterxvOES")]
            public static void GetTexParameterx(OpenTK.Graphics.ES11.All target, OpenTK.Graphics.ES11.All pname, [OutAttribute, CountAttribute(Computed = "pname")] out int @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glGetTexParameterxvOES")]
            public static unsafe void GetTexParameterx(OpenTK.Graphics.ES11.All target, OpenTK.Graphics.ES11.All pname, [OutAttribute, CountAttribute(Computed = "pname")] int* @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glGetTexParameterxvOES")]
            public static void GetTexParameterx(OpenTK.Graphics.ES11.TextureTarget target, OpenTK.Graphics.ES11.GetTextureParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] int[] @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glGetTexParameterxvOES")]
            public static void GetTexParameterx(OpenTK.Graphics.ES11.TextureTarget target, OpenTK.Graphics.ES11.GetTextureParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] out int @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glGetTexParameterxvOES")]
            public static unsafe void GetTexParameterx(OpenTK.Graphics.ES11.TextureTarget target, OpenTK.Graphics.ES11.GetTextureParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] int* @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="component">
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glIndexxOES")]
            public static void Indexx(int component) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="component">
            /// [length: 1]
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glIndexxvOES")]
            public static unsafe void Indexx([CountAttribute(Count = 1)] int* component) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_framebuffer_object]
            /// Determine if a name corresponds to a framebuffer object
            /// </summary>
            /// <param name="framebuffer">
            /// Specifies a value that may be the name of a framebuffer object.
            /// </param>
            [AutoGenerated(Category = "OES_framebuffer_object", Version = "", EntryPoint = "glIsFramebufferOES")]
            public static bool IsFramebuffer(int framebuffer) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_framebuffer_object]
            /// Determine if a name corresponds to a framebuffer object
            /// </summary>
            /// <param name="framebuffer">
            /// Specifies a value that may be the name of a framebuffer object.
            /// </param>
            [AutoGenerated(Category = "OES_framebuffer_object", Version = "", EntryPoint = "glIsFramebufferOES")]
            public static bool IsFramebuffer(uint framebuffer) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_framebuffer_object]
            /// Determine if a name corresponds to a renderbuffer object
            /// </summary>
            /// <param name="renderbuffer">
            /// Specifies a value that may be the name of a renderbuffer object.
            /// </param>
            [AutoGenerated(Category = "OES_framebuffer_object", Version = "", EntryPoint = "glIsRenderbufferOES")]
            public static bool IsRenderbuffer(int renderbuffer) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_framebuffer_object]
            /// Determine if a name corresponds to a renderbuffer object
            /// </summary>
            /// <param name="renderbuffer">
            /// Specifies a value that may be the name of a renderbuffer object.
            /// </param>
            [AutoGenerated(Category = "OES_framebuffer_object", Version = "", EntryPoint = "glIsRenderbufferOES")]
            public static bool IsRenderbuffer(uint renderbuffer) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_vertex_array_object]
            /// Determine if a name corresponds to a vertex array object
            /// </summary>
            /// <param name="array">
            /// Specifies a value that may be the name of a vertex array object.
            /// </param>
            [AutoGenerated(Category = "OES_vertex_array_object", Version = "", EntryPoint = "glIsVertexArrayOES")]
            public static bool IsVertexArray(int array) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_vertex_array_object]
            /// Determine if a name corresponds to a vertex array object
            /// </summary>
            /// <param name="array">
            /// Specifies a value that may be the name of a vertex array object.
            /// </param>
            [AutoGenerated(Category = "OES_vertex_array_object", Version = "", EntryPoint = "glIsVertexArrayOES")]
            public static bool IsVertexArray(uint array) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="pname">
            /// </param>
            /// <param name="param">
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glLightModelxOES")]
            public static void LightModelx(OpenTK.Graphics.ES11.All pname, int param) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="pname">
            /// </param>
            /// <param name="param">
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glLightModelxOES")]
            public static void LightModelx(OpenTK.Graphics.ES11.LightModelParameter pname, int param) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="pname">
            /// </param>
            /// <param name="param">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glLightModelxvOES")]
            public static void LightModelx(OpenTK.Graphics.ES11.All pname, [CountAttribute(Computed = "pname")] int[] param) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="pname">
            /// </param>
            /// <param name="param">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glLightModelxvOES")]
            public static unsafe void LightModelx(OpenTK.Graphics.ES11.All pname, [CountAttribute(Computed = "pname")] int* param) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="pname">
            /// </param>
            /// <param name="param">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glLightModelxvOES")]
            public static void LightModelx(OpenTK.Graphics.ES11.LightModelParameter pname, [CountAttribute(Computed = "pname")] int[] param) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="pname">
            /// </param>
            /// <param name="param">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glLightModelxvOES")]
            public static unsafe void LightModelx(OpenTK.Graphics.ES11.LightModelParameter pname, [CountAttribute(Computed = "pname")] int* param) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="light">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="param">
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glLightxOES")]
            public static void Lightx(OpenTK.Graphics.ES11.All light, OpenTK.Graphics.ES11.All pname, int param) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="light">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="param">
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glLightxOES")]
            public static void Lightx(OpenTK.Graphics.ES11.LightName light, OpenTK.Graphics.ES11.LightParameter pname, int param) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="light">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glLightxvOES")]
            public static void Lightx(OpenTK.Graphics.ES11.All light, OpenTK.Graphics.ES11.All pname, [CountAttribute(Computed = "pname")] int[] @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="light">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glLightxvOES")]
            public static unsafe void Lightx(OpenTK.Graphics.ES11.All light, OpenTK.Graphics.ES11.All pname, [CountAttribute(Computed = "pname")] int* @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="light">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glLightxvOES")]
            public static void Lightx(OpenTK.Graphics.ES11.LightName light, OpenTK.Graphics.ES11.LightParameter pname, [CountAttribute(Computed = "pname")] int[] @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="light">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glLightxvOES")]
            public static unsafe void Lightx(OpenTK.Graphics.ES11.LightName light, OpenTK.Graphics.ES11.LightParameter pname, [CountAttribute(Computed = "pname")] int* @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="width">
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glLineWidthxOES")]
            public static void LineWidthx(int width) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="m">
            /// [length: 16]
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glLoadMatrixxOES")]
            public static void LoadMatrixx([CountAttribute(Count = 16)] int[] m) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="m">
            /// [length: 16]
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glLoadMatrixxOES")]
            public static void LoadMatrixx([CountAttribute(Count = 16)] ref int m) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="m">
            /// [length: 16]
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glLoadMatrixxOES")]
            public static unsafe void LoadMatrixx([CountAttribute(Count = 16)] int* m) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_matrix_palette]
            /// </summary>
            [AutoGenerated(Category = "OES_matrix_palette", Version = "", EntryPoint = "glLoadPaletteFromModelViewMatrixOES")]
            public static void LoadPaletteFromModelViewMatrix() { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="m">
            /// [length: 16]
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glLoadTransposeMatrixxOES")]
            public static void LoadTransposeMatrixx([CountAttribute(Count = 16)] int[] m) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="m">
            /// [length: 16]
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glLoadTransposeMatrixxOES")]
            public static void LoadTransposeMatrixx([CountAttribute(Count = 16)] ref int m) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="m">
            /// [length: 16]
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glLoadTransposeMatrixxOES")]
            public static unsafe void LoadTransposeMatrixx([CountAttribute(Count = 16)] int* m) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="u1">
            /// </param>
            /// <param name="u2">
            /// </param>
            /// <param name="stride">
            /// </param>
            /// <param name="order">
            /// </param>
            /// <param name="points">
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glMap1xOES")]
            public static void Map1x(OpenTK.Graphics.ES11.All target, int u1, int u2, int stride, int order, int points) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="u1">
            /// </param>
            /// <param name="u2">
            /// </param>
            /// <param name="stride">
            /// </param>
            /// <param name="order">
            /// </param>
            /// <param name="points">
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glMap1xOES")]
            public static void Map1x(OpenTK.Graphics.ES11.MapTarget target, int u1, int u2, int stride, int order, int points) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="u1">
            /// </param>
            /// <param name="u2">
            /// </param>
            /// <param name="ustride">
            /// </param>
            /// <param name="uorder">
            /// </param>
            /// <param name="v1">
            /// </param>
            /// <param name="v2">
            /// </param>
            /// <param name="vstride">
            /// </param>
            /// <param name="vorder">
            /// </param>
            /// <param name="points">
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glMap2xOES")]
            public static void Map2x(OpenTK.Graphics.ES11.All target, int u1, int u2, int ustride, int uorder, int v1, int v2, int vstride, int vorder, int points) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="u1">
            /// </param>
            /// <param name="u2">
            /// </param>
            /// <param name="ustride">
            /// </param>
            /// <param name="uorder">
            /// </param>
            /// <param name="v1">
            /// </param>
            /// <param name="v2">
            /// </param>
            /// <param name="vstride">
            /// </param>
            /// <param name="vorder">
            /// </param>
            /// <param name="points">
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glMap2xOES")]
            public static void Map2x(OpenTK.Graphics.ES11.MapTarget target, int u1, int u2, int ustride, int uorder, int v1, int v2, int vstride, int vorder, int points) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_mapbuffer]
            /// Map a buffer object's data store
            /// </summary>
            /// <param name="target">
            /// Specifies the target buffer object being mapped. The symbolic constant must be ArrayBuffer, AtomicCounterBuffer, CopyReadBuffer, CopyWriteBuffer, DrawIndirectBuffer, DispatchIndirectBuffer, ElementArrayBuffer, PixelPackBuffer, PixelUnpackBuffer, QueryBuffer, ShaderStorageBuffer, TextureBuffer, TransformFeedbackBuffer or UniformBuffer.
            /// </param>
            /// <param name="access">
            /// For glMapBuffer only, specifies the access policy, indicating whether it will be possible to read from, write to, or both read from and write to the buffer object's mapped data store. The symbolic constant must be ReadOnly, WriteOnly, or ReadWrite.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "OES_mapbuffer", Version = "", EntryPoint = "glMapBufferOES")]
            public static IntPtr MapBuffer(OpenTK.Graphics.ES11.All target, OpenTK.Graphics.ES11.All access) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_mapbuffer]
            /// Map a buffer object's data store
            /// </summary>
            /// <param name="target">
            /// Specifies the target buffer object being mapped. The symbolic constant must be ArrayBuffer, AtomicCounterBuffer, CopyReadBuffer, CopyWriteBuffer, DrawIndirectBuffer, DispatchIndirectBuffer, ElementArrayBuffer, PixelPackBuffer, PixelUnpackBuffer, QueryBuffer, ShaderStorageBuffer, TextureBuffer, TransformFeedbackBuffer or UniformBuffer.
            /// </param>
            /// <param name="access">
            /// For glMapBuffer only, specifies the access policy, indicating whether it will be possible to read from, write to, or both read from and write to the buffer object's mapped data store. The symbolic constant must be ReadOnly, WriteOnly, or ReadWrite.
            /// </param>
            [AutoGenerated(Category = "OES_mapbuffer", Version = "", EntryPoint = "glMapBufferOES")]
            public static IntPtr MapBuffer(OpenTK.Graphics.ES11.BufferTargetArb target, OpenTK.Graphics.ES11.BufferAccessArb access) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="n">
            /// </param>
            /// <param name="u1">
            /// </param>
            /// <param name="u2">
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glMapGrid1xOES")]
            public static void MapGrid1x(int n, int u1, int u2) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="n">
            /// </param>
            /// <param name="u1">
            /// </param>
            /// <param name="u2">
            /// </param>
            /// <param name="v1">
            /// </param>
            /// <param name="v2">
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glMapGrid2xOES")]
            public static void MapGrid2x(int n, int u1, int u2, int v1, int v2) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="face">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="param">
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glMaterialxOES")]
            public static void Materialx(OpenTK.Graphics.ES11.All face, OpenTK.Graphics.ES11.All pname, int param) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="face">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="param">
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glMaterialxOES")]
            public static void Materialx(OpenTK.Graphics.ES11.MaterialFace face, OpenTK.Graphics.ES11.MaterialParameter pname, int param) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="face">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="param">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glMaterialxvOES")]
            public static void Materialx(OpenTK.Graphics.ES11.All face, OpenTK.Graphics.ES11.All pname, [CountAttribute(Computed = "pname")] int[] param) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="face">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="param">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glMaterialxvOES")]
            public static unsafe void Materialx(OpenTK.Graphics.ES11.All face, OpenTK.Graphics.ES11.All pname, [CountAttribute(Computed = "pname")] int* param) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="face">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="param">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glMaterialxvOES")]
            public static void Materialx(OpenTK.Graphics.ES11.MaterialFace face, OpenTK.Graphics.ES11.MaterialParameter pname, [CountAttribute(Computed = "pname")] int[] param) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="face">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="param">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glMaterialxvOES")]
            public static unsafe void Materialx(OpenTK.Graphics.ES11.MaterialFace face, OpenTK.Graphics.ES11.MaterialParameter pname, [CountAttribute(Computed = "pname")] int* param) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_matrix_palette]
            /// </summary>
            /// <param name="size">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="stride">
            /// </param>
            /// <param name="pointer">
            /// [length: COMPSIZE(size,type,stride)]
            /// </param>
            [AutoGenerated(Category = "OES_matrix_palette", Version = "", EntryPoint = "glMatrixIndexPointerOES")]
            public static void MatrixIndexPointer(int size, OpenTK.Graphics.ES11.All type, int stride, [CountAttribute(Computed = "size,type,stride")] IntPtr pointer) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_matrix_palette]
            /// </summary>
            /// <param name="size">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="stride">
            /// </param>
            /// <param name="pointer">
            /// [length: COMPSIZE(size,type,stride)]
            /// </param>
            [AutoGenerated(Category = "OES_matrix_palette", Version = "", EntryPoint = "glMatrixIndexPointerOES")]
            public static void MatrixIndexPointer<T3>(int size, OpenTK.Graphics.ES11.All type, int stride, [InAttribute, OutAttribute, CountAttribute(Computed = "size,type,stride")] T3[] pointer)
                where T3 : struct
             { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_matrix_palette]
            /// </summary>
            /// <param name="size">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="stride">
            /// </param>
            /// <param name="pointer">
            /// [length: COMPSIZE(size,type,stride)]
            /// </param>
            [AutoGenerated(Category = "OES_matrix_palette", Version = "", EntryPoint = "glMatrixIndexPointerOES")]
            public static void MatrixIndexPointer<T3>(int size, OpenTK.Graphics.ES11.All type, int stride, [InAttribute, OutAttribute, CountAttribute(Computed = "size,type,stride")] T3[,] pointer)
                where T3 : struct
             { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_matrix_palette]
            /// </summary>
            /// <param name="size">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="stride">
            /// </param>
            /// <param name="pointer">
            /// [length: COMPSIZE(size,type,stride)]
            /// </param>
            [AutoGenerated(Category = "OES_matrix_palette", Version = "", EntryPoint = "glMatrixIndexPointerOES")]
            public static void MatrixIndexPointer<T3>(int size, OpenTK.Graphics.ES11.All type, int stride, [InAttribute, OutAttribute, CountAttribute(Computed = "size,type,stride")] T3[,,] pointer)
                where T3 : struct
             { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_matrix_palette]
            /// </summary>
            /// <param name="size">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="stride">
            /// </param>
            /// <param name="pointer">
            /// [length: COMPSIZE(size,type,stride)]
            /// </param>
            [AutoGenerated(Category = "OES_matrix_palette", Version = "", EntryPoint = "glMatrixIndexPointerOES")]
            public static void MatrixIndexPointer<T3>(int size, OpenTK.Graphics.ES11.All type, int stride, [InAttribute, OutAttribute, CountAttribute(Computed = "size,type,stride")] ref T3 pointer)
                where T3 : struct
             { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_byte_coordinates]
            /// Set the current texture coordinates
            /// </summary>
            /// <param name="texture">
            /// Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of Texture, where i ranges from 0 to MaxTextureCoords - 1, which is an implementation-dependent value.
            /// </param>
            /// <param name="s">
            /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "OES_byte_coordinates", Version = "", EntryPoint = "glMultiTexCoord1bOES")]
            public static void MultiTexCoord1(OpenTK.Graphics.ES11.All texture, Byte s) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_byte_coordinates]
            /// Set the current texture coordinates
            /// </summary>
            /// <param name="texture">
            /// Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of Texture, where i ranges from 0 to MaxTextureCoords - 1, which is an implementation-dependent value.
            /// </param>
            /// <param name="s">
            /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "OES_byte_coordinates", Version = "", EntryPoint = "glMultiTexCoord1bOES")]
            public static void MultiTexCoord1(OpenTK.Graphics.ES11.All texture, SByte s) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_byte_coordinates]
            /// Set the current texture coordinates
            /// </summary>
            /// <param name="texture">
            /// Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of Texture, where i ranges from 0 to MaxTextureCoords - 1, which is an implementation-dependent value.
            /// </param>
            /// <param name="s">
            /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
            /// </param>
            [AutoGenerated(Category = "OES_byte_coordinates", Version = "", EntryPoint = "glMultiTexCoord1bOES")]
            public static void MultiTexCoord1(OpenTK.Graphics.ES11.TextureUnit texture, Byte s) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_byte_coordinates]
            /// Set the current texture coordinates
            /// </summary>
            /// <param name="texture">
            /// Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of Texture, where i ranges from 0 to MaxTextureCoords - 1, which is an implementation-dependent value.
            /// </param>
            /// <param name="s">
            /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
            /// </param>
            [AutoGenerated(Category = "OES_byte_coordinates", Version = "", EntryPoint = "glMultiTexCoord1bOES")]
            public static void MultiTexCoord1(OpenTK.Graphics.ES11.TextureUnit texture, SByte s) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_byte_coordinates]
            /// Set the current texture coordinates
            /// </summary>
            /// <param name="texture">
            /// Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of Texture, where i ranges from 0 to MaxTextureCoords - 1, which is an implementation-dependent value.
            /// </param>
            /// <param name="coords">
            /// [length: 1]
            /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "OES_byte_coordinates", Version = "", EntryPoint = "glMultiTexCoord1bvOES")]
            public static unsafe void MultiTexCoord1(OpenTK.Graphics.ES11.All texture, [CountAttribute(Count = 1)] Byte* coords) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_byte_coordinates]
            /// Set the current texture coordinates
            /// </summary>
            /// <param name="texture">
            /// Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of Texture, where i ranges from 0 to MaxTextureCoords - 1, which is an implementation-dependent value.
            /// </param>
            /// <param name="coords">
            /// [length: 1]
            /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "OES_byte_coordinates", Version = "", EntryPoint = "glMultiTexCoord1bvOES")]
            public static unsafe void MultiTexCoord1(OpenTK.Graphics.ES11.All texture, [CountAttribute(Count = 1)] SByte* coords) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_byte_coordinates]
            /// Set the current texture coordinates
            /// </summary>
            /// <param name="texture">
            /// Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of Texture, where i ranges from 0 to MaxTextureCoords - 1, which is an implementation-dependent value.
            /// </param>
            /// <param name="coords">
            /// [length: 1]
            /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
            /// </param>
            [AutoGenerated(Category = "OES_byte_coordinates", Version = "", EntryPoint = "glMultiTexCoord1bvOES")]
            public static unsafe void MultiTexCoord1(OpenTK.Graphics.ES11.TextureUnit texture, [CountAttribute(Count = 1)] Byte* coords) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_byte_coordinates]
            /// Set the current texture coordinates
            /// </summary>
            /// <param name="texture">
            /// Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of Texture, where i ranges from 0 to MaxTextureCoords - 1, which is an implementation-dependent value.
            /// </param>
            /// <param name="coords">
            /// [length: 1]
            /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
            /// </param>
            [AutoGenerated(Category = "OES_byte_coordinates", Version = "", EntryPoint = "glMultiTexCoord1bvOES")]
            public static unsafe void MultiTexCoord1(OpenTK.Graphics.ES11.TextureUnit texture, [CountAttribute(Count = 1)] SByte* coords) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="s">
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glMultiTexCoord1xOES")]
            public static void MultiTexCoord1x(OpenTK.Graphics.ES11.All texture, int s) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="s">
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glMultiTexCoord1xOES")]
            public static void MultiTexCoord1x(OpenTK.Graphics.ES11.TextureUnit texture, int s) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="coords">
            /// [length: 1]
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glMultiTexCoord1xvOES")]
            public static unsafe void MultiTexCoord1x(OpenTK.Graphics.ES11.All texture, [CountAttribute(Count = 1)] int* coords) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="coords">
            /// [length: 1]
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glMultiTexCoord1xvOES")]
            public static unsafe void MultiTexCoord1x(OpenTK.Graphics.ES11.TextureUnit texture, [CountAttribute(Count = 1)] int* coords) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_byte_coordinates]
            /// Set the current texture coordinates
            /// </summary>
            /// <param name="texture">
            /// Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of Texture, where i ranges from 0 to MaxTextureCoords - 1, which is an implementation-dependent value.
            /// </param>
            /// <param name="s">
            /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
            /// </param>
            /// <param name="t">
            /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "OES_byte_coordinates", Version = "", EntryPoint = "glMultiTexCoord2bOES")]
            public static void MultiTexCoord2(OpenTK.Graphics.ES11.All texture, Byte s, Byte t) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_byte_coordinates]
            /// Set the current texture coordinates
            /// </summary>
            /// <param name="texture">
            /// Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of Texture, where i ranges from 0 to MaxTextureCoords - 1, which is an implementation-dependent value.
            /// </param>
            /// <param name="s">
            /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
            /// </param>
            /// <param name="t">
            /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "OES_byte_coordinates", Version = "", EntryPoint = "glMultiTexCoord2bOES")]
            public static void MultiTexCoord2(OpenTK.Graphics.ES11.All texture, SByte s, SByte t) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_byte_coordinates]
            /// Set the current texture coordinates
            /// </summary>
            /// <param name="texture">
            /// Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of Texture, where i ranges from 0 to MaxTextureCoords - 1, which is an implementation-dependent value.
            /// </param>
            /// <param name="s">
            /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
            /// </param>
            /// <param name="t">
            /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
            /// </param>
            [AutoGenerated(Category = "OES_byte_coordinates", Version = "", EntryPoint = "glMultiTexCoord2bOES")]
            public static void MultiTexCoord2(OpenTK.Graphics.ES11.TextureUnit texture, Byte s, Byte t) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_byte_coordinates]
            /// Set the current texture coordinates
            /// </summary>
            /// <param name="texture">
            /// Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of Texture, where i ranges from 0 to MaxTextureCoords - 1, which is an implementation-dependent value.
            /// </param>
            /// <param name="s">
            /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
            /// </param>
            /// <param name="t">
            /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
            /// </param>
            [AutoGenerated(Category = "OES_byte_coordinates", Version = "", EntryPoint = "glMultiTexCoord2bOES")]
            public static void MultiTexCoord2(OpenTK.Graphics.ES11.TextureUnit texture, SByte s, SByte t) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_byte_coordinates]
            /// Set the current texture coordinates
            /// </summary>
            /// <param name="texture">
            /// Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of Texture, where i ranges from 0 to MaxTextureCoords - 1, which is an implementation-dependent value.
            /// </param>
            /// <param name="coords">
            /// [length: 2]
            /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "OES_byte_coordinates", Version = "", EntryPoint = "glMultiTexCoord2bvOES")]
            public static void MultiTexCoord2(OpenTK.Graphics.ES11.All texture, [CountAttribute(Count = 2)] Byte[] coords) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_byte_coordinates]
            /// Set the current texture coordinates
            /// </summary>
            /// <param name="texture">
            /// Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of Texture, where i ranges from 0 to MaxTextureCoords - 1, which is an implementation-dependent value.
            /// </param>
            /// <param name="coords">
            /// [length: 2]
            /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "OES_byte_coordinates", Version = "", EntryPoint = "glMultiTexCoord2bvOES")]
            public static void MultiTexCoord2(OpenTK.Graphics.ES11.All texture, [CountAttribute(Count = 2)] ref Byte coords) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_byte_coordinates]
            /// Set the current texture coordinates
            /// </summary>
            /// <param name="texture">
            /// Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of Texture, where i ranges from 0 to MaxTextureCoords - 1, which is an implementation-dependent value.
            /// </param>
            /// <param name="coords">
            /// [length: 2]
            /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "OES_byte_coordinates", Version = "", EntryPoint = "glMultiTexCoord2bvOES")]
            public static unsafe void MultiTexCoord2(OpenTK.Graphics.ES11.All texture, [CountAttribute(Count = 2)] Byte* coords) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_byte_coordinates]
            /// Set the current texture coordinates
            /// </summary>
            /// <param name="texture">
            /// Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of Texture, where i ranges from 0 to MaxTextureCoords - 1, which is an implementation-dependent value.
            /// </param>
            /// <param name="coords">
            /// [length: 2]
            /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "OES_byte_coordinates", Version = "", EntryPoint = "glMultiTexCoord2bvOES")]
            public static void MultiTexCoord2(OpenTK.Graphics.ES11.All texture, [CountAttribute(Count = 2)] SByte[] coords) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_byte_coordinates]
            /// Set the current texture coordinates
            /// </summary>
            /// <param name="texture">
            /// Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of Texture, where i ranges from 0 to MaxTextureCoords - 1, which is an implementation-dependent value.
            /// </param>
            /// <param name="coords">
            /// [length: 2]
            /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "OES_byte_coordinates", Version = "", EntryPoint = "glMultiTexCoord2bvOES")]
            public static void MultiTexCoord2(OpenTK.Graphics.ES11.All texture, [CountAttribute(Count = 2)] ref SByte coords) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_byte_coordinates]
            /// Set the current texture coordinates
            /// </summary>
            /// <param name="texture">
            /// Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of Texture, where i ranges from 0 to MaxTextureCoords - 1, which is an implementation-dependent value.
            /// </param>
            /// <param name="coords">
            /// [length: 2]
            /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "OES_byte_coordinates", Version = "", EntryPoint = "glMultiTexCoord2bvOES")]
            public static unsafe void MultiTexCoord2(OpenTK.Graphics.ES11.All texture, [CountAttribute(Count = 2)] SByte* coords) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_byte_coordinates]
            /// Set the current texture coordinates
            /// </summary>
            /// <param name="texture">
            /// Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of Texture, where i ranges from 0 to MaxTextureCoords - 1, which is an implementation-dependent value.
            /// </param>
            /// <param name="coords">
            /// [length: 2]
            /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
            /// </param>
            [AutoGenerated(Category = "OES_byte_coordinates", Version = "", EntryPoint = "glMultiTexCoord2bvOES")]
            public static void MultiTexCoord2(OpenTK.Graphics.ES11.TextureUnit texture, [CountAttribute(Count = 2)] Byte[] coords) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_byte_coordinates]
            /// Set the current texture coordinates
            /// </summary>
            /// <param name="texture">
            /// Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of Texture, where i ranges from 0 to MaxTextureCoords - 1, which is an implementation-dependent value.
            /// </param>
            /// <param name="coords">
            /// [length: 2]
            /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
            /// </param>
            [AutoGenerated(Category = "OES_byte_coordinates", Version = "", EntryPoint = "glMultiTexCoord2bvOES")]
            public static void MultiTexCoord2(OpenTK.Graphics.ES11.TextureUnit texture, [CountAttribute(Count = 2)] ref Byte coords) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_byte_coordinates]
            /// Set the current texture coordinates
            /// </summary>
            /// <param name="texture">
            /// Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of Texture, where i ranges from 0 to MaxTextureCoords - 1, which is an implementation-dependent value.
            /// </param>
            /// <param name="coords">
            /// [length: 2]
            /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
            /// </param>
            [AutoGenerated(Category = "OES_byte_coordinates", Version = "", EntryPoint = "glMultiTexCoord2bvOES")]
            public static unsafe void MultiTexCoord2(OpenTK.Graphics.ES11.TextureUnit texture, [CountAttribute(Count = 2)] Byte* coords) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_byte_coordinates]
            /// Set the current texture coordinates
            /// </summary>
            /// <param name="texture">
            /// Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of Texture, where i ranges from 0 to MaxTextureCoords - 1, which is an implementation-dependent value.
            /// </param>
            /// <param name="coords">
            /// [length: 2]
            /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
            /// </param>
            [AutoGenerated(Category = "OES_byte_coordinates", Version = "", EntryPoint = "glMultiTexCoord2bvOES")]
            public static void MultiTexCoord2(OpenTK.Graphics.ES11.TextureUnit texture, [CountAttribute(Count = 2)] SByte[] coords) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_byte_coordinates]
            /// Set the current texture coordinates
            /// </summary>
            /// <param name="texture">
            /// Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of Texture, where i ranges from 0 to MaxTextureCoords - 1, which is an implementation-dependent value.
            /// </param>
            /// <param name="coords">
            /// [length: 2]
            /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
            /// </param>
            [AutoGenerated(Category = "OES_byte_coordinates", Version = "", EntryPoint = "glMultiTexCoord2bvOES")]
            public static void MultiTexCoord2(OpenTK.Graphics.ES11.TextureUnit texture, [CountAttribute(Count = 2)] ref SByte coords) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_byte_coordinates]
            /// Set the current texture coordinates
            /// </summary>
            /// <param name="texture">
            /// Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of Texture, where i ranges from 0 to MaxTextureCoords - 1, which is an implementation-dependent value.
            /// </param>
            /// <param name="coords">
            /// [length: 2]
            /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
            /// </param>
            [AutoGenerated(Category = "OES_byte_coordinates", Version = "", EntryPoint = "glMultiTexCoord2bvOES")]
            public static unsafe void MultiTexCoord2(OpenTK.Graphics.ES11.TextureUnit texture, [CountAttribute(Count = 2)] SByte* coords) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="s">
            /// </param>
            /// <param name="t">
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glMultiTexCoord2xOES")]
            public static void MultiTexCoord2x(OpenTK.Graphics.ES11.All texture, int s, int t) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="s">
            /// </param>
            /// <param name="t">
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glMultiTexCoord2xOES")]
            public static void MultiTexCoord2x(OpenTK.Graphics.ES11.TextureUnit texture, int s, int t) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="coords">
            /// [length: 2]
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glMultiTexCoord2xvOES")]
            public static void MultiTexCoord2x(OpenTK.Graphics.ES11.All texture, [CountAttribute(Count = 2)] int[] coords) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="coords">
            /// [length: 2]
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glMultiTexCoord2xvOES")]
            public static void MultiTexCoord2x(OpenTK.Graphics.ES11.All texture, [CountAttribute(Count = 2)] ref int coords) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="coords">
            /// [length: 2]
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glMultiTexCoord2xvOES")]
            public static unsafe void MultiTexCoord2x(OpenTK.Graphics.ES11.All texture, [CountAttribute(Count = 2)] int* coords) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="coords">
            /// [length: 2]
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glMultiTexCoord2xvOES")]
            public static void MultiTexCoord2x(OpenTK.Graphics.ES11.TextureUnit texture, [CountAttribute(Count = 2)] int[] coords) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="coords">
            /// [length: 2]
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glMultiTexCoord2xvOES")]
            public static void MultiTexCoord2x(OpenTK.Graphics.ES11.TextureUnit texture, [CountAttribute(Count = 2)] ref int coords) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="coords">
            /// [length: 2]
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glMultiTexCoord2xvOES")]
            public static unsafe void MultiTexCoord2x(OpenTK.Graphics.ES11.TextureUnit texture, [CountAttribute(Count = 2)] int* coords) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_byte_coordinates]
            /// Set the current texture coordinates
            /// </summary>
            /// <param name="texture">
            /// Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of Texture, where i ranges from 0 to MaxTextureCoords - 1, which is an implementation-dependent value.
            /// </param>
            /// <param name="s">
            /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
            /// </param>
            /// <param name="t">
            /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
            /// </param>
            /// <param name="r">
            /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "OES_byte_coordinates", Version = "", EntryPoint = "glMultiTexCoord3bOES")]
            public static void MultiTexCoord3(OpenTK.Graphics.ES11.All texture, Byte s, Byte t, Byte r) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_byte_coordinates]
            /// Set the current texture coordinates
            /// </summary>
            /// <param name="texture">
            /// Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of Texture, where i ranges from 0 to MaxTextureCoords - 1, which is an implementation-dependent value.
            /// </param>
            /// <param name="s">
            /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
            /// </param>
            /// <param name="t">
            /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
            /// </param>
            /// <param name="r">
            /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "OES_byte_coordinates", Version = "", EntryPoint = "glMultiTexCoord3bOES")]
            public static void MultiTexCoord3(OpenTK.Graphics.ES11.All texture, SByte s, SByte t, SByte r) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_byte_coordinates]
            /// Set the current texture coordinates
            /// </summary>
            /// <param name="texture">
            /// Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of Texture, where i ranges from 0 to MaxTextureCoords - 1, which is an implementation-dependent value.
            /// </param>
            /// <param name="s">
            /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
            /// </param>
            /// <param name="t">
            /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
            /// </param>
            /// <param name="r">
            /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
            /// </param>
            [AutoGenerated(Category = "OES_byte_coordinates", Version = "", EntryPoint = "glMultiTexCoord3bOES")]
            public static void MultiTexCoord3(OpenTK.Graphics.ES11.TextureUnit texture, Byte s, Byte t, Byte r) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_byte_coordinates]
            /// Set the current texture coordinates
            /// </summary>
            /// <param name="texture">
            /// Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of Texture, where i ranges from 0 to MaxTextureCoords - 1, which is an implementation-dependent value.
            /// </param>
            /// <param name="s">
            /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
            /// </param>
            /// <param name="t">
            /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
            /// </param>
            /// <param name="r">
            /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
            /// </param>
            [AutoGenerated(Category = "OES_byte_coordinates", Version = "", EntryPoint = "glMultiTexCoord3bOES")]
            public static void MultiTexCoord3(OpenTK.Graphics.ES11.TextureUnit texture, SByte s, SByte t, SByte r) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_byte_coordinates]
            /// Set the current texture coordinates
            /// </summary>
            /// <param name="texture">
            /// Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of Texture, where i ranges from 0 to MaxTextureCoords - 1, which is an implementation-dependent value.
            /// </param>
            /// <param name="coords">
            /// [length: 3]
            /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "OES_byte_coordinates", Version = "", EntryPoint = "glMultiTexCoord3bvOES")]
            public static void MultiTexCoord3(OpenTK.Graphics.ES11.All texture, [CountAttribute(Count = 3)] Byte[] coords) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_byte_coordinates]
            /// Set the current texture coordinates
            /// </summary>
            /// <param name="texture">
            /// Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of Texture, where i ranges from 0 to MaxTextureCoords - 1, which is an implementation-dependent value.
            /// </param>
            /// <param name="coords">
            /// [length: 3]
            /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "OES_byte_coordinates", Version = "", EntryPoint = "glMultiTexCoord3bvOES")]
            public static void MultiTexCoord3(OpenTK.Graphics.ES11.All texture, [CountAttribute(Count = 3)] ref Byte coords) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_byte_coordinates]
            /// Set the current texture coordinates
            /// </summary>
            /// <param name="texture">
            /// Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of Texture, where i ranges from 0 to MaxTextureCoords - 1, which is an implementation-dependent value.
            /// </param>
            /// <param name="coords">
            /// [length: 3]
            /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "OES_byte_coordinates", Version = "", EntryPoint = "glMultiTexCoord3bvOES")]
            public static unsafe void MultiTexCoord3(OpenTK.Graphics.ES11.All texture, [CountAttribute(Count = 3)] Byte* coords) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_byte_coordinates]
            /// Set the current texture coordinates
            /// </summary>
            /// <param name="texture">
            /// Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of Texture, where i ranges from 0 to MaxTextureCoords - 1, which is an implementation-dependent value.
            /// </param>
            /// <param name="coords">
            /// [length: 3]
            /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "OES_byte_coordinates", Version = "", EntryPoint = "glMultiTexCoord3bvOES")]
            public static void MultiTexCoord3(OpenTK.Graphics.ES11.All texture, [CountAttribute(Count = 3)] SByte[] coords) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_byte_coordinates]
            /// Set the current texture coordinates
            /// </summary>
            /// <param name="texture">
            /// Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of Texture, where i ranges from 0 to MaxTextureCoords - 1, which is an implementation-dependent value.
            /// </param>
            /// <param name="coords">
            /// [length: 3]
            /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "OES_byte_coordinates", Version = "", EntryPoint = "glMultiTexCoord3bvOES")]
            public static void MultiTexCoord3(OpenTK.Graphics.ES11.All texture, [CountAttribute(Count = 3)] ref SByte coords) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_byte_coordinates]
            /// Set the current texture coordinates
            /// </summary>
            /// <param name="texture">
            /// Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of Texture, where i ranges from 0 to MaxTextureCoords - 1, which is an implementation-dependent value.
            /// </param>
            /// <param name="coords">
            /// [length: 3]
            /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "OES_byte_coordinates", Version = "", EntryPoint = "glMultiTexCoord3bvOES")]
            public static unsafe void MultiTexCoord3(OpenTK.Graphics.ES11.All texture, [CountAttribute(Count = 3)] SByte* coords) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_byte_coordinates]
            /// Set the current texture coordinates
            /// </summary>
            /// <param name="texture">
            /// Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of Texture, where i ranges from 0 to MaxTextureCoords - 1, which is an implementation-dependent value.
            /// </param>
            /// <param name="coords">
            /// [length: 3]
            /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
            /// </param>
            [AutoGenerated(Category = "OES_byte_coordinates", Version = "", EntryPoint = "glMultiTexCoord3bvOES")]
            public static void MultiTexCoord3(OpenTK.Graphics.ES11.TextureUnit texture, [CountAttribute(Count = 3)] Byte[] coords) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_byte_coordinates]
            /// Set the current texture coordinates
            /// </summary>
            /// <param name="texture">
            /// Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of Texture, where i ranges from 0 to MaxTextureCoords - 1, which is an implementation-dependent value.
            /// </param>
            /// <param name="coords">
            /// [length: 3]
            /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
            /// </param>
            [AutoGenerated(Category = "OES_byte_coordinates", Version = "", EntryPoint = "glMultiTexCoord3bvOES")]
            public static void MultiTexCoord3(OpenTK.Graphics.ES11.TextureUnit texture, [CountAttribute(Count = 3)] ref Byte coords) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_byte_coordinates]
            /// Set the current texture coordinates
            /// </summary>
            /// <param name="texture">
            /// Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of Texture, where i ranges from 0 to MaxTextureCoords - 1, which is an implementation-dependent value.
            /// </param>
            /// <param name="coords">
            /// [length: 3]
            /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
            /// </param>
            [AutoGenerated(Category = "OES_byte_coordinates", Version = "", EntryPoint = "glMultiTexCoord3bvOES")]
            public static unsafe void MultiTexCoord3(OpenTK.Graphics.ES11.TextureUnit texture, [CountAttribute(Count = 3)] Byte* coords) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_byte_coordinates]
            /// Set the current texture coordinates
            /// </summary>
            /// <param name="texture">
            /// Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of Texture, where i ranges from 0 to MaxTextureCoords - 1, which is an implementation-dependent value.
            /// </param>
            /// <param name="coords">
            /// [length: 3]
            /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
            /// </param>
            [AutoGenerated(Category = "OES_byte_coordinates", Version = "", EntryPoint = "glMultiTexCoord3bvOES")]
            public static void MultiTexCoord3(OpenTK.Graphics.ES11.TextureUnit texture, [CountAttribute(Count = 3)] SByte[] coords) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_byte_coordinates]
            /// Set the current texture coordinates
            /// </summary>
            /// <param name="texture">
            /// Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of Texture, where i ranges from 0 to MaxTextureCoords - 1, which is an implementation-dependent value.
            /// </param>
            /// <param name="coords">
            /// [length: 3]
            /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
            /// </param>
            [AutoGenerated(Category = "OES_byte_coordinates", Version = "", EntryPoint = "glMultiTexCoord3bvOES")]
            public static void MultiTexCoord3(OpenTK.Graphics.ES11.TextureUnit texture, [CountAttribute(Count = 3)] ref SByte coords) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_byte_coordinates]
            /// Set the current texture coordinates
            /// </summary>
            /// <param name="texture">
            /// Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of Texture, where i ranges from 0 to MaxTextureCoords - 1, which is an implementation-dependent value.
            /// </param>
            /// <param name="coords">
            /// [length: 3]
            /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
            /// </param>
            [AutoGenerated(Category = "OES_byte_coordinates", Version = "", EntryPoint = "glMultiTexCoord3bvOES")]
            public static unsafe void MultiTexCoord3(OpenTK.Graphics.ES11.TextureUnit texture, [CountAttribute(Count = 3)] SByte* coords) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="s">
            /// </param>
            /// <param name="t">
            /// </param>
            /// <param name="r">
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glMultiTexCoord3xOES")]
            public static void MultiTexCoord3x(OpenTK.Graphics.ES11.All texture, int s, int t, int r) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="s">
            /// </param>
            /// <param name="t">
            /// </param>
            /// <param name="r">
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glMultiTexCoord3xOES")]
            public static void MultiTexCoord3x(OpenTK.Graphics.ES11.TextureUnit texture, int s, int t, int r) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="coords">
            /// [length: 3]
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glMultiTexCoord3xvOES")]
            public static void MultiTexCoord3x(OpenTK.Graphics.ES11.All texture, [CountAttribute(Count = 3)] int[] coords) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="coords">
            /// [length: 3]
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glMultiTexCoord3xvOES")]
            public static void MultiTexCoord3x(OpenTK.Graphics.ES11.All texture, [CountAttribute(Count = 3)] ref int coords) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="coords">
            /// [length: 3]
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glMultiTexCoord3xvOES")]
            public static unsafe void MultiTexCoord3x(OpenTK.Graphics.ES11.All texture, [CountAttribute(Count = 3)] int* coords) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="coords">
            /// [length: 3]
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glMultiTexCoord3xvOES")]
            public static void MultiTexCoord3x(OpenTK.Graphics.ES11.TextureUnit texture, [CountAttribute(Count = 3)] int[] coords) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="coords">
            /// [length: 3]
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glMultiTexCoord3xvOES")]
            public static void MultiTexCoord3x(OpenTK.Graphics.ES11.TextureUnit texture, [CountAttribute(Count = 3)] ref int coords) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="coords">
            /// [length: 3]
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glMultiTexCoord3xvOES")]
            public static unsafe void MultiTexCoord3x(OpenTK.Graphics.ES11.TextureUnit texture, [CountAttribute(Count = 3)] int* coords) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_byte_coordinates]
            /// Set the current texture coordinates
            /// </summary>
            /// <param name="texture">
            /// Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of Texture, where i ranges from 0 to MaxTextureCoords - 1, which is an implementation-dependent value.
            /// </param>
            /// <param name="s">
            /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
            /// </param>
            /// <param name="t">
            /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
            /// </param>
            /// <param name="r">
            /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
            /// </param>
            /// <param name="q">
            /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "OES_byte_coordinates", Version = "", EntryPoint = "glMultiTexCoord4bOES")]
            public static void MultiTexCoord4(OpenTK.Graphics.ES11.All texture, Byte s, Byte t, Byte r, Byte q) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_byte_coordinates]
            /// Set the current texture coordinates
            /// </summary>
            /// <param name="texture">
            /// Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of Texture, where i ranges from 0 to MaxTextureCoords - 1, which is an implementation-dependent value.
            /// </param>
            /// <param name="s">
            /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
            /// </param>
            /// <param name="t">
            /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
            /// </param>
            /// <param name="r">
            /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
            /// </param>
            /// <param name="q">
            /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "OES_byte_coordinates", Version = "", EntryPoint = "glMultiTexCoord4bOES")]
            public static void MultiTexCoord4(OpenTK.Graphics.ES11.All texture, SByte s, SByte t, SByte r, SByte q) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_byte_coordinates]
            /// Set the current texture coordinates
            /// </summary>
            /// <param name="texture">
            /// Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of Texture, where i ranges from 0 to MaxTextureCoords - 1, which is an implementation-dependent value.
            /// </param>
            /// <param name="s">
            /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
            /// </param>
            /// <param name="t">
            /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
            /// </param>
            /// <param name="r">
            /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
            /// </param>
            /// <param name="q">
            /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
            /// </param>
            [AutoGenerated(Category = "OES_byte_coordinates", Version = "", EntryPoint = "glMultiTexCoord4bOES")]
            public static void MultiTexCoord4(OpenTK.Graphics.ES11.TextureUnit texture, Byte s, Byte t, Byte r, Byte q) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_byte_coordinates]
            /// Set the current texture coordinates
            /// </summary>
            /// <param name="texture">
            /// Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of Texture, where i ranges from 0 to MaxTextureCoords - 1, which is an implementation-dependent value.
            /// </param>
            /// <param name="s">
            /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
            /// </param>
            /// <param name="t">
            /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
            /// </param>
            /// <param name="r">
            /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
            /// </param>
            /// <param name="q">
            /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
            /// </param>
            [AutoGenerated(Category = "OES_byte_coordinates", Version = "", EntryPoint = "glMultiTexCoord4bOES")]
            public static void MultiTexCoord4(OpenTK.Graphics.ES11.TextureUnit texture, SByte s, SByte t, SByte r, SByte q) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_byte_coordinates]
            /// Set the current texture coordinates
            /// </summary>
            /// <param name="texture">
            /// Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of Texture, where i ranges from 0 to MaxTextureCoords - 1, which is an implementation-dependent value.
            /// </param>
            /// <param name="coords">
            /// [length: 4]
            /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "OES_byte_coordinates", Version = "", EntryPoint = "glMultiTexCoord4bvOES")]
            public static void MultiTexCoord4(OpenTK.Graphics.ES11.All texture, [CountAttribute(Count = 4)] Byte[] coords) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_byte_coordinates]
            /// Set the current texture coordinates
            /// </summary>
            /// <param name="texture">
            /// Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of Texture, where i ranges from 0 to MaxTextureCoords - 1, which is an implementation-dependent value.
            /// </param>
            /// <param name="coords">
            /// [length: 4]
            /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "OES_byte_coordinates", Version = "", EntryPoint = "glMultiTexCoord4bvOES")]
            public static void MultiTexCoord4(OpenTK.Graphics.ES11.All texture, [CountAttribute(Count = 4)] ref Byte coords) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_byte_coordinates]
            /// Set the current texture coordinates
            /// </summary>
            /// <param name="texture">
            /// Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of Texture, where i ranges from 0 to MaxTextureCoords - 1, which is an implementation-dependent value.
            /// </param>
            /// <param name="coords">
            /// [length: 4]
            /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "OES_byte_coordinates", Version = "", EntryPoint = "glMultiTexCoord4bvOES")]
            public static unsafe void MultiTexCoord4(OpenTK.Graphics.ES11.All texture, [CountAttribute(Count = 4)] Byte* coords) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_byte_coordinates]
            /// Set the current texture coordinates
            /// </summary>
            /// <param name="texture">
            /// Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of Texture, where i ranges from 0 to MaxTextureCoords - 1, which is an implementation-dependent value.
            /// </param>
            /// <param name="coords">
            /// [length: 4]
            /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "OES_byte_coordinates", Version = "", EntryPoint = "glMultiTexCoord4bvOES")]
            public static void MultiTexCoord4(OpenTK.Graphics.ES11.All texture, [CountAttribute(Count = 4)] SByte[] coords) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_byte_coordinates]
            /// Set the current texture coordinates
            /// </summary>
            /// <param name="texture">
            /// Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of Texture, where i ranges from 0 to MaxTextureCoords - 1, which is an implementation-dependent value.
            /// </param>
            /// <param name="coords">
            /// [length: 4]
            /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "OES_byte_coordinates", Version = "", EntryPoint = "glMultiTexCoord4bvOES")]
            public static void MultiTexCoord4(OpenTK.Graphics.ES11.All texture, [CountAttribute(Count = 4)] ref SByte coords) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_byte_coordinates]
            /// Set the current texture coordinates
            /// </summary>
            /// <param name="texture">
            /// Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of Texture, where i ranges from 0 to MaxTextureCoords - 1, which is an implementation-dependent value.
            /// </param>
            /// <param name="coords">
            /// [length: 4]
            /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "OES_byte_coordinates", Version = "", EntryPoint = "glMultiTexCoord4bvOES")]
            public static unsafe void MultiTexCoord4(OpenTK.Graphics.ES11.All texture, [CountAttribute(Count = 4)] SByte* coords) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_byte_coordinates]
            /// Set the current texture coordinates
            /// </summary>
            /// <param name="texture">
            /// Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of Texture, where i ranges from 0 to MaxTextureCoords - 1, which is an implementation-dependent value.
            /// </param>
            /// <param name="coords">
            /// [length: 4]
            /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
            /// </param>
            [AutoGenerated(Category = "OES_byte_coordinates", Version = "", EntryPoint = "glMultiTexCoord4bvOES")]
            public static void MultiTexCoord4(OpenTK.Graphics.ES11.TextureUnit texture, [CountAttribute(Count = 4)] Byte[] coords) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_byte_coordinates]
            /// Set the current texture coordinates
            /// </summary>
            /// <param name="texture">
            /// Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of Texture, where i ranges from 0 to MaxTextureCoords - 1, which is an implementation-dependent value.
            /// </param>
            /// <param name="coords">
            /// [length: 4]
            /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
            /// </param>
            [AutoGenerated(Category = "OES_byte_coordinates", Version = "", EntryPoint = "glMultiTexCoord4bvOES")]
            public static void MultiTexCoord4(OpenTK.Graphics.ES11.TextureUnit texture, [CountAttribute(Count = 4)] ref Byte coords) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_byte_coordinates]
            /// Set the current texture coordinates
            /// </summary>
            /// <param name="texture">
            /// Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of Texture, where i ranges from 0 to MaxTextureCoords - 1, which is an implementation-dependent value.
            /// </param>
            /// <param name="coords">
            /// [length: 4]
            /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
            /// </param>
            [AutoGenerated(Category = "OES_byte_coordinates", Version = "", EntryPoint = "glMultiTexCoord4bvOES")]
            public static unsafe void MultiTexCoord4(OpenTK.Graphics.ES11.TextureUnit texture, [CountAttribute(Count = 4)] Byte* coords) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_byte_coordinates]
            /// Set the current texture coordinates
            /// </summary>
            /// <param name="texture">
            /// Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of Texture, where i ranges from 0 to MaxTextureCoords - 1, which is an implementation-dependent value.
            /// </param>
            /// <param name="coords">
            /// [length: 4]
            /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
            /// </param>
            [AutoGenerated(Category = "OES_byte_coordinates", Version = "", EntryPoint = "glMultiTexCoord4bvOES")]
            public static void MultiTexCoord4(OpenTK.Graphics.ES11.TextureUnit texture, [CountAttribute(Count = 4)] SByte[] coords) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_byte_coordinates]
            /// Set the current texture coordinates
            /// </summary>
            /// <param name="texture">
            /// Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of Texture, where i ranges from 0 to MaxTextureCoords - 1, which is an implementation-dependent value.
            /// </param>
            /// <param name="coords">
            /// [length: 4]
            /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
            /// </param>
            [AutoGenerated(Category = "OES_byte_coordinates", Version = "", EntryPoint = "glMultiTexCoord4bvOES")]
            public static void MultiTexCoord4(OpenTK.Graphics.ES11.TextureUnit texture, [CountAttribute(Count = 4)] ref SByte coords) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_byte_coordinates]
            /// Set the current texture coordinates
            /// </summary>
            /// <param name="texture">
            /// Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of Texture, where i ranges from 0 to MaxTextureCoords - 1, which is an implementation-dependent value.
            /// </param>
            /// <param name="coords">
            /// [length: 4]
            /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
            /// </param>
            [AutoGenerated(Category = "OES_byte_coordinates", Version = "", EntryPoint = "glMultiTexCoord4bvOES")]
            public static unsafe void MultiTexCoord4(OpenTK.Graphics.ES11.TextureUnit texture, [CountAttribute(Count = 4)] SByte* coords) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="s">
            /// </param>
            /// <param name="t">
            /// </param>
            /// <param name="r">
            /// </param>
            /// <param name="q">
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glMultiTexCoord4xOES")]
            public static void MultiTexCoord4x(OpenTK.Graphics.ES11.All texture, int s, int t, int r, int q) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="s">
            /// </param>
            /// <param name="t">
            /// </param>
            /// <param name="r">
            /// </param>
            /// <param name="q">
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glMultiTexCoord4xOES")]
            public static void MultiTexCoord4x(OpenTK.Graphics.ES11.TextureUnit texture, int s, int t, int r, int q) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="coords">
            /// [length: 4]
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glMultiTexCoord4xvOES")]
            public static void MultiTexCoord4x(OpenTK.Graphics.ES11.All texture, [CountAttribute(Count = 4)] int[] coords) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="coords">
            /// [length: 4]
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glMultiTexCoord4xvOES")]
            public static void MultiTexCoord4x(OpenTK.Graphics.ES11.All texture, [CountAttribute(Count = 4)] ref int coords) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="coords">
            /// [length: 4]
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glMultiTexCoord4xvOES")]
            public static unsafe void MultiTexCoord4x(OpenTK.Graphics.ES11.All texture, [CountAttribute(Count = 4)] int* coords) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="coords">
            /// [length: 4]
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glMultiTexCoord4xvOES")]
            public static void MultiTexCoord4x(OpenTK.Graphics.ES11.TextureUnit texture, [CountAttribute(Count = 4)] int[] coords) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="coords">
            /// [length: 4]
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glMultiTexCoord4xvOES")]
            public static void MultiTexCoord4x(OpenTK.Graphics.ES11.TextureUnit texture, [CountAttribute(Count = 4)] ref int coords) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="coords">
            /// [length: 4]
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glMultiTexCoord4xvOES")]
            public static unsafe void MultiTexCoord4x(OpenTK.Graphics.ES11.TextureUnit texture, [CountAttribute(Count = 4)] int* coords) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="m">
            /// [length: 16]
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glMultMatrixxOES")]
            public static void MultMatrixx([CountAttribute(Count = 16)] int[] m) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="m">
            /// [length: 16]
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glMultMatrixxOES")]
            public static void MultMatrixx([CountAttribute(Count = 16)] ref int m) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="m">
            /// [length: 16]
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glMultMatrixxOES")]
            public static unsafe void MultMatrixx([CountAttribute(Count = 16)] int* m) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="m">
            /// [length: 16]
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glMultTransposeMatrixxOES")]
            public static void MultTransposeMatrixx([CountAttribute(Count = 16)] int[] m) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="m">
            /// [length: 16]
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glMultTransposeMatrixxOES")]
            public static void MultTransposeMatrixx([CountAttribute(Count = 16)] ref int m) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="m">
            /// [length: 16]
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glMultTransposeMatrixxOES")]
            public static unsafe void MultTransposeMatrixx([CountAttribute(Count = 16)] int* m) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="nx">
            /// </param>
            /// <param name="ny">
            /// </param>
            /// <param name="nz">
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glNormal3xOES")]
            public static void Normal3x(int nx, int ny, int nz) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="coords">
            /// [length: 3]
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glNormal3xvOES")]
            public static void Normal3x([CountAttribute(Count = 3)] int[] coords) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="coords">
            /// [length: 3]
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glNormal3xvOES")]
            public static void Normal3x([CountAttribute(Count = 3)] ref int coords) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="coords">
            /// [length: 3]
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glNormal3xvOES")]
            public static unsafe void Normal3x([CountAttribute(Count = 3)] int* coords) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_single_precision]
            /// Multiply the current matrix with an orthographic matrix
            /// </summary>
            /// <param name="l">
            /// Specify the coordinates for the left and right vertical clipping planes.
            /// </param>
            /// <param name="r">
            /// Specify the coordinates for the left and right vertical clipping planes.
            /// </param>
            /// <param name="b">
            /// Specify the coordinates for the bottom and top horizontal clipping planes.
            /// </param>
            /// <param name="t">
            /// Specify the coordinates for the bottom and top horizontal clipping planes.
            /// </param>
            /// <param name="n">
            /// Specify the distances to the nearer and farther depth clipping planes. These values are negative if the plane is to be behind the viewer.
            /// </param>
            /// <param name="f">
            /// Specify the distances to the nearer and farther depth clipping planes. These values are negative if the plane is to be behind the viewer.
            /// </param>
            [AutoGenerated(Category = "OES_single_precision", Version = "", EntryPoint = "glOrthofOES")]
            public static void Ortho(float l, float r, float b, float t, float n, float f) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="l">
            /// </param>
            /// <param name="r">
            /// </param>
            /// <param name="b">
            /// </param>
            /// <param name="t">
            /// </param>
            /// <param name="n">
            /// </param>
            /// <param name="f">
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glOrthoxOES")]
            public static void Orthox(int l, int r, int b, int t, int n, int f) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="token">
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glPassThroughxOES")]
            public static void PassThroughx(int token) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="pname">
            /// </param>
            /// <param name="param">
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glPixelTransferxOES")]
            public static void PixelTransferx(OpenTK.Graphics.ES11.All pname, int param) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="pname">
            /// </param>
            /// <param name="param">
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glPixelTransferxOES")]
            public static void PixelTransferx(OpenTK.Graphics.ES11.PixelTransferParameter pname, int param) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="xfactor">
            /// </param>
            /// <param name="yfactor">
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glPixelZoomxOES")]
            public static void PixelZoomx(int xfactor, int yfactor) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="pname">
            /// </param>
            /// <param name="param">
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glPointParameterxOES")]
            public static void PointParameterx(OpenTK.Graphics.ES11.All pname, int param) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glPointParameterxvOES")]
            public static void PointParameterx(OpenTK.Graphics.ES11.All pname, [CountAttribute(Computed = "pname")] int[] @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glPointParameterxvOES")]
            public static unsafe void PointParameterx(OpenTK.Graphics.ES11.All pname, [CountAttribute(Computed = "pname")] int* @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_point_size_array]
            /// </summary>
            /// <param name="type">
            /// </param>
            /// <param name="stride">
            /// </param>
            /// <param name="pointer">
            /// [length: COMPSIZE(type,stride)]
            /// </param>
            [AutoGenerated(Category = "OES_point_size_array", Version = "", EntryPoint = "glPointSizePointerOES")]
            public static void PointSizePointer(OpenTK.Graphics.ES11.All type, int stride, [CountAttribute(Computed = "type,stride")] IntPtr pointer) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_point_size_array]
            /// </summary>
            /// <param name="type">
            /// </param>
            /// <param name="stride">
            /// </param>
            /// <param name="pointer">
            /// [length: COMPSIZE(type,stride)]
            /// </param>
            [AutoGenerated(Category = "OES_point_size_array", Version = "", EntryPoint = "glPointSizePointerOES")]
            public static void PointSizePointer<T2>(OpenTK.Graphics.ES11.All type, int stride, [InAttribute, OutAttribute, CountAttribute(Computed = "type,stride")] T2[] pointer)
                where T2 : struct
             { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_point_size_array]
            /// </summary>
            /// <param name="type">
            /// </param>
            /// <param name="stride">
            /// </param>
            /// <param name="pointer">
            /// [length: COMPSIZE(type,stride)]
            /// </param>
            [AutoGenerated(Category = "OES_point_size_array", Version = "", EntryPoint = "glPointSizePointerOES")]
            public static void PointSizePointer<T2>(OpenTK.Graphics.ES11.All type, int stride, [InAttribute, OutAttribute, CountAttribute(Computed = "type,stride")] T2[,] pointer)
                where T2 : struct
             { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_point_size_array]
            /// </summary>
            /// <param name="type">
            /// </param>
            /// <param name="stride">
            /// </param>
            /// <param name="pointer">
            /// [length: COMPSIZE(type,stride)]
            /// </param>
            [AutoGenerated(Category = "OES_point_size_array", Version = "", EntryPoint = "glPointSizePointerOES")]
            public static void PointSizePointer<T2>(OpenTK.Graphics.ES11.All type, int stride, [InAttribute, OutAttribute, CountAttribute(Computed = "type,stride")] T2[,,] pointer)
                where T2 : struct
             { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_point_size_array]
            /// </summary>
            /// <param name="type">
            /// </param>
            /// <param name="stride">
            /// </param>
            /// <param name="pointer">
            /// [length: COMPSIZE(type,stride)]
            /// </param>
            [AutoGenerated(Category = "OES_point_size_array", Version = "", EntryPoint = "glPointSizePointerOES")]
            public static void PointSizePointer<T2>(OpenTK.Graphics.ES11.All type, int stride, [InAttribute, OutAttribute, CountAttribute(Computed = "type,stride")] ref T2 pointer)
                where T2 : struct
             { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="size">
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glPointSizexOES")]
            public static void PointSizex(int size) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="factor">
            /// </param>
            /// <param name="units">
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glPolygonOffsetxOES")]
            public static void PolygonOffsetx(int factor, int units) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="n">
            /// </param>
            /// <param name="textures">
            /// [length: n]
            /// </param>
            /// <param name="priorities">
            /// [length: n]
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glPrioritizeTexturesxOES")]
            public static void PrioritizeTexturesx(int n, [CountAttribute(Parameter = "n")] int[] textures, [CountAttribute(Parameter = "n")] int[] priorities) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="n">
            /// </param>
            /// <param name="textures">
            /// [length: n]
            /// </param>
            /// <param name="priorities">
            /// [length: n]
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glPrioritizeTexturesxOES")]
            public static void PrioritizeTexturesx(int n, [CountAttribute(Parameter = "n")] ref int textures, [CountAttribute(Parameter = "n")] ref int priorities) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="n">
            /// </param>
            /// <param name="textures">
            /// [length: n]
            /// </param>
            /// <param name="priorities">
            /// [length: n]
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glPrioritizeTexturesxOES")]
            public static unsafe void PrioritizeTexturesx(int n, [CountAttribute(Parameter = "n")] int* textures, [CountAttribute(Parameter = "n")] int* priorities) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="n">
            /// </param>
            /// <param name="textures">
            /// [length: n]
            /// </param>
            /// <param name="priorities">
            /// [length: n]
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glPrioritizeTexturesxOES")]
            public static void PrioritizeTexturesx(int n, [CountAttribute(Parameter = "n")] uint[] textures, [CountAttribute(Parameter = "n")] int[] priorities) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="n">
            /// </param>
            /// <param name="textures">
            /// [length: n]
            /// </param>
            /// <param name="priorities">
            /// [length: n]
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glPrioritizeTexturesxOES")]
            public static void PrioritizeTexturesx(int n, [CountAttribute(Parameter = "n")] ref uint textures, [CountAttribute(Parameter = "n")] ref int priorities) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="n">
            /// </param>
            /// <param name="textures">
            /// [length: n]
            /// </param>
            /// <param name="priorities">
            /// [length: n]
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glPrioritizeTexturesxOES")]
            public static unsafe void PrioritizeTexturesx(int n, [CountAttribute(Parameter = "n")] uint* textures, [CountAttribute(Parameter = "n")] int* priorities) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_query_matrix]
            /// </summary>
            /// <param name="mantissa">
            /// [length: 16]
            /// </param>
            /// <param name="exponent">
            /// [length: 16]
            /// </param>
            [AutoGenerated(Category = "OES_query_matrix", Version = "", EntryPoint = "glQueryMatrixxOES")]
            public static int QueryMatrixx([OutAttribute, CountAttribute(Count = 16)] int[] mantissa, [OutAttribute, CountAttribute(Count = 16)] int[] exponent) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_query_matrix]
            /// </summary>
            /// <param name="mantissa">
            /// [length: 16]
            /// </param>
            /// <param name="exponent">
            /// [length: 16]
            /// </param>
            [AutoGenerated(Category = "OES_query_matrix", Version = "", EntryPoint = "glQueryMatrixxOES")]
            public static int QueryMatrixx([OutAttribute, CountAttribute(Count = 16)] out int mantissa, [OutAttribute, CountAttribute(Count = 16)] out int exponent) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_query_matrix]
            /// </summary>
            /// <param name="mantissa">
            /// [length: 16]
            /// </param>
            /// <param name="exponent">
            /// [length: 16]
            /// </param>
            [AutoGenerated(Category = "OES_query_matrix", Version = "", EntryPoint = "glQueryMatrixxOES")]
            public static unsafe int QueryMatrixx([OutAttribute, CountAttribute(Count = 16)] int* mantissa, [OutAttribute, CountAttribute(Count = 16)] int* exponent) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="x">
            /// </param>
            /// <param name="y">
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glRasterPos2xOES")]
            public static void RasterPos2x(int x, int y) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="coords">
            /// [length: 2]
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glRasterPos2xvOES")]
            public static void RasterPos2x([CountAttribute(Count = 2)] int[] coords) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="coords">
            /// [length: 2]
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glRasterPos2xvOES")]
            public static void RasterPos2x([CountAttribute(Count = 2)] ref int coords) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="coords">
            /// [length: 2]
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glRasterPos2xvOES")]
            public static unsafe void RasterPos2x([CountAttribute(Count = 2)] int* coords) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="x">
            /// </param>
            /// <param name="y">
            /// </param>
            /// <param name="z">
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glRasterPos3xOES")]
            public static void RasterPos3x(int x, int y, int z) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="coords">
            /// [length: 3]
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glRasterPos3xvOES")]
            public static void RasterPos3x([CountAttribute(Count = 3)] int[] coords) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="coords">
            /// [length: 3]
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glRasterPos3xvOES")]
            public static void RasterPos3x([CountAttribute(Count = 3)] ref int coords) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="coords">
            /// [length: 3]
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glRasterPos3xvOES")]
            public static unsafe void RasterPos3x([CountAttribute(Count = 3)] int* coords) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="x">
            /// </param>
            /// <param name="y">
            /// </param>
            /// <param name="z">
            /// </param>
            /// <param name="w">
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glRasterPos4xOES")]
            public static void RasterPos4x(int x, int y, int z, int w) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="coords">
            /// [length: 4]
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glRasterPos4xvOES")]
            public static void RasterPos4x([CountAttribute(Count = 4)] int[] coords) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="coords">
            /// [length: 4]
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glRasterPos4xvOES")]
            public static void RasterPos4x([CountAttribute(Count = 4)] ref int coords) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="coords">
            /// [length: 4]
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glRasterPos4xvOES")]
            public static unsafe void RasterPos4x([CountAttribute(Count = 4)] int* coords) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="x1">
            /// </param>
            /// <param name="y1">
            /// </param>
            /// <param name="x2">
            /// </param>
            /// <param name="y2">
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glRectxOES")]
            public static void Rectx(int x1, int y1, int x2, int y2) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="v1">
            /// [length: 2]
            /// </param>
            /// <param name="v2">
            /// [length: 2]
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glRectxvOES")]
            public static void Rectx([CountAttribute(Count = 2)] int[] v1, [CountAttribute(Count = 2)] int[] v2) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="v1">
            /// [length: 2]
            /// </param>
            /// <param name="v2">
            /// [length: 2]
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glRectxvOES")]
            public static void Rectx([CountAttribute(Count = 2)] ref int v1, [CountAttribute(Count = 2)] ref int v2) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="v1">
            /// [length: 2]
            /// </param>
            /// <param name="v2">
            /// [length: 2]
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glRectxvOES")]
            public static unsafe void Rectx([CountAttribute(Count = 2)] int* v1, [CountAttribute(Count = 2)] int* v2) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_framebuffer_object]
            /// Create and initialize a renderbuffer object's data store
            /// </summary>
            /// <param name="target">
            /// Specifies the renderbuffer target.  The symbolic constant must be Renderbuffer.
            /// </param>
            /// <param name="internalformat">
            /// Specifies the color-renderable, depth-renderable, or stencil-renderable format of the renderbuffer. Must be one of the following symbolic constants: Rgba4, Rgb565, Rgb5A1, DepthComponent16, or StencilIndex8.
            /// </param>
            /// <param name="width">
            /// Specifies the width of the renderbuffer in pixels.
            /// </param>
            /// <param name="height">
            /// Specifies the height of the renderbuffer in pixels.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "OES_framebuffer_object", Version = "", EntryPoint = "glRenderbufferStorageOES")]
            public static void RenderbufferStorage(OpenTK.Graphics.ES11.All target, OpenTK.Graphics.ES11.All internalformat, int width, int height) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_framebuffer_object]
            /// Create and initialize a renderbuffer object's data store
            /// </summary>
            /// <param name="target">
            /// Specifies the renderbuffer target.  The symbolic constant must be Renderbuffer.
            /// </param>
            /// <param name="internalformat">
            /// Specifies the color-renderable, depth-renderable, or stencil-renderable format of the renderbuffer. Must be one of the following symbolic constants: Rgba4, Rgb565, Rgb5A1, DepthComponent16, or StencilIndex8.
            /// </param>
            /// <param name="width">
            /// Specifies the width of the renderbuffer in pixels.
            /// </param>
            /// <param name="height">
            /// Specifies the height of the renderbuffer in pixels.
            /// </param>
            [AutoGenerated(Category = "OES_framebuffer_object", Version = "", EntryPoint = "glRenderbufferStorageOES")]
            public static void RenderbufferStorage(OpenTK.Graphics.ES11.RenderbufferTarget target, OpenTK.Graphics.ES11.InternalFormat internalformat, int width, int height) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="angle">
            /// </param>
            /// <param name="x">
            /// </param>
            /// <param name="y">
            /// </param>
            /// <param name="z">
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glRotatexOES")]
            public static void Rotatex(int angle, int x, int y, int z) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="value">
            /// </param>
            /// <param name="invert">
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glSampleCoveragexOES")]
            public static void SampleCoveragex(int value, bool invert) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="x">
            /// </param>
            /// <param name="y">
            /// </param>
            /// <param name="z">
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glScalexOES")]
            public static void Scalex(int x, int y, int z) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_byte_coordinates]
            /// Set the current texture coordinates
            /// </summary>
            /// <param name="s">
            /// Specify s, t, r, and q  texture coordinates. Not all parameters are present in all forms of the command.
            /// </param>
            [AutoGenerated(Category = "OES_byte_coordinates", Version = "", EntryPoint = "glTexCoord1bOES")]
            public static void TexCoord1(Byte s) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_byte_coordinates]
            /// Set the current texture coordinates
            /// </summary>
            /// <param name="s">
            /// Specify s, t, r, and q  texture coordinates. Not all parameters are present in all forms of the command.
            /// </param>
            [AutoGenerated(Category = "OES_byte_coordinates", Version = "", EntryPoint = "glTexCoord1bOES")]
            public static void TexCoord1(SByte s) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_byte_coordinates]
            /// Set the current texture coordinates
            /// </summary>
            /// <param name="coords">
            /// [length: 1]
            /// Specify s, t, r, and q  texture coordinates. Not all parameters are present in all forms of the command.
            /// </param>
            [AutoGenerated(Category = "OES_byte_coordinates", Version = "", EntryPoint = "glTexCoord1bvOES")]
            public static unsafe void TexCoord1([CountAttribute(Count = 1)] Byte* coords) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_byte_coordinates]
            /// Set the current texture coordinates
            /// </summary>
            /// <param name="coords">
            /// [length: 1]
            /// Specify s, t, r, and q  texture coordinates. Not all parameters are present in all forms of the command.
            /// </param>
            [AutoGenerated(Category = "OES_byte_coordinates", Version = "", EntryPoint = "glTexCoord1bvOES")]
            public static unsafe void TexCoord1([CountAttribute(Count = 1)] SByte* coords) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="s">
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glTexCoord1xOES")]
            public static void TexCoord1x(int s) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="coords">
            /// [length: 1]
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glTexCoord1xvOES")]
            public static unsafe void TexCoord1x([CountAttribute(Count = 1)] int* coords) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_byte_coordinates]
            /// Set the current texture coordinates
            /// </summary>
            /// <param name="s">
            /// Specify s, t, r, and q  texture coordinates. Not all parameters are present in all forms of the command.
            /// </param>
            /// <param name="t">
            /// Specify s, t, r, and q  texture coordinates. Not all parameters are present in all forms of the command.
            /// </param>
            [AutoGenerated(Category = "OES_byte_coordinates", Version = "", EntryPoint = "glTexCoord2bOES")]
            public static void TexCoord2(Byte s, Byte t) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_byte_coordinates]
            /// Set the current texture coordinates
            /// </summary>
            /// <param name="s">
            /// Specify s, t, r, and q  texture coordinates. Not all parameters are present in all forms of the command.
            /// </param>
            /// <param name="t">
            /// Specify s, t, r, and q  texture coordinates. Not all parameters are present in all forms of the command.
            /// </param>
            [AutoGenerated(Category = "OES_byte_coordinates", Version = "", EntryPoint = "glTexCoord2bOES")]
            public static void TexCoord2(SByte s, SByte t) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_byte_coordinates]
            /// Set the current texture coordinates
            /// </summary>
            /// <param name="coords">
            /// [length: 2]
            /// Specify s, t, r, and q  texture coordinates. Not all parameters are present in all forms of the command.
            /// </param>
            [AutoGenerated(Category = "OES_byte_coordinates", Version = "", EntryPoint = "glTexCoord2bvOES")]
            public static void TexCoord2([CountAttribute(Count = 2)] Byte[] coords) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_byte_coordinates]
            /// Set the current texture coordinates
            /// </summary>
            /// <param name="coords">
            /// [length: 2]
            /// Specify s, t, r, and q  texture coordinates. Not all parameters are present in all forms of the command.
            /// </param>
            [AutoGenerated(Category = "OES_byte_coordinates", Version = "", EntryPoint = "glTexCoord2bvOES")]
            public static void TexCoord2([CountAttribute(Count = 2)] ref Byte coords) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_byte_coordinates]
            /// Set the current texture coordinates
            /// </summary>
            /// <param name="coords">
            /// [length: 2]
            /// Specify s, t, r, and q  texture coordinates. Not all parameters are present in all forms of the command.
            /// </param>
            [AutoGenerated(Category = "OES_byte_coordinates", Version = "", EntryPoint = "glTexCoord2bvOES")]
            public static unsafe void TexCoord2([CountAttribute(Count = 2)] Byte* coords) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_byte_coordinates]
            /// Set the current texture coordinates
            /// </summary>
            /// <param name="coords">
            /// [length: 2]
            /// Specify s, t, r, and q  texture coordinates. Not all parameters are present in all forms of the command.
            /// </param>
            [AutoGenerated(Category = "OES_byte_coordinates", Version = "", EntryPoint = "glTexCoord2bvOES")]
            public static void TexCoord2([CountAttribute(Count = 2)] SByte[] coords) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_byte_coordinates]
            /// Set the current texture coordinates
            /// </summary>
            /// <param name="coords">
            /// [length: 2]
            /// Specify s, t, r, and q  texture coordinates. Not all parameters are present in all forms of the command.
            /// </param>
            [AutoGenerated(Category = "OES_byte_coordinates", Version = "", EntryPoint = "glTexCoord2bvOES")]
            public static void TexCoord2([CountAttribute(Count = 2)] ref SByte coords) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_byte_coordinates]
            /// Set the current texture coordinates
            /// </summary>
            /// <param name="coords">
            /// [length: 2]
            /// Specify s, t, r, and q  texture coordinates. Not all parameters are present in all forms of the command.
            /// </param>
            [AutoGenerated(Category = "OES_byte_coordinates", Version = "", EntryPoint = "glTexCoord2bvOES")]
            public static unsafe void TexCoord2([CountAttribute(Count = 2)] SByte* coords) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="s">
            /// </param>
            /// <param name="t">
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glTexCoord2xOES")]
            public static void TexCoord2x(int s, int t) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="coords">
            /// [length: 2]
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glTexCoord2xvOES")]
            public static void TexCoord2x([CountAttribute(Count = 2)] int[] coords) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="coords">
            /// [length: 2]
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glTexCoord2xvOES")]
            public static void TexCoord2x([CountAttribute(Count = 2)] ref int coords) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="coords">
            /// [length: 2]
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glTexCoord2xvOES")]
            public static unsafe void TexCoord2x([CountAttribute(Count = 2)] int* coords) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_byte_coordinates]
            /// Set the current texture coordinates
            /// </summary>
            /// <param name="s">
            /// Specify s, t, r, and q  texture coordinates. Not all parameters are present in all forms of the command.
            /// </param>
            /// <param name="t">
            /// Specify s, t, r, and q  texture coordinates. Not all parameters are present in all forms of the command.
            /// </param>
            /// <param name="r">
            /// Specify s, t, r, and q  texture coordinates. Not all parameters are present in all forms of the command.
            /// </param>
            [AutoGenerated(Category = "OES_byte_coordinates", Version = "", EntryPoint = "glTexCoord3bOES")]
            public static void TexCoord3(Byte s, Byte t, Byte r) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_byte_coordinates]
            /// Set the current texture coordinates
            /// </summary>
            /// <param name="s">
            /// Specify s, t, r, and q  texture coordinates. Not all parameters are present in all forms of the command.
            /// </param>
            /// <param name="t">
            /// Specify s, t, r, and q  texture coordinates. Not all parameters are present in all forms of the command.
            /// </param>
            /// <param name="r">
            /// Specify s, t, r, and q  texture coordinates. Not all parameters are present in all forms of the command.
            /// </param>
            [AutoGenerated(Category = "OES_byte_coordinates", Version = "", EntryPoint = "glTexCoord3bOES")]
            public static void TexCoord3(SByte s, SByte t, SByte r) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_byte_coordinates]
            /// Set the current texture coordinates
            /// </summary>
            /// <param name="coords">
            /// [length: 3]
            /// Specify s, t, r, and q  texture coordinates. Not all parameters are present in all forms of the command.
            /// </param>
            [AutoGenerated(Category = "OES_byte_coordinates", Version = "", EntryPoint = "glTexCoord3bvOES")]
            public static void TexCoord3([CountAttribute(Count = 3)] Byte[] coords) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_byte_coordinates]
            /// Set the current texture coordinates
            /// </summary>
            /// <param name="coords">
            /// [length: 3]
            /// Specify s, t, r, and q  texture coordinates. Not all parameters are present in all forms of the command.
            /// </param>
            [AutoGenerated(Category = "OES_byte_coordinates", Version = "", EntryPoint = "glTexCoord3bvOES")]
            public static void TexCoord3([CountAttribute(Count = 3)] ref Byte coords) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_byte_coordinates]
            /// Set the current texture coordinates
            /// </summary>
            /// <param name="coords">
            /// [length: 3]
            /// Specify s, t, r, and q  texture coordinates. Not all parameters are present in all forms of the command.
            /// </param>
            [AutoGenerated(Category = "OES_byte_coordinates", Version = "", EntryPoint = "glTexCoord3bvOES")]
            public static unsafe void TexCoord3([CountAttribute(Count = 3)] Byte* coords) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_byte_coordinates]
            /// Set the current texture coordinates
            /// </summary>
            /// <param name="coords">
            /// [length: 3]
            /// Specify s, t, r, and q  texture coordinates. Not all parameters are present in all forms of the command.
            /// </param>
            [AutoGenerated(Category = "OES_byte_coordinates", Version = "", EntryPoint = "glTexCoord3bvOES")]
            public static void TexCoord3([CountAttribute(Count = 3)] SByte[] coords) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_byte_coordinates]
            /// Set the current texture coordinates
            /// </summary>
            /// <param name="coords">
            /// [length: 3]
            /// Specify s, t, r, and q  texture coordinates. Not all parameters are present in all forms of the command.
            /// </param>
            [AutoGenerated(Category = "OES_byte_coordinates", Version = "", EntryPoint = "glTexCoord3bvOES")]
            public static void TexCoord3([CountAttribute(Count = 3)] ref SByte coords) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_byte_coordinates]
            /// Set the current texture coordinates
            /// </summary>
            /// <param name="coords">
            /// [length: 3]
            /// Specify s, t, r, and q  texture coordinates. Not all parameters are present in all forms of the command.
            /// </param>
            [AutoGenerated(Category = "OES_byte_coordinates", Version = "", EntryPoint = "glTexCoord3bvOES")]
            public static unsafe void TexCoord3([CountAttribute(Count = 3)] SByte* coords) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="s">
            /// </param>
            /// <param name="t">
            /// </param>
            /// <param name="r">
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glTexCoord3xOES")]
            public static void TexCoord3x(int s, int t, int r) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="coords">
            /// [length: 3]
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glTexCoord3xvOES")]
            public static void TexCoord3x([CountAttribute(Count = 3)] int[] coords) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="coords">
            /// [length: 3]
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glTexCoord3xvOES")]
            public static void TexCoord3x([CountAttribute(Count = 3)] ref int coords) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="coords">
            /// [length: 3]
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glTexCoord3xvOES")]
            public static unsafe void TexCoord3x([CountAttribute(Count = 3)] int* coords) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_byte_coordinates]
            /// Set the current texture coordinates
            /// </summary>
            /// <param name="s">
            /// Specify s, t, r, and q  texture coordinates. Not all parameters are present in all forms of the command.
            /// </param>
            /// <param name="t">
            /// Specify s, t, r, and q  texture coordinates. Not all parameters are present in all forms of the command.
            /// </param>
            /// <param name="r">
            /// Specify s, t, r, and q  texture coordinates. Not all parameters are present in all forms of the command.
            /// </param>
            /// <param name="q">
            /// Specify s, t, r, and q  texture coordinates. Not all parameters are present in all forms of the command.
            /// </param>
            [AutoGenerated(Category = "OES_byte_coordinates", Version = "", EntryPoint = "glTexCoord4bOES")]
            public static void TexCoord4(Byte s, Byte t, Byte r, Byte q) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_byte_coordinates]
            /// Set the current texture coordinates
            /// </summary>
            /// <param name="s">
            /// Specify s, t, r, and q  texture coordinates. Not all parameters are present in all forms of the command.
            /// </param>
            /// <param name="t">
            /// Specify s, t, r, and q  texture coordinates. Not all parameters are present in all forms of the command.
            /// </param>
            /// <param name="r">
            /// Specify s, t, r, and q  texture coordinates. Not all parameters are present in all forms of the command.
            /// </param>
            /// <param name="q">
            /// Specify s, t, r, and q  texture coordinates. Not all parameters are present in all forms of the command.
            /// </param>
            [AutoGenerated(Category = "OES_byte_coordinates", Version = "", EntryPoint = "glTexCoord4bOES")]
            public static void TexCoord4(SByte s, SByte t, SByte r, SByte q) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_byte_coordinates]
            /// Set the current texture coordinates
            /// </summary>
            /// <param name="coords">
            /// [length: 4]
            /// Specify s, t, r, and q  texture coordinates. Not all parameters are present in all forms of the command.
            /// </param>
            [AutoGenerated(Category = "OES_byte_coordinates", Version = "", EntryPoint = "glTexCoord4bvOES")]
            public static void TexCoord4([CountAttribute(Count = 4)] Byte[] coords) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_byte_coordinates]
            /// Set the current texture coordinates
            /// </summary>
            /// <param name="coords">
            /// [length: 4]
            /// Specify s, t, r, and q  texture coordinates. Not all parameters are present in all forms of the command.
            /// </param>
            [AutoGenerated(Category = "OES_byte_coordinates", Version = "", EntryPoint = "glTexCoord4bvOES")]
            public static void TexCoord4([CountAttribute(Count = 4)] ref Byte coords) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_byte_coordinates]
            /// Set the current texture coordinates
            /// </summary>
            /// <param name="coords">
            /// [length: 4]
            /// Specify s, t, r, and q  texture coordinates. Not all parameters are present in all forms of the command.
            /// </param>
            [AutoGenerated(Category = "OES_byte_coordinates", Version = "", EntryPoint = "glTexCoord4bvOES")]
            public static unsafe void TexCoord4([CountAttribute(Count = 4)] Byte* coords) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_byte_coordinates]
            /// Set the current texture coordinates
            /// </summary>
            /// <param name="coords">
            /// [length: 4]
            /// Specify s, t, r, and q  texture coordinates. Not all parameters are present in all forms of the command.
            /// </param>
            [AutoGenerated(Category = "OES_byte_coordinates", Version = "", EntryPoint = "glTexCoord4bvOES")]
            public static void TexCoord4([CountAttribute(Count = 4)] SByte[] coords) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_byte_coordinates]
            /// Set the current texture coordinates
            /// </summary>
            /// <param name="coords">
            /// [length: 4]
            /// Specify s, t, r, and q  texture coordinates. Not all parameters are present in all forms of the command.
            /// </param>
            [AutoGenerated(Category = "OES_byte_coordinates", Version = "", EntryPoint = "glTexCoord4bvOES")]
            public static void TexCoord4([CountAttribute(Count = 4)] ref SByte coords) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_byte_coordinates]
            /// Set the current texture coordinates
            /// </summary>
            /// <param name="coords">
            /// [length: 4]
            /// Specify s, t, r, and q  texture coordinates. Not all parameters are present in all forms of the command.
            /// </param>
            [AutoGenerated(Category = "OES_byte_coordinates", Version = "", EntryPoint = "glTexCoord4bvOES")]
            public static unsafe void TexCoord4([CountAttribute(Count = 4)] SByte* coords) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="s">
            /// </param>
            /// <param name="t">
            /// </param>
            /// <param name="r">
            /// </param>
            /// <param name="q">
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glTexCoord4xOES")]
            public static void TexCoord4x(int s, int t, int r, int q) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="coords">
            /// [length: 4]
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glTexCoord4xvOES")]
            public static void TexCoord4x([CountAttribute(Count = 4)] int[] coords) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="coords">
            /// [length: 4]
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glTexCoord4xvOES")]
            public static void TexCoord4x([CountAttribute(Count = 4)] ref int coords) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="coords">
            /// [length: 4]
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glTexCoord4xvOES")]
            public static unsafe void TexCoord4x([CountAttribute(Count = 4)] int* coords) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="param">
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glTexEnvxOES")]
            public static void TexEnvx(OpenTK.Graphics.ES11.All target, OpenTK.Graphics.ES11.All pname, int param) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="param">
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glTexEnvxOES")]
            public static void TexEnvx(OpenTK.Graphics.ES11.TextureEnvTarget target, OpenTK.Graphics.ES11.TextureEnvParameter pname, int param) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glTexEnvxvOES")]
            public static void TexEnvx(OpenTK.Graphics.ES11.All target, OpenTK.Graphics.ES11.All pname, [CountAttribute(Computed = "pname")] int[] @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glTexEnvxvOES")]
            public static unsafe void TexEnvx(OpenTK.Graphics.ES11.All target, OpenTK.Graphics.ES11.All pname, [CountAttribute(Computed = "pname")] int* @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glTexEnvxvOES")]
            public static void TexEnvx(OpenTK.Graphics.ES11.TextureEnvTarget target, OpenTK.Graphics.ES11.TextureEnvParameter pname, [CountAttribute(Computed = "pname")] int[] @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glTexEnvxvOES")]
            public static unsafe void TexEnvx(OpenTK.Graphics.ES11.TextureEnvTarget target, OpenTK.Graphics.ES11.TextureEnvParameter pname, [CountAttribute(Computed = "pname")] int* @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_texture_cube_map]
            /// Control the generation of texture coordinates
            /// </summary>
            /// <param name="coord">
            /// Specifies a texture coordinate. Must be one of S, T, R, or Q.
            /// </param>
            /// <param name="pname">
            /// Specifies the symbolic name of the texture-coordinate generation function. Must be TextureGenMode.
            /// </param>
            /// <param name="param">
            /// Specifies a single-valued texture generation parameter, one of ObjectLinear, EyeLinear, SphereMap, NormalMap, or ReflectionMap.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "OES_texture_cube_map", Version = "", EntryPoint = "glTexGenfOES")]
            public static void TexGen(OpenTK.Graphics.ES11.All coord, OpenTK.Graphics.ES11.All pname, float param) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_texture_cube_map]
            /// Control the generation of texture coordinates
            /// </summary>
            /// <param name="coord">
            /// Specifies a texture coordinate. Must be one of S, T, R, or Q.
            /// </param>
            /// <param name="pname">
            /// Specifies the symbolic name of the texture-coordinate generation function. Must be TextureGenMode.
            /// </param>
            /// <param name="param">
            /// Specifies a single-valued texture generation parameter, one of ObjectLinear, EyeLinear, SphereMap, NormalMap, or ReflectionMap.
            /// </param>
            [AutoGenerated(Category = "OES_texture_cube_map", Version = "", EntryPoint = "glTexGenfOES")]
            public static void TexGen(OpenTK.Graphics.ES11.TextureCoordName coord, OpenTK.Graphics.ES11.TextureGenParameter pname, float param) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_texture_cube_map]
            /// Control the generation of texture coordinates
            /// </summary>
            /// <param name="coord">
            /// Specifies a texture coordinate. Must be one of S, T, R, or Q.
            /// </param>
            /// <param name="pname">
            /// Specifies the symbolic name of the texture-coordinate generation function. Must be TextureGenMode.
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// Specifies a single-valued texture generation parameter, one of ObjectLinear, EyeLinear, SphereMap, NormalMap, or ReflectionMap.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "OES_texture_cube_map", Version = "", EntryPoint = "glTexGenfvOES")]
            public static void TexGen(OpenTK.Graphics.ES11.All coord, OpenTK.Graphics.ES11.All pname, [CountAttribute(Computed = "pname")] float[] @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_texture_cube_map]
            /// Control the generation of texture coordinates
            /// </summary>
            /// <param name="coord">
            /// Specifies a texture coordinate. Must be one of S, T, R, or Q.
            /// </param>
            /// <param name="pname">
            /// Specifies the symbolic name of the texture-coordinate generation function. Must be TextureGenMode.
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// Specifies a single-valued texture generation parameter, one of ObjectLinear, EyeLinear, SphereMap, NormalMap, or ReflectionMap.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "OES_texture_cube_map", Version = "", EntryPoint = "glTexGenfvOES")]
            public static unsafe void TexGen(OpenTK.Graphics.ES11.All coord, OpenTK.Graphics.ES11.All pname, [CountAttribute(Computed = "pname")] float* @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_texture_cube_map]
            /// Control the generation of texture coordinates
            /// </summary>
            /// <param name="coord">
            /// Specifies a texture coordinate. Must be one of S, T, R, or Q.
            /// </param>
            /// <param name="pname">
            /// Specifies the symbolic name of the texture-coordinate generation function. Must be TextureGenMode.
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// Specifies a single-valued texture generation parameter, one of ObjectLinear, EyeLinear, SphereMap, NormalMap, or ReflectionMap.
            /// </param>
            [AutoGenerated(Category = "OES_texture_cube_map", Version = "", EntryPoint = "glTexGenfvOES")]
            public static void TexGen(OpenTK.Graphics.ES11.TextureCoordName coord, OpenTK.Graphics.ES11.TextureGenParameter pname, [CountAttribute(Computed = "pname")] float[] @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_texture_cube_map]
            /// Control the generation of texture coordinates
            /// </summary>
            /// <param name="coord">
            /// Specifies a texture coordinate. Must be one of S, T, R, or Q.
            /// </param>
            /// <param name="pname">
            /// Specifies the symbolic name of the texture-coordinate generation function. Must be TextureGenMode.
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// Specifies a single-valued texture generation parameter, one of ObjectLinear, EyeLinear, SphereMap, NormalMap, or ReflectionMap.
            /// </param>
            [AutoGenerated(Category = "OES_texture_cube_map", Version = "", EntryPoint = "glTexGenfvOES")]
            public static unsafe void TexGen(OpenTK.Graphics.ES11.TextureCoordName coord, OpenTK.Graphics.ES11.TextureGenParameter pname, [CountAttribute(Computed = "pname")] float* @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_texture_cube_map]
            /// Control the generation of texture coordinates
            /// </summary>
            /// <param name="coord">
            /// Specifies a texture coordinate. Must be one of S, T, R, or Q.
            /// </param>
            /// <param name="pname">
            /// Specifies the symbolic name of the texture-coordinate generation function. Must be TextureGenMode.
            /// </param>
            /// <param name="param">
            /// Specifies a single-valued texture generation parameter, one of ObjectLinear, EyeLinear, SphereMap, NormalMap, or ReflectionMap.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "OES_texture_cube_map", Version = "", EntryPoint = "glTexGeniOES")]
            public static void TexGen(OpenTK.Graphics.ES11.All coord, OpenTK.Graphics.ES11.All pname, int param) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_texture_cube_map]
            /// Control the generation of texture coordinates
            /// </summary>
            /// <param name="coord">
            /// Specifies a texture coordinate. Must be one of S, T, R, or Q.
            /// </param>
            /// <param name="pname">
            /// Specifies the symbolic name of the texture-coordinate generation function. Must be TextureGenMode.
            /// </param>
            /// <param name="param">
            /// Specifies a single-valued texture generation parameter, one of ObjectLinear, EyeLinear, SphereMap, NormalMap, or ReflectionMap.
            /// </param>
            [AutoGenerated(Category = "OES_texture_cube_map", Version = "", EntryPoint = "glTexGeniOES")]
            public static void TexGen(OpenTK.Graphics.ES11.TextureCoordName coord, OpenTK.Graphics.ES11.TextureGenParameter pname, int param) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_texture_cube_map]
            /// Control the generation of texture coordinates
            /// </summary>
            /// <param name="coord">
            /// Specifies a texture coordinate. Must be one of S, T, R, or Q.
            /// </param>
            /// <param name="pname">
            /// Specifies the symbolic name of the texture-coordinate generation function. Must be TextureGenMode.
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// Specifies a single-valued texture generation parameter, one of ObjectLinear, EyeLinear, SphereMap, NormalMap, or ReflectionMap.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "OES_texture_cube_map", Version = "", EntryPoint = "glTexGenivOES")]
            public static void TexGen(OpenTK.Graphics.ES11.All coord, OpenTK.Graphics.ES11.All pname, [CountAttribute(Computed = "pname")] int[] @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_texture_cube_map]
            /// Control the generation of texture coordinates
            /// </summary>
            /// <param name="coord">
            /// Specifies a texture coordinate. Must be one of S, T, R, or Q.
            /// </param>
            /// <param name="pname">
            /// Specifies the symbolic name of the texture-coordinate generation function. Must be TextureGenMode.
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// Specifies a single-valued texture generation parameter, one of ObjectLinear, EyeLinear, SphereMap, NormalMap, or ReflectionMap.
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "OES_texture_cube_map", Version = "", EntryPoint = "glTexGenivOES")]
            public static unsafe void TexGen(OpenTK.Graphics.ES11.All coord, OpenTK.Graphics.ES11.All pname, [CountAttribute(Computed = "pname")] int* @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_texture_cube_map]
            /// Control the generation of texture coordinates
            /// </summary>
            /// <param name="coord">
            /// Specifies a texture coordinate. Must be one of S, T, R, or Q.
            /// </param>
            /// <param name="pname">
            /// Specifies the symbolic name of the texture-coordinate generation function. Must be TextureGenMode.
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// Specifies a single-valued texture generation parameter, one of ObjectLinear, EyeLinear, SphereMap, NormalMap, or ReflectionMap.
            /// </param>
            [AutoGenerated(Category = "OES_texture_cube_map", Version = "", EntryPoint = "glTexGenivOES")]
            public static void TexGen(OpenTK.Graphics.ES11.TextureCoordName coord, OpenTK.Graphics.ES11.TextureGenParameter pname, [CountAttribute(Computed = "pname")] int[] @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_texture_cube_map]
            /// Control the generation of texture coordinates
            /// </summary>
            /// <param name="coord">
            /// Specifies a texture coordinate. Must be one of S, T, R, or Q.
            /// </param>
            /// <param name="pname">
            /// Specifies the symbolic name of the texture-coordinate generation function. Must be TextureGenMode.
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// Specifies a single-valued texture generation parameter, one of ObjectLinear, EyeLinear, SphereMap, NormalMap, or ReflectionMap.
            /// </param>
            [AutoGenerated(Category = "OES_texture_cube_map", Version = "", EntryPoint = "glTexGenivOES")]
            public static unsafe void TexGen(OpenTK.Graphics.ES11.TextureCoordName coord, OpenTK.Graphics.ES11.TextureGenParameter pname, [CountAttribute(Computed = "pname")] int* @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_fixed_point|OES_texture_cube_map]
            /// </summary>
            /// <param name="coord">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="param">
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "OES_fixed_point|OES_texture_cube_map", Version = "", EntryPoint = "glTexGenxOES")]
            public static void TexGenx(OpenTK.Graphics.ES11.All coord, OpenTK.Graphics.ES11.All pname, int param) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_fixed_point|OES_texture_cube_map]
            /// </summary>
            /// <param name="coord">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="param">
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point|OES_texture_cube_map", Version = "", EntryPoint = "glTexGenxOES")]
            public static void TexGenx(OpenTK.Graphics.ES11.TextureCoordName coord, OpenTK.Graphics.ES11.TextureGenParameter pname, int param) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_fixed_point|OES_texture_cube_map]
            /// </summary>
            /// <param name="coord">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "OES_fixed_point|OES_texture_cube_map", Version = "", EntryPoint = "glTexGenxvOES")]
            public static void TexGenx(OpenTK.Graphics.ES11.All coord, OpenTK.Graphics.ES11.All pname, [CountAttribute(Computed = "pname")] int[] @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_fixed_point|OES_texture_cube_map]
            /// </summary>
            /// <param name="coord">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "OES_fixed_point|OES_texture_cube_map", Version = "", EntryPoint = "glTexGenxvOES")]
            public static unsafe void TexGenx(OpenTK.Graphics.ES11.All coord, OpenTK.Graphics.ES11.All pname, [CountAttribute(Computed = "pname")] int* @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_fixed_point|OES_texture_cube_map]
            /// </summary>
            /// <param name="coord">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point|OES_texture_cube_map", Version = "", EntryPoint = "glTexGenxvOES")]
            public static void TexGenx(OpenTK.Graphics.ES11.TextureCoordName coord, OpenTK.Graphics.ES11.TextureGenParameter pname, [CountAttribute(Computed = "pname")] int[] @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_fixed_point|OES_texture_cube_map]
            /// </summary>
            /// <param name="coord">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point|OES_texture_cube_map", Version = "", EntryPoint = "glTexGenxvOES")]
            public static unsafe void TexGenx(OpenTK.Graphics.ES11.TextureCoordName coord, OpenTK.Graphics.ES11.TextureGenParameter pname, [CountAttribute(Computed = "pname")] int* @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="param">
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glTexParameterxOES")]
            public static void TexParameterx(OpenTK.Graphics.ES11.All target, OpenTK.Graphics.ES11.All pname, int param) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="param">
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glTexParameterxOES")]
            public static void TexParameterx(OpenTK.Graphics.ES11.TextureTarget target, OpenTK.Graphics.ES11.GetTextureParameter pname, int param) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glTexParameterxvOES")]
            public static void TexParameterx(OpenTK.Graphics.ES11.All target, OpenTK.Graphics.ES11.All pname, [CountAttribute(Computed = "pname")] int[] @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glTexParameterxvOES")]
            public static unsafe void TexParameterx(OpenTK.Graphics.ES11.All target, OpenTK.Graphics.ES11.All pname, [CountAttribute(Computed = "pname")] int* @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glTexParameterxvOES")]
            public static void TexParameterx(OpenTK.Graphics.ES11.TextureTarget target, OpenTK.Graphics.ES11.GetTextureParameter pname, [CountAttribute(Computed = "pname")] int[] @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glTexParameterxvOES")]
            public static unsafe void TexParameterx(OpenTK.Graphics.ES11.TextureTarget target, OpenTK.Graphics.ES11.GetTextureParameter pname, [CountAttribute(Computed = "pname")] int* @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="x">
            /// </param>
            /// <param name="y">
            /// </param>
            /// <param name="z">
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glTranslatexOES")]
            public static void Translatex(int x, int y, int z) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_mapbuffer]
            /// </summary>
            /// <param name="target">
            /// </param>
            [AutoGenerated(Category = "OES_mapbuffer", Version = "", EntryPoint = "glUnmapBufferOES")]
            public static bool UnmapBuffer(OpenTK.Graphics.ES11.All target) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_byte_coordinates]
            /// Specify a vertex
            /// </summary>
            /// <param name="x">
            /// Specify x, y, z, and w coordinates of a vertex. Not all parameters are present in all forms of the command.
            /// </param>
            /// <param name="y">
            /// Specify x, y, z, and w coordinates of a vertex. Not all parameters are present in all forms of the command.
            /// </param>
            [AutoGenerated(Category = "OES_byte_coordinates", Version = "", EntryPoint = "glVertex2bOES")]
            public static void Vertex2(Byte x, Byte y) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_byte_coordinates]
            /// Specify a vertex
            /// </summary>
            /// <param name="x">
            /// Specify x, y, z, and w coordinates of a vertex. Not all parameters are present in all forms of the command.
            /// </param>
            /// <param name="y">
            /// Specify x, y, z, and w coordinates of a vertex. Not all parameters are present in all forms of the command.
            /// </param>
            [AutoGenerated(Category = "OES_byte_coordinates", Version = "", EntryPoint = "glVertex2bOES")]
            public static void Vertex2(SByte x, SByte y) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_byte_coordinates]
            /// Specify a vertex
            /// </summary>
            /// <param name="coords">
            /// [length: 2]
            /// Specify x, y, z, and w coordinates of a vertex. Not all parameters are present in all forms of the command.
            /// </param>
            [AutoGenerated(Category = "OES_byte_coordinates", Version = "", EntryPoint = "glVertex2bvOES")]
            public static void Vertex2([CountAttribute(Count = 2)] Byte[] coords) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_byte_coordinates]
            /// Specify a vertex
            /// </summary>
            /// <param name="coords">
            /// [length: 2]
            /// Specify x, y, z, and w coordinates of a vertex. Not all parameters are present in all forms of the command.
            /// </param>
            [AutoGenerated(Category = "OES_byte_coordinates", Version = "", EntryPoint = "glVertex2bvOES")]
            public static void Vertex2([CountAttribute(Count = 2)] ref Byte coords) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_byte_coordinates]
            /// Specify a vertex
            /// </summary>
            /// <param name="coords">
            /// [length: 2]
            /// Specify x, y, z, and w coordinates of a vertex. Not all parameters are present in all forms of the command.
            /// </param>
            [AutoGenerated(Category = "OES_byte_coordinates", Version = "", EntryPoint = "glVertex2bvOES")]
            public static unsafe void Vertex2([CountAttribute(Count = 2)] Byte* coords) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_byte_coordinates]
            /// Specify a vertex
            /// </summary>
            /// <param name="coords">
            /// [length: 2]
            /// Specify x, y, z, and w coordinates of a vertex. Not all parameters are present in all forms of the command.
            /// </param>
            [AutoGenerated(Category = "OES_byte_coordinates", Version = "", EntryPoint = "glVertex2bvOES")]
            public static void Vertex2([CountAttribute(Count = 2)] SByte[] coords) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_byte_coordinates]
            /// Specify a vertex
            /// </summary>
            /// <param name="coords">
            /// [length: 2]
            /// Specify x, y, z, and w coordinates of a vertex. Not all parameters are present in all forms of the command.
            /// </param>
            [AutoGenerated(Category = "OES_byte_coordinates", Version = "", EntryPoint = "glVertex2bvOES")]
            public static void Vertex2([CountAttribute(Count = 2)] ref SByte coords) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_byte_coordinates]
            /// Specify a vertex
            /// </summary>
            /// <param name="coords">
            /// [length: 2]
            /// Specify x, y, z, and w coordinates of a vertex. Not all parameters are present in all forms of the command.
            /// </param>
            [AutoGenerated(Category = "OES_byte_coordinates", Version = "", EntryPoint = "glVertex2bvOES")]
            public static unsafe void Vertex2([CountAttribute(Count = 2)] SByte* coords) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="x">
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glVertex2xOES")]
            public static void Vertex2x(int x) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="coords">
            /// [length: 2]
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glVertex2xvOES")]
            public static void Vertex2x([CountAttribute(Count = 2)] int[] coords) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="coords">
            /// [length: 2]
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glVertex2xvOES")]
            public static unsafe void Vertex2x([CountAttribute(Count = 2)] int* coords) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_byte_coordinates]
            /// Specify a vertex
            /// </summary>
            /// <param name="x">
            /// Specify x, y, z, and w coordinates of a vertex. Not all parameters are present in all forms of the command.
            /// </param>
            /// <param name="y">
            /// Specify x, y, z, and w coordinates of a vertex. Not all parameters are present in all forms of the command.
            /// </param>
            /// <param name="z">
            /// Specify x, y, z, and w coordinates of a vertex. Not all parameters are present in all forms of the command.
            /// </param>
            [AutoGenerated(Category = "OES_byte_coordinates", Version = "", EntryPoint = "glVertex3bOES")]
            public static void Vertex3(Byte x, Byte y, Byte z) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_byte_coordinates]
            /// Specify a vertex
            /// </summary>
            /// <param name="x">
            /// Specify x, y, z, and w coordinates of a vertex. Not all parameters are present in all forms of the command.
            /// </param>
            /// <param name="y">
            /// Specify x, y, z, and w coordinates of a vertex. Not all parameters are present in all forms of the command.
            /// </param>
            /// <param name="z">
            /// Specify x, y, z, and w coordinates of a vertex. Not all parameters are present in all forms of the command.
            /// </param>
            [AutoGenerated(Category = "OES_byte_coordinates", Version = "", EntryPoint = "glVertex3bOES")]
            public static void Vertex3(SByte x, SByte y, SByte z) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_byte_coordinates]
            /// Specify a vertex
            /// </summary>
            /// <param name="coords">
            /// [length: 3]
            /// Specify x, y, z, and w coordinates of a vertex. Not all parameters are present in all forms of the command.
            /// </param>
            [AutoGenerated(Category = "OES_byte_coordinates", Version = "", EntryPoint = "glVertex3bvOES")]
            public static void Vertex3([CountAttribute(Count = 3)] Byte[] coords) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_byte_coordinates]
            /// Specify a vertex
            /// </summary>
            /// <param name="coords">
            /// [length: 3]
            /// Specify x, y, z, and w coordinates of a vertex. Not all parameters are present in all forms of the command.
            /// </param>
            [AutoGenerated(Category = "OES_byte_coordinates", Version = "", EntryPoint = "glVertex3bvOES")]
            public static void Vertex3([CountAttribute(Count = 3)] ref Byte coords) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_byte_coordinates]
            /// Specify a vertex
            /// </summary>
            /// <param name="coords">
            /// [length: 3]
            /// Specify x, y, z, and w coordinates of a vertex. Not all parameters are present in all forms of the command.
            /// </param>
            [AutoGenerated(Category = "OES_byte_coordinates", Version = "", EntryPoint = "glVertex3bvOES")]
            public static unsafe void Vertex3([CountAttribute(Count = 3)] Byte* coords) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_byte_coordinates]
            /// Specify a vertex
            /// </summary>
            /// <param name="coords">
            /// [length: 3]
            /// Specify x, y, z, and w coordinates of a vertex. Not all parameters are present in all forms of the command.
            /// </param>
            [AutoGenerated(Category = "OES_byte_coordinates", Version = "", EntryPoint = "glVertex3bvOES")]
            public static void Vertex3([CountAttribute(Count = 3)] SByte[] coords) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_byte_coordinates]
            /// Specify a vertex
            /// </summary>
            /// <param name="coords">
            /// [length: 3]
            /// Specify x, y, z, and w coordinates of a vertex. Not all parameters are present in all forms of the command.
            /// </param>
            [AutoGenerated(Category = "OES_byte_coordinates", Version = "", EntryPoint = "glVertex3bvOES")]
            public static void Vertex3([CountAttribute(Count = 3)] ref SByte coords) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_byte_coordinates]
            /// Specify a vertex
            /// </summary>
            /// <param name="coords">
            /// [length: 3]
            /// Specify x, y, z, and w coordinates of a vertex. Not all parameters are present in all forms of the command.
            /// </param>
            [AutoGenerated(Category = "OES_byte_coordinates", Version = "", EntryPoint = "glVertex3bvOES")]
            public static unsafe void Vertex3([CountAttribute(Count = 3)] SByte* coords) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="x">
            /// </param>
            /// <param name="y">
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glVertex3xOES")]
            public static void Vertex3x(int x, int y) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="coords">
            /// [length: 3]
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glVertex3xvOES")]
            public static void Vertex3x([CountAttribute(Count = 3)] int[] coords) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="coords">
            /// [length: 3]
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glVertex3xvOES")]
            public static void Vertex3x([CountAttribute(Count = 3)] ref int coords) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="coords">
            /// [length: 3]
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glVertex3xvOES")]
            public static unsafe void Vertex3x([CountAttribute(Count = 3)] int* coords) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_byte_coordinates]
            /// Specify a vertex
            /// </summary>
            /// <param name="x">
            /// Specify x, y, z, and w coordinates of a vertex. Not all parameters are present in all forms of the command.
            /// </param>
            /// <param name="y">
            /// Specify x, y, z, and w coordinates of a vertex. Not all parameters are present in all forms of the command.
            /// </param>
            /// <param name="z">
            /// Specify x, y, z, and w coordinates of a vertex. Not all parameters are present in all forms of the command.
            /// </param>
            /// <param name="w">
            /// Specify x, y, z, and w coordinates of a vertex. Not all parameters are present in all forms of the command.
            /// </param>
            [AutoGenerated(Category = "OES_byte_coordinates", Version = "", EntryPoint = "glVertex4bOES")]
            public static void Vertex4(Byte x, Byte y, Byte z, Byte w) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_byte_coordinates]
            /// Specify a vertex
            /// </summary>
            /// <param name="x">
            /// Specify x, y, z, and w coordinates of a vertex. Not all parameters are present in all forms of the command.
            /// </param>
            /// <param name="y">
            /// Specify x, y, z, and w coordinates of a vertex. Not all parameters are present in all forms of the command.
            /// </param>
            /// <param name="z">
            /// Specify x, y, z, and w coordinates of a vertex. Not all parameters are present in all forms of the command.
            /// </param>
            /// <param name="w">
            /// Specify x, y, z, and w coordinates of a vertex. Not all parameters are present in all forms of the command.
            /// </param>
            [AutoGenerated(Category = "OES_byte_coordinates", Version = "", EntryPoint = "glVertex4bOES")]
            public static void Vertex4(SByte x, SByte y, SByte z, SByte w) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_byte_coordinates]
            /// Specify a vertex
            /// </summary>
            /// <param name="coords">
            /// [length: 4]
            /// Specify x, y, z, and w coordinates of a vertex. Not all parameters are present in all forms of the command.
            /// </param>
            [AutoGenerated(Category = "OES_byte_coordinates", Version = "", EntryPoint = "glVertex4bvOES")]
            public static void Vertex4([CountAttribute(Count = 4)] Byte[] coords) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_byte_coordinates]
            /// Specify a vertex
            /// </summary>
            /// <param name="coords">
            /// [length: 4]
            /// Specify x, y, z, and w coordinates of a vertex. Not all parameters are present in all forms of the command.
            /// </param>
            [AutoGenerated(Category = "OES_byte_coordinates", Version = "", EntryPoint = "glVertex4bvOES")]
            public static void Vertex4([CountAttribute(Count = 4)] ref Byte coords) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_byte_coordinates]
            /// Specify a vertex
            /// </summary>
            /// <param name="coords">
            /// [length: 4]
            /// Specify x, y, z, and w coordinates of a vertex. Not all parameters are present in all forms of the command.
            /// </param>
            [AutoGenerated(Category = "OES_byte_coordinates", Version = "", EntryPoint = "glVertex4bvOES")]
            public static unsafe void Vertex4([CountAttribute(Count = 4)] Byte* coords) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_byte_coordinates]
            /// Specify a vertex
            /// </summary>
            /// <param name="coords">
            /// [length: 4]
            /// Specify x, y, z, and w coordinates of a vertex. Not all parameters are present in all forms of the command.
            /// </param>
            [AutoGenerated(Category = "OES_byte_coordinates", Version = "", EntryPoint = "glVertex4bvOES")]
            public static void Vertex4([CountAttribute(Count = 4)] SByte[] coords) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_byte_coordinates]
            /// Specify a vertex
            /// </summary>
            /// <param name="coords">
            /// [length: 4]
            /// Specify x, y, z, and w coordinates of a vertex. Not all parameters are present in all forms of the command.
            /// </param>
            [AutoGenerated(Category = "OES_byte_coordinates", Version = "", EntryPoint = "glVertex4bvOES")]
            public static void Vertex4([CountAttribute(Count = 4)] ref SByte coords) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_byte_coordinates]
            /// Specify a vertex
            /// </summary>
            /// <param name="coords">
            /// [length: 4]
            /// Specify x, y, z, and w coordinates of a vertex. Not all parameters are present in all forms of the command.
            /// </param>
            [AutoGenerated(Category = "OES_byte_coordinates", Version = "", EntryPoint = "glVertex4bvOES")]
            public static unsafe void Vertex4([CountAttribute(Count = 4)] SByte* coords) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="x">
            /// </param>
            /// <param name="y">
            /// </param>
            /// <param name="z">
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glVertex4xOES")]
            public static void Vertex4x(int x, int y, int z) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="coords">
            /// [length: 4]
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glVertex4xvOES")]
            public static void Vertex4x([CountAttribute(Count = 4)] int[] coords) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="coords">
            /// [length: 4]
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glVertex4xvOES")]
            public static void Vertex4x([CountAttribute(Count = 4)] ref int coords) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="coords">
            /// [length: 4]
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glVertex4xvOES")]
            public static unsafe void Vertex4x([CountAttribute(Count = 4)] int* coords) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_matrix_palette]
            /// </summary>
            /// <param name="size">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="stride">
            /// </param>
            /// <param name="pointer">
            /// [length: COMPSIZE(type,stride)]
            /// </param>
            [AutoGenerated(Category = "OES_matrix_palette", Version = "", EntryPoint = "glWeightPointerOES")]
            public static void WeightPointer(int size, OpenTK.Graphics.ES11.All type, int stride, [CountAttribute(Computed = "type,stride")] IntPtr pointer) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_matrix_palette]
            /// </summary>
            /// <param name="size">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="stride">
            /// </param>
            /// <param name="pointer">
            /// [length: COMPSIZE(type,stride)]
            /// </param>
            [AutoGenerated(Category = "OES_matrix_palette", Version = "", EntryPoint = "glWeightPointerOES")]
            public static void WeightPointer<T3>(int size, OpenTK.Graphics.ES11.All type, int stride, [InAttribute, OutAttribute, CountAttribute(Computed = "type,stride")] T3[] pointer)
                where T3 : struct
             { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_matrix_palette]
            /// </summary>
            /// <param name="size">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="stride">
            /// </param>
            /// <param name="pointer">
            /// [length: COMPSIZE(type,stride)]
            /// </param>
            [AutoGenerated(Category = "OES_matrix_palette", Version = "", EntryPoint = "glWeightPointerOES")]
            public static void WeightPointer<T3>(int size, OpenTK.Graphics.ES11.All type, int stride, [InAttribute, OutAttribute, CountAttribute(Computed = "type,stride")] T3[,] pointer)
                where T3 : struct
             { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_matrix_palette]
            /// </summary>
            /// <param name="size">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="stride">
            /// </param>
            /// <param name="pointer">
            /// [length: COMPSIZE(type,stride)]
            /// </param>
            [AutoGenerated(Category = "OES_matrix_palette", Version = "", EntryPoint = "glWeightPointerOES")]
            public static void WeightPointer<T3>(int size, OpenTK.Graphics.ES11.All type, int stride, [InAttribute, OutAttribute, CountAttribute(Computed = "type,stride")] T3[,,] pointer)
                where T3 : struct
             { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: OES_matrix_palette]
            /// </summary>
            /// <param name="size">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="stride">
            /// </param>
            /// <param name="pointer">
            /// [length: COMPSIZE(type,stride)]
            /// </param>
            [AutoGenerated(Category = "OES_matrix_palette", Version = "", EntryPoint = "glWeightPointerOES")]
            public static void WeightPointer<T3>(int size, OpenTK.Graphics.ES11.All type, int stride, [InAttribute, OutAttribute, CountAttribute(Computed = "type,stride")] ref T3 pointer)
                where T3 : struct
             { throw new BindingsNotRewrittenException(); }

        }

        public static partial class Qcom
        {
            /// <summary>
            /// [requires: QCOM_driver_control]
            /// </summary>
            /// <param name="driverControl">
            /// </param>
            [AutoGenerated(Category = "QCOM_driver_control", Version = "", EntryPoint = "glDisableDriverControlQCOM")]
            public static void DisableDriverControl(int driverControl) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: QCOM_driver_control]
            /// </summary>
            /// <param name="driverControl">
            /// </param>
            [AutoGenerated(Category = "QCOM_driver_control", Version = "", EntryPoint = "glDisableDriverControlQCOM")]
            public static void DisableDriverControl(uint driverControl) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: QCOM_driver_control]
            /// </summary>
            /// <param name="driverControl">
            /// </param>
            [AutoGenerated(Category = "QCOM_driver_control", Version = "", EntryPoint = "glEnableDriverControlQCOM")]
            public static void EnableDriverControl(int driverControl) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: QCOM_driver_control]
            /// </summary>
            /// <param name="driverControl">
            /// </param>
            [AutoGenerated(Category = "QCOM_driver_control", Version = "", EntryPoint = "glEnableDriverControlQCOM")]
            public static void EnableDriverControl(uint driverControl) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: QCOM_tiled_rendering]
            /// </summary>
            /// <param name="preserveMask">
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "QCOM_tiled_rendering", Version = "", EntryPoint = "glEndTilingQCOM")]
            public static void EndTiling(OpenTK.Graphics.ES11.All preserveMask) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: QCOM_tiled_rendering]
            /// </summary>
            /// <param name="preserveMask">
            /// </param>
            [AutoGenerated(Category = "QCOM_tiled_rendering", Version = "", EntryPoint = "glEndTilingQCOM")]
            public static void EndTiling(OpenTK.Graphics.ES11.BufferBitQcom preserveMask) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: QCOM_extended_get]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="@params">
            /// </param>
            [AutoGenerated(Category = "QCOM_extended_get", Version = "", EntryPoint = "glExtGetBufferPointervQCOM")]
            public static void ExtGetBufferPointer(OpenTK.Graphics.ES11.All target, [OutAttribute] IntPtr @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: QCOM_extended_get]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="@params">
            /// </param>
            [AutoGenerated(Category = "QCOM_extended_get", Version = "", EntryPoint = "glExtGetBufferPointervQCOM")]
            public static void ExtGetBufferPointer<T1>(OpenTK.Graphics.ES11.All target, [InAttribute, OutAttribute] T1[] @params)
                where T1 : struct
             { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: QCOM_extended_get]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="@params">
            /// </param>
            [AutoGenerated(Category = "QCOM_extended_get", Version = "", EntryPoint = "glExtGetBufferPointervQCOM")]
            public static void ExtGetBufferPointer<T1>(OpenTK.Graphics.ES11.All target, [InAttribute, OutAttribute] T1[,] @params)
                where T1 : struct
             { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: QCOM_extended_get]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="@params">
            /// </param>
            [AutoGenerated(Category = "QCOM_extended_get", Version = "", EntryPoint = "glExtGetBufferPointervQCOM")]
            public static void ExtGetBufferPointer<T1>(OpenTK.Graphics.ES11.All target, [InAttribute, OutAttribute] T1[,,] @params)
                where T1 : struct
             { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: QCOM_extended_get]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="@params">
            /// </param>
            [AutoGenerated(Category = "QCOM_extended_get", Version = "", EntryPoint = "glExtGetBufferPointervQCOM")]
            public static void ExtGetBufferPointer<T1>(OpenTK.Graphics.ES11.All target, [InAttribute, OutAttribute] ref T1 @params)
                where T1 : struct
             { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: QCOM_extended_get]
            /// </summary>
            /// <param name="buffers">
            /// [length: maxBuffers]
            /// </param>
            /// <param name="maxBuffers">
            /// </param>
            /// <param name="numBuffers">
            /// [length: 1]
            /// </param>
            [AutoGenerated(Category = "QCOM_extended_get", Version = "", EntryPoint = "glExtGetBuffersQCOM")]
            public static void ExtGetBuffers([OutAttribute, CountAttribute(Parameter = "maxBuffers")] int[] buffers, int maxBuffers, [OutAttribute, CountAttribute(Count = 1)] out int numBuffers) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: QCOM_extended_get]
            /// </summary>
            /// <param name="buffers">
            /// [length: maxBuffers]
            /// </param>
            /// <param name="maxBuffers">
            /// </param>
            /// <param name="numBuffers">
            /// [length: 1]
            /// </param>
            [AutoGenerated(Category = "QCOM_extended_get", Version = "", EntryPoint = "glExtGetBuffersQCOM")]
            public static void ExtGetBuffers([OutAttribute, CountAttribute(Parameter = "maxBuffers")] out int buffers, int maxBuffers, [OutAttribute, CountAttribute(Count = 1)] out int numBuffers) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: QCOM_extended_get]
            /// </summary>
            /// <param name="buffers">
            /// [length: maxBuffers]
            /// </param>
            /// <param name="maxBuffers">
            /// </param>
            /// <param name="numBuffers">
            /// [length: 1]
            /// </param>
            [Obsolete("Use out overload instead")]
            [AutoGenerated(Category = "QCOM_extended_get", Version = "", EntryPoint = "glExtGetBuffersQCOM")]
            public static unsafe void ExtGetBuffers([OutAttribute, CountAttribute(Parameter = "maxBuffers")] int* buffers, int maxBuffers, [OutAttribute, CountAttribute(Count = 1)] int[] numBuffers) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: QCOM_extended_get]
            /// </summary>
            /// <param name="buffers">
            /// [length: maxBuffers]
            /// </param>
            /// <param name="maxBuffers">
            /// </param>
            /// <param name="numBuffers">
            /// [length: 1]
            /// </param>
            [AutoGenerated(Category = "QCOM_extended_get", Version = "", EntryPoint = "glExtGetBuffersQCOM")]
            public static unsafe void ExtGetBuffers([OutAttribute, CountAttribute(Parameter = "maxBuffers")] int* buffers, int maxBuffers, [OutAttribute, CountAttribute(Count = 1)] int* numBuffers) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: QCOM_extended_get]
            /// </summary>
            /// <param name="buffers">
            /// [length: maxBuffers]
            /// </param>
            /// <param name="maxBuffers">
            /// </param>
            /// <param name="numBuffers">
            /// [length: 1]
            /// </param>
            [AutoGenerated(Category = "QCOM_extended_get", Version = "", EntryPoint = "glExtGetBuffersQCOM")]
            public static void ExtGetBuffers([OutAttribute, CountAttribute(Parameter = "maxBuffers")] uint[] buffers, int maxBuffers, [OutAttribute, CountAttribute(Count = 1)] out int numBuffers) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: QCOM_extended_get]
            /// </summary>
            /// <param name="buffers">
            /// [length: maxBuffers]
            /// </param>
            /// <param name="maxBuffers">
            /// </param>
            /// <param name="numBuffers">
            /// [length: 1]
            /// </param>
            [AutoGenerated(Category = "QCOM_extended_get", Version = "", EntryPoint = "glExtGetBuffersQCOM")]
            public static void ExtGetBuffers([OutAttribute, CountAttribute(Parameter = "maxBuffers")] out uint buffers, int maxBuffers, [OutAttribute, CountAttribute(Count = 1)] out int numBuffers) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: QCOM_extended_get]
            /// </summary>
            /// <param name="buffers">
            /// [length: maxBuffers]
            /// </param>
            /// <param name="maxBuffers">
            /// </param>
            /// <param name="numBuffers">
            /// [length: 1]
            /// </param>
            [Obsolete("Use out overload instead")]
            [AutoGenerated(Category = "QCOM_extended_get", Version = "", EntryPoint = "glExtGetBuffersQCOM")]
            public static unsafe void ExtGetBuffers([OutAttribute, CountAttribute(Parameter = "maxBuffers")] uint* buffers, int maxBuffers, [OutAttribute, CountAttribute(Count = 1)] int[] numBuffers) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: QCOM_extended_get]
            /// </summary>
            /// <param name="buffers">
            /// [length: maxBuffers]
            /// </param>
            /// <param name="maxBuffers">
            /// </param>
            /// <param name="numBuffers">
            /// [length: 1]
            /// </param>
            [AutoGenerated(Category = "QCOM_extended_get", Version = "", EntryPoint = "glExtGetBuffersQCOM")]
            public static unsafe void ExtGetBuffers([OutAttribute, CountAttribute(Parameter = "maxBuffers")] uint* buffers, int maxBuffers, [OutAttribute, CountAttribute(Count = 1)] int* numBuffers) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: QCOM_extended_get]
            /// </summary>
            /// <param name="framebuffers">
            /// [length: maxFramebuffers]
            /// </param>
            /// <param name="maxFramebuffers">
            /// </param>
            /// <param name="numFramebuffers">
            /// [length: 1]
            /// </param>
            [AutoGenerated(Category = "QCOM_extended_get", Version = "", EntryPoint = "glExtGetFramebuffersQCOM")]
            public static void ExtGetFramebuffers([OutAttribute, CountAttribute(Parameter = "maxFramebuffers")] int[] framebuffers, int maxFramebuffers, [OutAttribute, CountAttribute(Count = 1)] out int numFramebuffers) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: QCOM_extended_get]
            /// </summary>
            /// <param name="framebuffers">
            /// [length: maxFramebuffers]
            /// </param>
            /// <param name="maxFramebuffers">
            /// </param>
            /// <param name="numFramebuffers">
            /// [length: 1]
            /// </param>
            [AutoGenerated(Category = "QCOM_extended_get", Version = "", EntryPoint = "glExtGetFramebuffersQCOM")]
            public static void ExtGetFramebuffers([OutAttribute, CountAttribute(Parameter = "maxFramebuffers")] out int framebuffers, int maxFramebuffers, [OutAttribute, CountAttribute(Count = 1)] out int numFramebuffers) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: QCOM_extended_get]
            /// </summary>
            /// <param name="framebuffers">
            /// [length: maxFramebuffers]
            /// </param>
            /// <param name="maxFramebuffers">
            /// </param>
            /// <param name="numFramebuffers">
            /// [length: 1]
            /// </param>
            [Obsolete("Use out overload instead")]
            [AutoGenerated(Category = "QCOM_extended_get", Version = "", EntryPoint = "glExtGetFramebuffersQCOM")]
            public static unsafe void ExtGetFramebuffers([OutAttribute, CountAttribute(Parameter = "maxFramebuffers")] int* framebuffers, int maxFramebuffers, [OutAttribute, CountAttribute(Count = 1)] int[] numFramebuffers) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: QCOM_extended_get]
            /// </summary>
            /// <param name="framebuffers">
            /// [length: maxFramebuffers]
            /// </param>
            /// <param name="maxFramebuffers">
            /// </param>
            /// <param name="numFramebuffers">
            /// [length: 1]
            /// </param>
            [AutoGenerated(Category = "QCOM_extended_get", Version = "", EntryPoint = "glExtGetFramebuffersQCOM")]
            public static unsafe void ExtGetFramebuffers([OutAttribute, CountAttribute(Parameter = "maxFramebuffers")] int* framebuffers, int maxFramebuffers, [OutAttribute, CountAttribute(Count = 1)] int* numFramebuffers) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: QCOM_extended_get]
            /// </summary>
            /// <param name="framebuffers">
            /// [length: maxFramebuffers]
            /// </param>
            /// <param name="maxFramebuffers">
            /// </param>
            /// <param name="numFramebuffers">
            /// [length: 1]
            /// </param>
            [AutoGenerated(Category = "QCOM_extended_get", Version = "", EntryPoint = "glExtGetFramebuffersQCOM")]
            public static void ExtGetFramebuffers([OutAttribute, CountAttribute(Parameter = "maxFramebuffers")] uint[] framebuffers, int maxFramebuffers, [OutAttribute, CountAttribute(Count = 1)] out int numFramebuffers) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: QCOM_extended_get]
            /// </summary>
            /// <param name="framebuffers">
            /// [length: maxFramebuffers]
            /// </param>
            /// <param name="maxFramebuffers">
            /// </param>
            /// <param name="numFramebuffers">
            /// [length: 1]
            /// </param>
            [AutoGenerated(Category = "QCOM_extended_get", Version = "", EntryPoint = "glExtGetFramebuffersQCOM")]
            public static void ExtGetFramebuffers([OutAttribute, CountAttribute(Parameter = "maxFramebuffers")] out uint framebuffers, int maxFramebuffers, [OutAttribute, CountAttribute(Count = 1)] out int numFramebuffers) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: QCOM_extended_get]
            /// </summary>
            /// <param name="framebuffers">
            /// [length: maxFramebuffers]
            /// </param>
            /// <param name="maxFramebuffers">
            /// </param>
            /// <param name="numFramebuffers">
            /// [length: 1]
            /// </param>
            [Obsolete("Use out overload instead")]
            [AutoGenerated(Category = "QCOM_extended_get", Version = "", EntryPoint = "glExtGetFramebuffersQCOM")]
            public static unsafe void ExtGetFramebuffers([OutAttribute, CountAttribute(Parameter = "maxFramebuffers")] uint* framebuffers, int maxFramebuffers, [OutAttribute, CountAttribute(Count = 1)] int[] numFramebuffers) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: QCOM_extended_get]
            /// </summary>
            /// <param name="framebuffers">
            /// [length: maxFramebuffers]
            /// </param>
            /// <param name="maxFramebuffers">
            /// </param>
            /// <param name="numFramebuffers">
            /// [length: 1]
            /// </param>
            [AutoGenerated(Category = "QCOM_extended_get", Version = "", EntryPoint = "glExtGetFramebuffersQCOM")]
            public static unsafe void ExtGetFramebuffers([OutAttribute, CountAttribute(Parameter = "maxFramebuffers")] uint* framebuffers, int maxFramebuffers, [OutAttribute, CountAttribute(Count = 1)] int* numFramebuffers) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: QCOM_extended_get2]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="shadertype">
            /// </param>
            /// <param name="source">
            /// [length: *length]
            /// </param>
            /// <param name="length">
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "QCOM_extended_get2", Version = "", EntryPoint = "glExtGetProgramBinarySourceQCOM")]
            public static void ExtGetProgramBinarySource(int program, OpenTK.Graphics.ES11.All shadertype, [OutAttribute, CountAttribute(Parameter = "*length")] out String source, [OutAttribute] int[] length) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: QCOM_extended_get2]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="shadertype">
            /// </param>
            /// <param name="source">
            /// [length: *length]
            /// </param>
            /// <param name="length">
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "QCOM_extended_get2", Version = "", EntryPoint = "glExtGetProgramBinarySourceQCOM")]
            public static void ExtGetProgramBinarySource(int program, OpenTK.Graphics.ES11.All shadertype, [OutAttribute, CountAttribute(Parameter = "*length")] out String source, [OutAttribute] out int length) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: QCOM_extended_get2]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="shadertype">
            /// </param>
            /// <param name="source">
            /// [length: *length]
            /// </param>
            /// <param name="length">
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "QCOM_extended_get2", Version = "", EntryPoint = "glExtGetProgramBinarySourceQCOM")]
            public static unsafe void ExtGetProgramBinarySource(int program, OpenTK.Graphics.ES11.All shadertype, [OutAttribute, CountAttribute(Parameter = "*length")] out String source, [OutAttribute] int* length) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: QCOM_extended_get2]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="shadertype">
            /// </param>
            /// <param name="source">
            /// [length: *length]
            /// </param>
            /// <param name="length">
            /// </param>
            [AutoGenerated(Category = "QCOM_extended_get2", Version = "", EntryPoint = "glExtGetProgramBinarySourceQCOM")]
            public static void ExtGetProgramBinarySource(int program, OpenTK.Graphics.ES11.ShaderType shadertype, [OutAttribute, CountAttribute(Parameter = "*length")] out String source, [OutAttribute] int[] length) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: QCOM_extended_get2]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="shadertype">
            /// </param>
            /// <param name="source">
            /// [length: *length]
            /// </param>
            /// <param name="length">
            /// </param>
            [AutoGenerated(Category = "QCOM_extended_get2", Version = "", EntryPoint = "glExtGetProgramBinarySourceQCOM")]
            public static void ExtGetProgramBinarySource(int program, OpenTK.Graphics.ES11.ShaderType shadertype, [OutAttribute, CountAttribute(Parameter = "*length")] out String source, [OutAttribute] out int length) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: QCOM_extended_get2]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="shadertype">
            /// </param>
            /// <param name="source">
            /// [length: *length]
            /// </param>
            /// <param name="length">
            /// </param>
            [AutoGenerated(Category = "QCOM_extended_get2", Version = "", EntryPoint = "glExtGetProgramBinarySourceQCOM")]
            public static unsafe void ExtGetProgramBinarySource(int program, OpenTK.Graphics.ES11.ShaderType shadertype, [OutAttribute, CountAttribute(Parameter = "*length")] out String source, [OutAttribute] int* length) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: QCOM_extended_get2]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="shadertype">
            /// </param>
            /// <param name="source">
            /// [length: *length]
            /// </param>
            /// <param name="length">
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "QCOM_extended_get2", Version = "", EntryPoint = "glExtGetProgramBinarySourceQCOM")]
            public static void ExtGetProgramBinarySource(uint program, OpenTK.Graphics.ES11.All shadertype, [OutAttribute, CountAttribute(Parameter = "*length")] out String source, [OutAttribute] int[] length) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: QCOM_extended_get2]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="shadertype">
            /// </param>
            /// <param name="source">
            /// [length: *length]
            /// </param>
            /// <param name="length">
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "QCOM_extended_get2", Version = "", EntryPoint = "glExtGetProgramBinarySourceQCOM")]
            public static void ExtGetProgramBinarySource(uint program, OpenTK.Graphics.ES11.All shadertype, [OutAttribute, CountAttribute(Parameter = "*length")] out String source, [OutAttribute] out int length) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: QCOM_extended_get2]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="shadertype">
            /// </param>
            /// <param name="source">
            /// [length: *length]
            /// </param>
            /// <param name="length">
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "QCOM_extended_get2", Version = "", EntryPoint = "glExtGetProgramBinarySourceQCOM")]
            public static unsafe void ExtGetProgramBinarySource(uint program, OpenTK.Graphics.ES11.All shadertype, [OutAttribute, CountAttribute(Parameter = "*length")] out String source, [OutAttribute] int* length) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: QCOM_extended_get2]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="shadertype">
            /// </param>
            /// <param name="source">
            /// [length: *length]
            /// </param>
            /// <param name="length">
            /// </param>
            [AutoGenerated(Category = "QCOM_extended_get2", Version = "", EntryPoint = "glExtGetProgramBinarySourceQCOM")]
            public static void ExtGetProgramBinarySource(uint program, OpenTK.Graphics.ES11.ShaderType shadertype, [OutAttribute, CountAttribute(Parameter = "*length")] out String source, [OutAttribute] int[] length) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: QCOM_extended_get2]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="shadertype">
            /// </param>
            /// <param name="source">
            /// [length: *length]
            /// </param>
            /// <param name="length">
            /// </param>
            [AutoGenerated(Category = "QCOM_extended_get2", Version = "", EntryPoint = "glExtGetProgramBinarySourceQCOM")]
            public static void ExtGetProgramBinarySource(uint program, OpenTK.Graphics.ES11.ShaderType shadertype, [OutAttribute, CountAttribute(Parameter = "*length")] out String source, [OutAttribute] out int length) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: QCOM_extended_get2]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="shadertype">
            /// </param>
            /// <param name="source">
            /// [length: *length]
            /// </param>
            /// <param name="length">
            /// </param>
            [AutoGenerated(Category = "QCOM_extended_get2", Version = "", EntryPoint = "glExtGetProgramBinarySourceQCOM")]
            public static unsafe void ExtGetProgramBinarySource(uint program, OpenTK.Graphics.ES11.ShaderType shadertype, [OutAttribute, CountAttribute(Parameter = "*length")] out String source, [OutAttribute] int* length) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: QCOM_extended_get2]
            /// </summary>
            /// <param name="programs">
            /// [length: maxPrograms]
            /// </param>
            /// <param name="maxPrograms">
            /// </param>
            /// <param name="numPrograms">
            /// [length: 1]
            /// </param>
            [AutoGenerated(Category = "QCOM_extended_get2", Version = "", EntryPoint = "glExtGetProgramsQCOM")]
            public static void ExtGetProgram([OutAttribute, CountAttribute(Parameter = "maxPrograms")] int[] programs, int maxPrograms, [OutAttribute, CountAttribute(Count = 1)] out int numPrograms) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: QCOM_extended_get2]
            /// </summary>
            /// <param name="programs">
            /// [length: maxPrograms]
            /// </param>
            /// <param name="maxPrograms">
            /// </param>
            /// <param name="numPrograms">
            /// [length: 1]
            /// </param>
            [AutoGenerated(Category = "QCOM_extended_get2", Version = "", EntryPoint = "glExtGetProgramsQCOM")]
            public static void ExtGetProgram([OutAttribute, CountAttribute(Parameter = "maxPrograms")] out int programs, int maxPrograms, [OutAttribute, CountAttribute(Count = 1)] out int numPrograms) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: QCOM_extended_get2]
            /// </summary>
            /// <param name="programs">
            /// [length: maxPrograms]
            /// </param>
            /// <param name="maxPrograms">
            /// </param>
            /// <param name="numPrograms">
            /// [length: 1]
            /// </param>
            [Obsolete("Use out overload instead")]
            [AutoGenerated(Category = "QCOM_extended_get2", Version = "", EntryPoint = "glExtGetProgramsQCOM")]
            public static unsafe void ExtGetProgram([OutAttribute, CountAttribute(Parameter = "maxPrograms")] int* programs, int maxPrograms, [OutAttribute, CountAttribute(Count = 1)] int[] numPrograms) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: QCOM_extended_get2]
            /// </summary>
            /// <param name="programs">
            /// [length: maxPrograms]
            /// </param>
            /// <param name="maxPrograms">
            /// </param>
            /// <param name="numPrograms">
            /// [length: 1]
            /// </param>
            [AutoGenerated(Category = "QCOM_extended_get2", Version = "", EntryPoint = "glExtGetProgramsQCOM")]
            public static unsafe void ExtGetProgram([OutAttribute, CountAttribute(Parameter = "maxPrograms")] int* programs, int maxPrograms, [OutAttribute, CountAttribute(Count = 1)] int* numPrograms) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: QCOM_extended_get2]
            /// </summary>
            /// <param name="programs">
            /// [length: maxPrograms]
            /// </param>
            /// <param name="maxPrograms">
            /// </param>
            /// <param name="numPrograms">
            /// [length: 1]
            /// </param>
            [AutoGenerated(Category = "QCOM_extended_get2", Version = "", EntryPoint = "glExtGetProgramsQCOM")]
            public static void ExtGetProgram([OutAttribute, CountAttribute(Parameter = "maxPrograms")] uint[] programs, int maxPrograms, [OutAttribute, CountAttribute(Count = 1)] out int numPrograms) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: QCOM_extended_get2]
            /// </summary>
            /// <param name="programs">
            /// [length: maxPrograms]
            /// </param>
            /// <param name="maxPrograms">
            /// </param>
            /// <param name="numPrograms">
            /// [length: 1]
            /// </param>
            [AutoGenerated(Category = "QCOM_extended_get2", Version = "", EntryPoint = "glExtGetProgramsQCOM")]
            public static void ExtGetProgram([OutAttribute, CountAttribute(Parameter = "maxPrograms")] out uint programs, int maxPrograms, [OutAttribute, CountAttribute(Count = 1)] out int numPrograms) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: QCOM_extended_get2]
            /// </summary>
            /// <param name="programs">
            /// [length: maxPrograms]
            /// </param>
            /// <param name="maxPrograms">
            /// </param>
            /// <param name="numPrograms">
            /// [length: 1]
            /// </param>
            [Obsolete("Use out overload instead")]
            [AutoGenerated(Category = "QCOM_extended_get2", Version = "", EntryPoint = "glExtGetProgramsQCOM")]
            public static unsafe void ExtGetProgram([OutAttribute, CountAttribute(Parameter = "maxPrograms")] uint* programs, int maxPrograms, [OutAttribute, CountAttribute(Count = 1)] int[] numPrograms) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: QCOM_extended_get2]
            /// </summary>
            /// <param name="programs">
            /// [length: maxPrograms]
            /// </param>
            /// <param name="maxPrograms">
            /// </param>
            /// <param name="numPrograms">
            /// [length: 1]
            /// </param>
            [AutoGenerated(Category = "QCOM_extended_get2", Version = "", EntryPoint = "glExtGetProgramsQCOM")]
            public static unsafe void ExtGetProgram([OutAttribute, CountAttribute(Parameter = "maxPrograms")] uint* programs, int maxPrograms, [OutAttribute, CountAttribute(Count = 1)] int* numPrograms) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: QCOM_extended_get]
            /// </summary>
            /// <param name="renderbuffers">
            /// [length: maxRenderbuffers]
            /// </param>
            /// <param name="maxRenderbuffers">
            /// </param>
            /// <param name="numRenderbuffers">
            /// [length: 1]
            /// </param>
            [AutoGenerated(Category = "QCOM_extended_get", Version = "", EntryPoint = "glExtGetRenderbuffersQCOM")]
            public static void ExtGetRenderbuffers([OutAttribute, CountAttribute(Parameter = "maxRenderbuffers")] int[] renderbuffers, int maxRenderbuffers, [OutAttribute, CountAttribute(Count = 1)] out int numRenderbuffers) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: QCOM_extended_get]
            /// </summary>
            /// <param name="renderbuffers">
            /// [length: maxRenderbuffers]
            /// </param>
            /// <param name="maxRenderbuffers">
            /// </param>
            /// <param name="numRenderbuffers">
            /// [length: 1]
            /// </param>
            [AutoGenerated(Category = "QCOM_extended_get", Version = "", EntryPoint = "glExtGetRenderbuffersQCOM")]
            public static void ExtGetRenderbuffers([OutAttribute, CountAttribute(Parameter = "maxRenderbuffers")] out int renderbuffers, int maxRenderbuffers, [OutAttribute, CountAttribute(Count = 1)] out int numRenderbuffers) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: QCOM_extended_get]
            /// </summary>
            /// <param name="renderbuffers">
            /// [length: maxRenderbuffers]
            /// </param>
            /// <param name="maxRenderbuffers">
            /// </param>
            /// <param name="numRenderbuffers">
            /// [length: 1]
            /// </param>
            [Obsolete("Use out overload instead")]
            [AutoGenerated(Category = "QCOM_extended_get", Version = "", EntryPoint = "glExtGetRenderbuffersQCOM")]
            public static unsafe void ExtGetRenderbuffers([OutAttribute, CountAttribute(Parameter = "maxRenderbuffers")] int* renderbuffers, int maxRenderbuffers, [OutAttribute, CountAttribute(Count = 1)] int[] numRenderbuffers) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: QCOM_extended_get]
            /// </summary>
            /// <param name="renderbuffers">
            /// [length: maxRenderbuffers]
            /// </param>
            /// <param name="maxRenderbuffers">
            /// </param>
            /// <param name="numRenderbuffers">
            /// [length: 1]
            /// </param>
            [AutoGenerated(Category = "QCOM_extended_get", Version = "", EntryPoint = "glExtGetRenderbuffersQCOM")]
            public static unsafe void ExtGetRenderbuffers([OutAttribute, CountAttribute(Parameter = "maxRenderbuffers")] int* renderbuffers, int maxRenderbuffers, [OutAttribute, CountAttribute(Count = 1)] int* numRenderbuffers) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: QCOM_extended_get]
            /// </summary>
            /// <param name="renderbuffers">
            /// [length: maxRenderbuffers]
            /// </param>
            /// <param name="maxRenderbuffers">
            /// </param>
            /// <param name="numRenderbuffers">
            /// [length: 1]
            /// </param>
            [AutoGenerated(Category = "QCOM_extended_get", Version = "", EntryPoint = "glExtGetRenderbuffersQCOM")]
            public static void ExtGetRenderbuffers([OutAttribute, CountAttribute(Parameter = "maxRenderbuffers")] uint[] renderbuffers, int maxRenderbuffers, [OutAttribute, CountAttribute(Count = 1)] out int numRenderbuffers) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: QCOM_extended_get]
            /// </summary>
            /// <param name="renderbuffers">
            /// [length: maxRenderbuffers]
            /// </param>
            /// <param name="maxRenderbuffers">
            /// </param>
            /// <param name="numRenderbuffers">
            /// [length: 1]
            /// </param>
            [AutoGenerated(Category = "QCOM_extended_get", Version = "", EntryPoint = "glExtGetRenderbuffersQCOM")]
            public static void ExtGetRenderbuffers([OutAttribute, CountAttribute(Parameter = "maxRenderbuffers")] out uint renderbuffers, int maxRenderbuffers, [OutAttribute, CountAttribute(Count = 1)] out int numRenderbuffers) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: QCOM_extended_get]
            /// </summary>
            /// <param name="renderbuffers">
            /// [length: maxRenderbuffers]
            /// </param>
            /// <param name="maxRenderbuffers">
            /// </param>
            /// <param name="numRenderbuffers">
            /// [length: 1]
            /// </param>
            [Obsolete("Use out overload instead")]
            [AutoGenerated(Category = "QCOM_extended_get", Version = "", EntryPoint = "glExtGetRenderbuffersQCOM")]
            public static unsafe void ExtGetRenderbuffers([OutAttribute, CountAttribute(Parameter = "maxRenderbuffers")] uint* renderbuffers, int maxRenderbuffers, [OutAttribute, CountAttribute(Count = 1)] int[] numRenderbuffers) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: QCOM_extended_get]
            /// </summary>
            /// <param name="renderbuffers">
            /// [length: maxRenderbuffers]
            /// </param>
            /// <param name="maxRenderbuffers">
            /// </param>
            /// <param name="numRenderbuffers">
            /// [length: 1]
            /// </param>
            [AutoGenerated(Category = "QCOM_extended_get", Version = "", EntryPoint = "glExtGetRenderbuffersQCOM")]
            public static unsafe void ExtGetRenderbuffers([OutAttribute, CountAttribute(Parameter = "maxRenderbuffers")] uint* renderbuffers, int maxRenderbuffers, [OutAttribute, CountAttribute(Count = 1)] int* numRenderbuffers) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: QCOM_extended_get2]
            /// </summary>
            /// <param name="shaders">
            /// [length: maxShaders]
            /// </param>
            /// <param name="maxShaders">
            /// </param>
            /// <param name="numShaders">
            /// [length: 1]
            /// </param>
            [AutoGenerated(Category = "QCOM_extended_get2", Version = "", EntryPoint = "glExtGetShadersQCOM")]
            public static void ExtGetShaders([OutAttribute, CountAttribute(Parameter = "maxShaders")] int[] shaders, int maxShaders, [OutAttribute, CountAttribute(Count = 1)] out int numShaders) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: QCOM_extended_get2]
            /// </summary>
            /// <param name="shaders">
            /// [length: maxShaders]
            /// </param>
            /// <param name="maxShaders">
            /// </param>
            /// <param name="numShaders">
            /// [length: 1]
            /// </param>
            [AutoGenerated(Category = "QCOM_extended_get2", Version = "", EntryPoint = "glExtGetShadersQCOM")]
            public static void ExtGetShaders([OutAttribute, CountAttribute(Parameter = "maxShaders")] out int shaders, int maxShaders, [OutAttribute, CountAttribute(Count = 1)] out int numShaders) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: QCOM_extended_get2]
            /// </summary>
            /// <param name="shaders">
            /// [length: maxShaders]
            /// </param>
            /// <param name="maxShaders">
            /// </param>
            /// <param name="numShaders">
            /// [length: 1]
            /// </param>
            [Obsolete("Use out overload instead")]
            [AutoGenerated(Category = "QCOM_extended_get2", Version = "", EntryPoint = "glExtGetShadersQCOM")]
            public static unsafe void ExtGetShaders([OutAttribute, CountAttribute(Parameter = "maxShaders")] int* shaders, int maxShaders, [OutAttribute, CountAttribute(Count = 1)] int[] numShaders) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: QCOM_extended_get2]
            /// </summary>
            /// <param name="shaders">
            /// [length: maxShaders]
            /// </param>
            /// <param name="maxShaders">
            /// </param>
            /// <param name="numShaders">
            /// [length: 1]
            /// </param>
            [AutoGenerated(Category = "QCOM_extended_get2", Version = "", EntryPoint = "glExtGetShadersQCOM")]
            public static unsafe void ExtGetShaders([OutAttribute, CountAttribute(Parameter = "maxShaders")] int* shaders, int maxShaders, [OutAttribute, CountAttribute(Count = 1)] int* numShaders) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: QCOM_extended_get2]
            /// </summary>
            /// <param name="shaders">
            /// [length: maxShaders]
            /// </param>
            /// <param name="maxShaders">
            /// </param>
            /// <param name="numShaders">
            /// [length: 1]
            /// </param>
            [AutoGenerated(Category = "QCOM_extended_get2", Version = "", EntryPoint = "glExtGetShadersQCOM")]
            public static void ExtGetShaders([OutAttribute, CountAttribute(Parameter = "maxShaders")] uint[] shaders, int maxShaders, [OutAttribute, CountAttribute(Count = 1)] out int numShaders) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: QCOM_extended_get2]
            /// </summary>
            /// <param name="shaders">
            /// [length: maxShaders]
            /// </param>
            /// <param name="maxShaders">
            /// </param>
            /// <param name="numShaders">
            /// [length: 1]
            /// </param>
            [AutoGenerated(Category = "QCOM_extended_get2", Version = "", EntryPoint = "glExtGetShadersQCOM")]
            public static void ExtGetShaders([OutAttribute, CountAttribute(Parameter = "maxShaders")] out uint shaders, int maxShaders, [OutAttribute, CountAttribute(Count = 1)] out int numShaders) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: QCOM_extended_get2]
            /// </summary>
            /// <param name="shaders">
            /// [length: maxShaders]
            /// </param>
            /// <param name="maxShaders">
            /// </param>
            /// <param name="numShaders">
            /// [length: 1]
            /// </param>
            [Obsolete("Use out overload instead")]
            [AutoGenerated(Category = "QCOM_extended_get2", Version = "", EntryPoint = "glExtGetShadersQCOM")]
            public static unsafe void ExtGetShaders([OutAttribute, CountAttribute(Parameter = "maxShaders")] uint* shaders, int maxShaders, [OutAttribute, CountAttribute(Count = 1)] int[] numShaders) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: QCOM_extended_get2]
            /// </summary>
            /// <param name="shaders">
            /// [length: maxShaders]
            /// </param>
            /// <param name="maxShaders">
            /// </param>
            /// <param name="numShaders">
            /// [length: 1]
            /// </param>
            [AutoGenerated(Category = "QCOM_extended_get2", Version = "", EntryPoint = "glExtGetShadersQCOM")]
            public static unsafe void ExtGetShaders([OutAttribute, CountAttribute(Parameter = "maxShaders")] uint* shaders, int maxShaders, [OutAttribute, CountAttribute(Count = 1)] int* numShaders) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: QCOM_extended_get]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="face">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// </param>
            [AutoGenerated(Category = "QCOM_extended_get", Version = "", EntryPoint = "glExtGetTexLevelParameterivQCOM")]
            public static void ExtGetTexLevelParameter(int texture, OpenTK.Graphics.ES11.All face, int level, OpenTK.Graphics.ES11.All pname, [OutAttribute] int[] @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: QCOM_extended_get]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="face">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// </param>
            [AutoGenerated(Category = "QCOM_extended_get", Version = "", EntryPoint = "glExtGetTexLevelParameterivQCOM")]
            public static void ExtGetTexLevelParameter(int texture, OpenTK.Graphics.ES11.All face, int level, OpenTK.Graphics.ES11.All pname, [OutAttribute] out int @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: QCOM_extended_get]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="face">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// </param>
            [AutoGenerated(Category = "QCOM_extended_get", Version = "", EntryPoint = "glExtGetTexLevelParameterivQCOM")]
            public static unsafe void ExtGetTexLevelParameter(int texture, OpenTK.Graphics.ES11.All face, int level, OpenTK.Graphics.ES11.All pname, [OutAttribute] int* @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: QCOM_extended_get]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="face">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// </param>
            [AutoGenerated(Category = "QCOM_extended_get", Version = "", EntryPoint = "glExtGetTexLevelParameterivQCOM")]
            public static void ExtGetTexLevelParameter(uint texture, OpenTK.Graphics.ES11.All face, int level, OpenTK.Graphics.ES11.All pname, [OutAttribute] int[] @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: QCOM_extended_get]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="face">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// </param>
            [AutoGenerated(Category = "QCOM_extended_get", Version = "", EntryPoint = "glExtGetTexLevelParameterivQCOM")]
            public static void ExtGetTexLevelParameter(uint texture, OpenTK.Graphics.ES11.All face, int level, OpenTK.Graphics.ES11.All pname, [OutAttribute] out int @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: QCOM_extended_get]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="face">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// </param>
            [AutoGenerated(Category = "QCOM_extended_get", Version = "", EntryPoint = "glExtGetTexLevelParameterivQCOM")]
            public static unsafe void ExtGetTexLevelParameter(uint texture, OpenTK.Graphics.ES11.All face, int level, OpenTK.Graphics.ES11.All pname, [OutAttribute] int* @params) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: QCOM_extended_get]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="xoffset">
            /// </param>
            /// <param name="yoffset">
            /// </param>
            /// <param name="zoffset">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="height">
            /// </param>
            /// <param name="depth">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="texels">
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "QCOM_extended_get", Version = "", EntryPoint = "glExtGetTexSubImageQCOM")]
            public static void ExtGetTexSubImage(OpenTK.Graphics.ES11.All target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, OpenTK.Graphics.ES11.All format, OpenTK.Graphics.ES11.All type, [OutAttribute] IntPtr texels) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: QCOM_extended_get]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="xoffset">
            /// </param>
            /// <param name="yoffset">
            /// </param>
            /// <param name="zoffset">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="height">
            /// </param>
            /// <param name="depth">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="texels">
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "QCOM_extended_get", Version = "", EntryPoint = "glExtGetTexSubImageQCOM")]
            public static void ExtGetTexSubImage<T10>(OpenTK.Graphics.ES11.All target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, OpenTK.Graphics.ES11.All format, OpenTK.Graphics.ES11.All type, [InAttribute, OutAttribute] T10[] texels)
                where T10 : struct
             { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: QCOM_extended_get]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="xoffset">
            /// </param>
            /// <param name="yoffset">
            /// </param>
            /// <param name="zoffset">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="height">
            /// </param>
            /// <param name="depth">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="texels">
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "QCOM_extended_get", Version = "", EntryPoint = "glExtGetTexSubImageQCOM")]
            public static void ExtGetTexSubImage<T10>(OpenTK.Graphics.ES11.All target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, OpenTK.Graphics.ES11.All format, OpenTK.Graphics.ES11.All type, [InAttribute, OutAttribute] T10[,] texels)
                where T10 : struct
             { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: QCOM_extended_get]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="xoffset">
            /// </param>
            /// <param name="yoffset">
            /// </param>
            /// <param name="zoffset">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="height">
            /// </param>
            /// <param name="depth">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="texels">
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "QCOM_extended_get", Version = "", EntryPoint = "glExtGetTexSubImageQCOM")]
            public static void ExtGetTexSubImage<T10>(OpenTK.Graphics.ES11.All target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, OpenTK.Graphics.ES11.All format, OpenTK.Graphics.ES11.All type, [InAttribute, OutAttribute] T10[,,] texels)
                where T10 : struct
             { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: QCOM_extended_get]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="xoffset">
            /// </param>
            /// <param name="yoffset">
            /// </param>
            /// <param name="zoffset">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="height">
            /// </param>
            /// <param name="depth">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="texels">
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "QCOM_extended_get", Version = "", EntryPoint = "glExtGetTexSubImageQCOM")]
            public static void ExtGetTexSubImage<T10>(OpenTK.Graphics.ES11.All target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, OpenTK.Graphics.ES11.All format, OpenTK.Graphics.ES11.All type, [InAttribute, OutAttribute] ref T10 texels)
                where T10 : struct
             { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: QCOM_extended_get]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="xoffset">
            /// </param>
            /// <param name="yoffset">
            /// </param>
            /// <param name="zoffset">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="height">
            /// </param>
            /// <param name="depth">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="texels">
            /// </param>
            [AutoGenerated(Category = "QCOM_extended_get", Version = "", EntryPoint = "glExtGetTexSubImageQCOM")]
            public static void ExtGetTexSubImage(OpenTK.Graphics.ES11.All target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, OpenTK.Graphics.ES11.PixelFormat format, OpenTK.Graphics.ES11.PixelType type, [OutAttribute] IntPtr texels) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: QCOM_extended_get]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="xoffset">
            /// </param>
            /// <param name="yoffset">
            /// </param>
            /// <param name="zoffset">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="height">
            /// </param>
            /// <param name="depth">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="texels">
            /// </param>
            [AutoGenerated(Category = "QCOM_extended_get", Version = "", EntryPoint = "glExtGetTexSubImageQCOM")]
            public static void ExtGetTexSubImage<T10>(OpenTK.Graphics.ES11.All target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, OpenTK.Graphics.ES11.PixelFormat format, OpenTK.Graphics.ES11.PixelType type, [InAttribute, OutAttribute] T10[] texels)
                where T10 : struct
             { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: QCOM_extended_get]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="xoffset">
            /// </param>
            /// <param name="yoffset">
            /// </param>
            /// <param name="zoffset">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="height">
            /// </param>
            /// <param name="depth">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="texels">
            /// </param>
            [AutoGenerated(Category = "QCOM_extended_get", Version = "", EntryPoint = "glExtGetTexSubImageQCOM")]
            public static void ExtGetTexSubImage<T10>(OpenTK.Graphics.ES11.All target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, OpenTK.Graphics.ES11.PixelFormat format, OpenTK.Graphics.ES11.PixelType type, [InAttribute, OutAttribute] T10[,] texels)
                where T10 : struct
             { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: QCOM_extended_get]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="xoffset">
            /// </param>
            /// <param name="yoffset">
            /// </param>
            /// <param name="zoffset">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="height">
            /// </param>
            /// <param name="depth">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="texels">
            /// </param>
            [AutoGenerated(Category = "QCOM_extended_get", Version = "", EntryPoint = "glExtGetTexSubImageQCOM")]
            public static void ExtGetTexSubImage<T10>(OpenTK.Graphics.ES11.All target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, OpenTK.Graphics.ES11.PixelFormat format, OpenTK.Graphics.ES11.PixelType type, [InAttribute, OutAttribute] T10[,,] texels)
                where T10 : struct
             { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: QCOM_extended_get]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="xoffset">
            /// </param>
            /// <param name="yoffset">
            /// </param>
            /// <param name="zoffset">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="height">
            /// </param>
            /// <param name="depth">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="texels">
            /// </param>
            [AutoGenerated(Category = "QCOM_extended_get", Version = "", EntryPoint = "glExtGetTexSubImageQCOM")]
            public static void ExtGetTexSubImage<T10>(OpenTK.Graphics.ES11.All target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, OpenTK.Graphics.ES11.PixelFormat format, OpenTK.Graphics.ES11.PixelType type, [InAttribute, OutAttribute] ref T10 texels)
                where T10 : struct
             { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: QCOM_extended_get]
            /// </summary>
            /// <param name="textures">
            /// </param>
            /// <param name="maxTextures">
            /// </param>
            /// <param name="numTextures">
            /// </param>
            [AutoGenerated(Category = "QCOM_extended_get", Version = "", EntryPoint = "glExtGetTexturesQCOM")]
            public static void ExtGetTextures([OutAttribute] int[] textures, int maxTextures, [OutAttribute] int[] numTextures) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: QCOM_extended_get]
            /// </summary>
            /// <param name="textures">
            /// </param>
            /// <param name="maxTextures">
            /// </param>
            /// <param name="numTextures">
            /// </param>
            [AutoGenerated(Category = "QCOM_extended_get", Version = "", EntryPoint = "glExtGetTexturesQCOM")]
            public static void ExtGetTextures([OutAttribute] out int textures, int maxTextures, [OutAttribute] out int numTextures) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: QCOM_extended_get]
            /// </summary>
            /// <param name="textures">
            /// </param>
            /// <param name="maxTextures">
            /// </param>
            /// <param name="numTextures">
            /// </param>
            [AutoGenerated(Category = "QCOM_extended_get", Version = "", EntryPoint = "glExtGetTexturesQCOM")]
            public static unsafe void ExtGetTextures([OutAttribute] int* textures, int maxTextures, [OutAttribute] int* numTextures) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: QCOM_extended_get]
            /// </summary>
            /// <param name="textures">
            /// </param>
            /// <param name="maxTextures">
            /// </param>
            /// <param name="numTextures">
            /// </param>
            [AutoGenerated(Category = "QCOM_extended_get", Version = "", EntryPoint = "glExtGetTexturesQCOM")]
            public static void ExtGetTextures([OutAttribute] uint[] textures, int maxTextures, [OutAttribute] int[] numTextures) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: QCOM_extended_get]
            /// </summary>
            /// <param name="textures">
            /// </param>
            /// <param name="maxTextures">
            /// </param>
            /// <param name="numTextures">
            /// </param>
            [AutoGenerated(Category = "QCOM_extended_get", Version = "", EntryPoint = "glExtGetTexturesQCOM")]
            public static void ExtGetTextures([OutAttribute] out uint textures, int maxTextures, [OutAttribute] out int numTextures) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: QCOM_extended_get]
            /// </summary>
            /// <param name="textures">
            /// </param>
            /// <param name="maxTextures">
            /// </param>
            /// <param name="numTextures">
            /// </param>
            [AutoGenerated(Category = "QCOM_extended_get", Version = "", EntryPoint = "glExtGetTexturesQCOM")]
            public static unsafe void ExtGetTextures([OutAttribute] uint* textures, int maxTextures, [OutAttribute] int* numTextures) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: QCOM_extended_get2]
            /// </summary>
            /// <param name="program">
            /// </param>
            [AutoGenerated(Category = "QCOM_extended_get2", Version = "", EntryPoint = "glExtIsProgramBinaryQCOM")]
            public static bool ExtIsProgramBinary(int program) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: QCOM_extended_get2]
            /// </summary>
            /// <param name="program">
            /// </param>
            [AutoGenerated(Category = "QCOM_extended_get2", Version = "", EntryPoint = "glExtIsProgramBinaryQCOM")]
            public static bool ExtIsProgramBinary(uint program) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: QCOM_extended_get]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="param">
            /// </param>
            [AutoGenerated(Category = "QCOM_extended_get", Version = "", EntryPoint = "glExtTexObjectStateOverrideiQCOM")]
            public static void ExtTexObjectStateOverride(OpenTK.Graphics.ES11.All target, OpenTK.Graphics.ES11.All pname, int param) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: QCOM_driver_control]
            /// </summary>
            /// <param name="num">
            /// </param>
            /// <param name="size">
            /// </param>
            /// <param name="driverControls">
            /// [length: size]
            /// </param>
            [AutoGenerated(Category = "QCOM_driver_control", Version = "", EntryPoint = "glGetDriverControlsQCOM")]
            public static void GetDriverControl([OutAttribute] int[] num, int size, [OutAttribute, CountAttribute(Parameter = "size")] int[] driverControls) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: QCOM_driver_control]
            /// </summary>
            /// <param name="num">
            /// </param>
            /// <param name="size">
            /// </param>
            /// <param name="driverControls">
            /// [length: size]
            /// </param>
            [AutoGenerated(Category = "QCOM_driver_control", Version = "", EntryPoint = "glGetDriverControlsQCOM")]
            public static void GetDriverControl([OutAttribute] int[] num, int size, [OutAttribute, CountAttribute(Parameter = "size")] uint[] driverControls) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: QCOM_driver_control]
            /// </summary>
            /// <param name="num">
            /// </param>
            /// <param name="size">
            /// </param>
            /// <param name="driverControls">
            /// [length: size]
            /// </param>
            [AutoGenerated(Category = "QCOM_driver_control", Version = "", EntryPoint = "glGetDriverControlsQCOM")]
            public static void GetDriverControl([OutAttribute] out int num, int size, [OutAttribute, CountAttribute(Parameter = "size")] out int driverControls) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: QCOM_driver_control]
            /// </summary>
            /// <param name="num">
            /// </param>
            /// <param name="size">
            /// </param>
            /// <param name="driverControls">
            /// [length: size]
            /// </param>
            [AutoGenerated(Category = "QCOM_driver_control", Version = "", EntryPoint = "glGetDriverControlsQCOM")]
            public static void GetDriverControl([OutAttribute] out int num, int size, [OutAttribute, CountAttribute(Parameter = "size")] out uint driverControls) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: QCOM_driver_control]
            /// </summary>
            /// <param name="num">
            /// </param>
            /// <param name="size">
            /// </param>
            /// <param name="driverControls">
            /// [length: size]
            /// </param>
            [AutoGenerated(Category = "QCOM_driver_control", Version = "", EntryPoint = "glGetDriverControlsQCOM")]
            public static unsafe void GetDriverControl([OutAttribute] int* num, int size, [OutAttribute, CountAttribute(Parameter = "size")] int* driverControls) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: QCOM_driver_control]
            /// </summary>
            /// <param name="num">
            /// </param>
            /// <param name="size">
            /// </param>
            /// <param name="driverControls">
            /// [length: size]
            /// </param>
            [AutoGenerated(Category = "QCOM_driver_control", Version = "", EntryPoint = "glGetDriverControlsQCOM")]
            public static unsafe void GetDriverControl([OutAttribute] int* num, int size, [OutAttribute, CountAttribute(Parameter = "size")] uint* driverControls) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: QCOM_driver_control]
            /// </summary>
            /// <param name="driverControl">
            /// </param>
            /// <param name="bufSize">
            /// </param>
            /// <param name="length">
            /// </param>
            /// <param name="driverControlString">
            /// [length: bufSize]
            /// </param>
            [AutoGenerated(Category = "QCOM_driver_control", Version = "", EntryPoint = "glGetDriverControlStringQCOM")]
            public static void GetDriverControlString(int driverControl, int bufSize, [OutAttribute] int[] length, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String driverControlString) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: QCOM_driver_control]
            /// </summary>
            /// <param name="driverControl">
            /// </param>
            /// <param name="bufSize">
            /// </param>
            /// <param name="length">
            /// </param>
            /// <param name="driverControlString">
            /// [length: bufSize]
            /// </param>
            [AutoGenerated(Category = "QCOM_driver_control", Version = "", EntryPoint = "glGetDriverControlStringQCOM")]
            public static void GetDriverControlString(int driverControl, int bufSize, [OutAttribute] out int length, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String driverControlString) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: QCOM_driver_control]
            /// </summary>
            /// <param name="driverControl">
            /// </param>
            /// <param name="bufSize">
            /// </param>
            /// <param name="length">
            /// </param>
            /// <param name="driverControlString">
            /// [length: bufSize]
            /// </param>
            [AutoGenerated(Category = "QCOM_driver_control", Version = "", EntryPoint = "glGetDriverControlStringQCOM")]
            public static unsafe void GetDriverControlString(int driverControl, int bufSize, [OutAttribute] int* length, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String driverControlString) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: QCOM_driver_control]
            /// </summary>
            /// <param name="driverControl">
            /// </param>
            /// <param name="bufSize">
            /// </param>
            /// <param name="length">
            /// </param>
            /// <param name="driverControlString">
            /// [length: bufSize]
            /// </param>
            [AutoGenerated(Category = "QCOM_driver_control", Version = "", EntryPoint = "glGetDriverControlStringQCOM")]
            public static void GetDriverControlString(uint driverControl, int bufSize, [OutAttribute] int[] length, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String driverControlString) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: QCOM_driver_control]
            /// </summary>
            /// <param name="driverControl">
            /// </param>
            /// <param name="bufSize">
            /// </param>
            /// <param name="length">
            /// </param>
            /// <param name="driverControlString">
            /// [length: bufSize]
            /// </param>
            [AutoGenerated(Category = "QCOM_driver_control", Version = "", EntryPoint = "glGetDriverControlStringQCOM")]
            public static void GetDriverControlString(uint driverControl, int bufSize, [OutAttribute] out int length, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String driverControlString) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: QCOM_driver_control]
            /// </summary>
            /// <param name="driverControl">
            /// </param>
            /// <param name="bufSize">
            /// </param>
            /// <param name="length">
            /// </param>
            /// <param name="driverControlString">
            /// [length: bufSize]
            /// </param>
            [AutoGenerated(Category = "QCOM_driver_control", Version = "", EntryPoint = "glGetDriverControlStringQCOM")]
            public static unsafe void GetDriverControlString(uint driverControl, int bufSize, [OutAttribute] int* length, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String driverControlString) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: QCOM_tiled_rendering]
            /// </summary>
            /// <param name="x">
            /// </param>
            /// <param name="y">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="height">
            /// </param>
            /// <param name="preserveMask">
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "QCOM_tiled_rendering", Version = "", EntryPoint = "glStartTilingQCOM")]
            public static void StartTiling(int x, int y, int width, int height, OpenTK.Graphics.ES11.All preserveMask) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: QCOM_tiled_rendering]
            /// </summary>
            /// <param name="x">
            /// </param>
            /// <param name="y">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="height">
            /// </param>
            /// <param name="preserveMask">
            /// </param>
            [AutoGenerated(Category = "QCOM_tiled_rendering", Version = "", EntryPoint = "glStartTilingQCOM")]
            public static void StartTiling(int x, int y, int width, int height, OpenTK.Graphics.ES11.BufferBitQcom preserveMask) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: QCOM_tiled_rendering]
            /// </summary>
            /// <param name="x">
            /// </param>
            /// <param name="y">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="height">
            /// </param>
            /// <param name="preserveMask">
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "QCOM_tiled_rendering", Version = "", EntryPoint = "glStartTilingQCOM")]
            public static void StartTiling(uint x, uint y, uint width, uint height, OpenTK.Graphics.ES11.All preserveMask) { throw new BindingsNotRewrittenException(); }

            /// <summary>
            /// [requires: QCOM_tiled_rendering]
            /// </summary>
            /// <param name="x">
            /// </param>
            /// <param name="y">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="height">
            /// </param>
            /// <param name="preserveMask">
            /// </param>
            [AutoGenerated(Category = "QCOM_tiled_rendering", Version = "", EntryPoint = "glStartTilingQCOM")]
            public static void StartTiling(uint x, uint y, uint width, uint height, OpenTK.Graphics.ES11.BufferBitQcom preserveMask) { throw new BindingsNotRewrittenException(); }

        }

        [Slot(31)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern int glClientWaitSyncAPPLE(IntPtr sync, int flags, ulong timeout);

        [Slot(53)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glCopyTextureLevelsAPPLE(uint destinationTexture, uint sourceTexture, int sourceBaseLevel, int sourceLevelCount);

        [Slot(66)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glDeleteSyncAPPLE(IntPtr sync);

        [Slot(112)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern IntPtr glFenceSyncAPPLE(int condition, uint flags);

        [Slot(159)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetInteger64vAPPLE(int pname, [OutAttribute] long* @params);

        [Slot(181)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetSyncivAPPLE(IntPtr sync, int pname, int bufSize, [OutAttribute] int* length, [OutAttribute, CountAttribute(Parameter = "bufSize")] int* values);

        [Slot(203)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern byte glIsSyncAPPLE(IntPtr sync);

        [Slot(318)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glRenderbufferStorageMultisampleAPPLE(int target, int samples, int internalformat, int width, int height);

        [Slot(322)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glResolveMultisampleFramebufferAPPLE();

        [Slot(405)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glWaitSyncAPPLE(IntPtr sync, uint flags, ulong timeout);

        [Slot(1)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glActiveTexture(int texture);

        [Slot(2)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glAlphaFunc(int func, float @ref);

        [Slot(3)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glAlphaFuncx(int func, int @ref);

        [Slot(5)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glBindBuffer(int target, uint buffer);

        [Slot(8)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glBindTexture(int target, uint texture);

        [Slot(15)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glBlendFunc(int sfactor, int dfactor);

        [Slot(17)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glBufferData(int target, IntPtr size, [CountAttribute(Parameter = "size")] IntPtr data, int usage);

        [Slot(18)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glBufferSubData(int target, IntPtr offset, IntPtr size, [CountAttribute(Parameter = "size")] IntPtr data);

        [Slot(20)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glClear(int mask);

        [Slot(22)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glClearColor(float red, float green, float blue, float alpha);

        [Slot(23)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glClearColorx(int red, int green, int blue, int alpha);

        [Slot(25)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glClearDepthf(float d);

        [Slot(27)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glClearDepthx(int depth);

        [Slot(29)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glClearStencil(int s);

        [Slot(30)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glClientActiveTexture(int texture);

        [Slot(32)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glClipPlanef(int p, [CountAttribute(Count = 4)] float* eqn);

        [Slot(35)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glClipPlanex(int plane, [CountAttribute(Count = 4)] int* equation);

        [Slot(40)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glColor4f(float red, float green, float blue, float alpha);

        [Slot(41)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glColor4ub(Byte red, Byte green, Byte blue, Byte alpha);

        [Slot(42)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glColor4x(int red, int green, int blue, int alpha);

        [Slot(45)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glColorMask(bool red, bool green, bool blue, bool alpha);

        [Slot(46)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glColorPointer(int size, int type, int stride, [CountAttribute(Computed = "size,type,stride")] IntPtr pointer);

        [Slot(47)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glCompressedTexImage2D(int target, int level, int internalformat, int width, int height, int border, int imageSize, [CountAttribute(Parameter = "imageSize")] IntPtr data);

        [Slot(48)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glCompressedTexSubImage2D(int target, int level, int xoffset, int yoffset, int width, int height, int format, int imageSize, [CountAttribute(Parameter = "imageSize")] IntPtr data);

        [Slot(51)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glCopyTexImage2D(int target, int level, int internalformat, int x, int y, int width, int height, int border);

        [Slot(52)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glCopyTexSubImage2D(int target, int level, int xoffset, int yoffset, int x, int y, int width, int height);

        [Slot(54)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glCullFace(int mode);

        [Slot(56)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glDebugMessageCallback(DebugProc callback, IntPtr userParam);

        [Slot(58)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glDebugMessageControl(int source, int type, int severity, int count, [CountAttribute(Parameter = "count")] uint* ids, bool enabled);

        [Slot(60)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glDebugMessageInsert(int source, int type, uint id, int severity, int length, [CountAttribute(Computed = "buf,length")] IntPtr buf);

        [Slot(62)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glDeleteBuffers(int n, [CountAttribute(Parameter = "n")] uint* buffers);

        [Slot(67)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glDeleteTextures(int n, [CountAttribute(Parameter = "n")] uint* textures);

        [Slot(69)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glDepthFunc(int func);

        [Slot(70)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glDepthMask(bool flag);

        [Slot(71)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glDepthRangef(float n, float f);

        [Slot(73)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glDepthRangex(int n, int f);

        [Slot(75)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glDisable(int cap);

        [Slot(76)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glDisableClientState(int array);

        [Slot(79)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glDrawArrays(int mode, int first, int count);

        [Slot(80)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glDrawElements(int mode, int count, int type, [CountAttribute(Computed = "count,type")] IntPtr indices);

        [Slot(91)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glEnable(int cap);

        [Slot(92)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glEnableClientState(int array);

        [Slot(113)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glFinish();

        [Slot(115)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glFlush();

        [Slot(117)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glFogf(int pname, float param);

        [Slot(118)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glFogfv(int pname, [CountAttribute(Computed = "pname")] float* @params);

        [Slot(119)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glFogx(int pname, int param);

        [Slot(121)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glFogxv(int pname, [CountAttribute(Computed = "pname")] int* param);

        [Slot(127)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glFrontFace(int mode);

        [Slot(128)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glFrustumf(float l, float r, float b, float t, float n, float f);

        [Slot(130)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glFrustumx(int l, int r, int b, int t, int n, int f);

        [Slot(132)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGenBuffers(int n, [OutAttribute, CountAttribute(Parameter = "n")] uint* buffers);

        [Slot(137)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGenTextures(int n, [OutAttribute, CountAttribute(Parameter = "n")] uint* textures);

        [Slot(139)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetBooleanv(int pname, [OutAttribute, CountAttribute(Computed = "pname")] bool* data);

        [Slot(140)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetBufferParameteriv(int target, int pname, [OutAttribute, CountAttribute(Computed = "pname")] int* @params);

        [Slot(142)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetClipPlanef(int plane, [OutAttribute, CountAttribute(Count = 4)] float* equation);

        [Slot(144)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetClipPlanex(int plane, [OutAttribute, CountAttribute(Count = 4)] int* equation);

        [Slot(147)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe int glGetDebugMessageLog(uint count, int bufSize, [OutAttribute, CountAttribute(Parameter = "count")] int* sources, [OutAttribute, CountAttribute(Parameter = "count")] int* types, [OutAttribute, CountAttribute(Parameter = "count")] uint* ids, [OutAttribute, CountAttribute(Parameter = "count")] int* severities, [OutAttribute, CountAttribute(Parameter = "count")] int* lengths, [OutAttribute, CountAttribute(Parameter = "bufSize")] IntPtr messageLog);

        [Slot(151)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern int glGetError();

        [Slot(153)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetFixedv(int pname, [OutAttribute] int* @params);

        [Slot(155)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetFloatv(int pname, [OutAttribute, CountAttribute(Computed = "pname")] float* data);

        [Slot(160)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetIntegerv(int pname, [OutAttribute, CountAttribute(Computed = "pname")] int* data);

        [Slot(161)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetLightfv(int light, int pname, [OutAttribute, CountAttribute(Computed = "pname")] float* @params);

        [Slot(163)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetLightxv(int light, int pname, [OutAttribute, CountAttribute(Computed = "pname")] int* @params);

        [Slot(166)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetMaterialfv(int face, int pname, [OutAttribute, CountAttribute(Computed = "pname")] float* @params);

        [Slot(168)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetMaterialxv(int face, int pname, [OutAttribute, CountAttribute(Computed = "pname")] int* @params);

        [Slot(172)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetObjectLabel(int identifier, uint name, int bufSize, [OutAttribute, CountAttribute(Count = 1)] int* length, [OutAttribute, CountAttribute(Parameter = "bufSize")] IntPtr label);

        [Slot(174)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetObjectPtrLabel(IntPtr ptr, int bufSize, [OutAttribute, CountAttribute(Count = 1)] int* length, [OutAttribute, CountAttribute(Parameter = "bufSize")] IntPtr label);

        [Slot(176)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetPixelMapxv(int map, int size, [OutAttribute, CountAttribute(Parameter = "size")] int* values);

        [Slot(177)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glGetPointerv(int pname, [OutAttribute, CountAttribute(Count = 1)] IntPtr @params);

        [Slot(180)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern IntPtr glGetString(int name);

        [Slot(182)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetTexEnvfv(int target, int pname, [OutAttribute, CountAttribute(Computed = "pname")] float* @params);

        [Slot(183)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetTexEnviv(int target, int pname, [OutAttribute, CountAttribute(Computed = "pname")] int* @params);

        [Slot(184)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetTexEnvxv(int target, int pname, [OutAttribute, CountAttribute(Computed = "pname")] int* @params);

        [Slot(190)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetTexParameterfv(int target, int pname, [OutAttribute, CountAttribute(Computed = "pname")] float* @params);

        [Slot(191)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetTexParameteriv(int target, int pname, [OutAttribute, CountAttribute(Computed = "pname")] int* @params);

        [Slot(192)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetTexParameterxv(int target, int pname, [OutAttribute, CountAttribute(Computed = "pname")] int* @params);

        [Slot(194)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glHint(int target, int mode);

        [Slot(198)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern byte glIsBuffer(uint buffer);

        [Slot(199)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern byte glIsEnabled(int cap);

        [Slot(204)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern byte glIsTexture(uint texture);

        [Slot(206)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glLightf(int light, int pname, float param);

        [Slot(207)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glLightfv(int light, int pname, [CountAttribute(Computed = "pname")] float* @params);

        [Slot(208)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glLightModelf(int pname, float param);

        [Slot(209)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glLightModelfv(int pname, [CountAttribute(Computed = "pname")] float* @params);

        [Slot(210)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glLightModelx(int pname, int param);

        [Slot(212)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glLightModelxv(int pname, [CountAttribute(Computed = "pname")] int* param);

        [Slot(214)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glLightx(int light, int pname, int param);

        [Slot(216)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glLightxv(int light, int pname, [CountAttribute(Computed = "pname")] int* @params);

        [Slot(218)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glLineWidth(float width);

        [Slot(219)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glLineWidthx(int width);

        [Slot(221)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glLoadIdentity();

        [Slot(222)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glLoadMatrixf([CountAttribute(Count = 16)] float* m);

        [Slot(223)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glLoadMatrixx([CountAttribute(Count = 16)] int* m);

        [Slot(227)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glLogicOp(int opcode);

        [Slot(234)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glMaterialf(int face, int pname, float param);

        [Slot(235)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glMaterialfv(int face, int pname, [CountAttribute(Computed = "pname")] float* @params);

        [Slot(236)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glMaterialx(int face, int pname, int param);

        [Slot(238)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glMaterialxv(int face, int pname, [CountAttribute(Computed = "pname")] int* param);

        [Slot(241)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glMatrixMode(int mode);

        [Slot(258)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glMultiTexCoord4f(int target, float s, float t, float r, float q);

        [Slot(259)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glMultiTexCoord4x(int texture, int s, int t, int r, int q);

        [Slot(262)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glMultMatrixf([CountAttribute(Count = 16)] float* m);

        [Slot(263)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glMultMatrixx([CountAttribute(Count = 16)] int* m);

        [Slot(266)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glNormal3f(float nx, float ny, float nz);

        [Slot(267)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glNormal3x(int nx, int ny, int nz);

        [Slot(270)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glNormalPointer(int type, int stride, [CountAttribute(Computed = "type,stride")] IntPtr pointer);

        [Slot(271)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glObjectLabel(int identifier, uint name, int length, [CountAttribute(Computed = "label,length")] IntPtr label);

        [Slot(273)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glObjectPtrLabel(IntPtr ptr, int length, [CountAttribute(Computed = "label,length")] IntPtr label);

        [Slot(275)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glOrthof(float l, float r, float b, float t, float n, float f);

        [Slot(277)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glOrthox(int l, int r, int b, int t, int n, int f);

        [Slot(280)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glPixelMapx(int map, int size, [CountAttribute(Parameter = "size")] int* values);

        [Slot(281)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glPixelStorei(int pname, int param);

        [Slot(282)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glPixelStorex(int pname, int param);

        [Slot(285)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glPointParameterf(int pname, float param);

        [Slot(286)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glPointParameterfv(int pname, [CountAttribute(Computed = "pname")] float* @params);

        [Slot(287)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glPointParameterx(int pname, int param);

        [Slot(289)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glPointParameterxv(int pname, [CountAttribute(Computed = "pname")] int* @params);

        [Slot(291)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glPointSize(float size);

        [Slot(293)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glPointSizex(int size);

        [Slot(295)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glPolygonOffset(float factor, float units);

        [Slot(296)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glPolygonOffsetx(int factor, int units);

        [Slot(298)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glPopDebugGroup();

        [Slot(301)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glPopMatrix();

        [Slot(303)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glPushDebugGroup(int source, uint id, int length, [CountAttribute(Computed = "message,length")] IntPtr message);

        [Slot(306)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glPushMatrix();

        [Slot(315)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glReadPixels(int x, int y, int width, int height, int format, int type, [OutAttribute, CountAttribute(Computed = "format,type,width,height")] IntPtr pixels);

        [Slot(323)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glRotatef(float angle, float x, float y, float z);

        [Slot(324)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glRotatex(int angle, int x, int y, int z);

        [Slot(326)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glSampleCoverage(float value, bool invert);

        [Slot(327)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glSampleCoveragex(int value, bool invert);

        [Slot(329)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glScalef(float x, float y, float z);

        [Slot(330)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glScalex(int x, int y, int z);

        [Slot(332)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glScissor(int x, int y, int width, int height);

        [Slot(334)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glShadeModel(int mode);

        [Slot(336)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glStencilFunc(int func, int @ref, uint mask);

        [Slot(337)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glStencilMask(uint mask);

        [Slot(338)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glStencilOp(int fail, int zfail, int zpass);

        [Slot(356)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glTexCoordPointer(int size, int type, int stride, [CountAttribute(Computed = "size,type,stride")] IntPtr pointer);

        [Slot(357)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glTexEnvf(int target, int pname, float param);

        [Slot(358)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glTexEnvfv(int target, int pname, [CountAttribute(Computed = "pname")] float* @params);

        [Slot(359)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glTexEnvi(int target, int pname, int param);

        [Slot(360)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glTexEnviv(int target, int pname, [CountAttribute(Computed = "pname")] int* @params);

        [Slot(361)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glTexEnvx(int target, int pname, int param);

        [Slot(363)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glTexEnvxv(int target, int pname, [CountAttribute(Computed = "pname")] int* @params);

        [Slot(371)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glTexImage2D(int target, int level, int internalformat, int width, int height, int border, int format, int type, [CountAttribute(Computed = "format,type,width,height")] IntPtr pixels);

        [Slot(372)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glTexParameterf(int target, int pname, float param);

        [Slot(373)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glTexParameterfv(int target, int pname, [CountAttribute(Computed = "pname")] float* @params);

        [Slot(374)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glTexParameteri(int target, int pname, int param);

        [Slot(375)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glTexParameteriv(int target, int pname, [CountAttribute(Computed = "pname")] int* @params);

        [Slot(376)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glTexParameterx(int target, int pname, int param);

        [Slot(378)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glTexParameterxv(int target, int pname, [CountAttribute(Computed = "pname")] int* @params);

        [Slot(383)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glTexSubImage2D(int target, int level, int xoffset, int yoffset, int width, int height, int format, int type, [CountAttribute(Computed = "format,type,width,height")] IntPtr pixels);

        [Slot(387)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glTranslatef(float x, float y, float z);

        [Slot(388)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glTranslatex(int x, int y, int z);

        [Slot(403)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glVertexPointer(int size, int type, int stride, [CountAttribute(Computed = "size,type,stride")] IntPtr pointer);

        [Slot(404)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glViewport(int x, int y, int width, int height);

        [Slot(12)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glBlendEquationEXT(int mode);

        [Slot(78)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glDiscardFramebufferEXT(int target, int numAttachments, [CountAttribute(Parameter = "numAttachments")] int* attachments);

        [Slot(116)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glFlushMappedBufferRangeEXT(int target, IntPtr offset, IntPtr length);

        [Slot(124)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glFramebufferTexture2DMultisampleEXT(int target, int attachment, int textarget, uint texture, int level, int samples);

        [Slot(157)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern int glGetGraphicsResetStatusEXT();

        [Slot(170)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetnUniformfvEXT(uint program, int location, int bufSize, [OutAttribute, CountAttribute(Parameter = "bufSize")] float* @params);

        [Slot(171)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetnUniformivEXT(uint program, int location, int bufSize, [OutAttribute, CountAttribute(Parameter = "bufSize")] int* @params);

        [Slot(197)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glInsertEventMarkerEXT(int length, IntPtr marker);

        [Slot(231)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern IntPtr glMapBufferRangeEXT(int target, IntPtr offset, IntPtr length, int access);

        [Slot(242)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glMultiDrawArraysEXT(int mode, [CountAttribute(Computed = "primcount")] int* first, [CountAttribute(Computed = "primcount")] int* count, int primcount);

        [Slot(243)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glMultiDrawElementsEXT(int mode, [CountAttribute(Computed = "primcount")] int* count, int type, [CountAttribute(Computed = "primcount")] IntPtr indices, int primcount);

        [Slot(300)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glPopGroupMarkerEXT();

        [Slot(305)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glPushGroupMarkerEXT(int length, IntPtr marker);

        [Slot(314)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glReadnPixelsEXT(int x, int y, int width, int height, int format, int type, int bufSize, [OutAttribute, CountAttribute(Parameter = "bufSize")] IntPtr data);

        [Slot(319)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glRenderbufferStorageMultisampleEXT(int target, int samples, int internalformat, int width, int height);

        [Slot(380)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glTexStorage1DEXT(int target, int levels, int internalformat, int width);

        [Slot(381)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glTexStorage2DEXT(int target, int levels, int internalformat, int width, int height);

        [Slot(382)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glTexStorage3DEXT(int target, int levels, int internalformat, int width, int height, int depth);

        [Slot(384)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glTextureStorage1DEXT(uint texture, int target, int levels, int internalformat, int width);

        [Slot(385)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glTextureStorage2DEXT(uint texture, int target, int levels, int internalformat, int width, int height);

        [Slot(386)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glTextureStorage3DEXT(uint texture, int target, int levels, int internalformat, int width, int height, int depth);

        [Slot(33)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glClipPlanefIMG(int p, [CountAttribute(Count = 4)] float* eqn);

        [Slot(36)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glClipPlanexIMG(int p, [CountAttribute(Count = 4)] int* eqn);

        [Slot(125)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glFramebufferTexture2DMultisampleIMG(int target, int attachment, int textarget, uint texture, int level, int samples);

        [Slot(320)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glRenderbufferStorageMultisampleIMG(int target, int samples, int internalformat, int width, int height);

        [Slot(57)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glDebugMessageCallbackKHR(DebugProcKhr callback, IntPtr userParam);

        [Slot(59)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glDebugMessageControlKHR(int source, int type, int severity, int count, uint* ids, bool enabled);

        [Slot(61)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glDebugMessageInsertKHR(int source, int type, uint id, int severity, int length, IntPtr buf);

        [Slot(148)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe int glGetDebugMessageLogKHR(uint count, int bufSize, [OutAttribute, CountAttribute(Parameter = "count")] int* sources, [OutAttribute, CountAttribute(Parameter = "count")] int* types, [OutAttribute, CountAttribute(Parameter = "count")] uint* ids, [OutAttribute, CountAttribute(Parameter = "count")] int* severities, [OutAttribute, CountAttribute(Parameter = "count")] int* lengths, [OutAttribute, CountAttribute(Parameter = "bufSize")] IntPtr messageLog);

        [Slot(173)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetObjectLabelKHR(int identifier, uint name, int bufSize, [OutAttribute] int* length, [OutAttribute, CountAttribute(Parameter = "bufSize")] IntPtr label);

        [Slot(175)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetObjectPtrLabelKHR(IntPtr ptr, int bufSize, [OutAttribute, CountAttribute(Count = 1)] int* length, [OutAttribute, CountAttribute(Parameter = "bufSize")] IntPtr label);

        [Slot(178)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glGetPointervKHR(int pname, [OutAttribute] IntPtr @params);

        [Slot(272)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glObjectLabelKHR(int identifier, uint name, int length, IntPtr label);

        [Slot(274)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glObjectPtrLabelKHR(IntPtr ptr, int length, IntPtr label);

        [Slot(299)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glPopDebugGroupKHR();

        [Slot(304)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glPushDebugGroupKHR(int source, uint id, int length, IntPtr message);

        [Slot(63)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glDeleteFencesNV(int n, [CountAttribute(Parameter = "n")] uint* fences);

        [Slot(114)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glFinishFenceNV(uint fence);

        [Slot(134)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGenFencesNV(int n, [OutAttribute, CountAttribute(Parameter = "n")] uint* fences);

        [Slot(152)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetFenceivNV(uint fence, int pname, [OutAttribute, CountAttribute(Computed = "pname")] int* @params);

        [Slot(200)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern byte glIsFenceNV(uint fence);

        [Slot(333)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glSetFenceNV(uint fence, int condition);

        [Slot(339)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern byte glTestFenceNV(uint fence);

        [Slot(0)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glAccumxOES(int op, int value);

        [Slot(4)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glAlphaFuncxOES(int func, int @ref);

        [Slot(6)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glBindFramebufferOES(int target, uint framebuffer);

        [Slot(7)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glBindRenderbufferOES(int target, uint renderbuffer);

        [Slot(9)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glBindVertexArrayOES(uint array);

        [Slot(10)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glBitmapxOES(int width, int height, int xorig, int yorig, int xmove, int ymove, [CountAttribute(Computed = "width,height")] Byte* bitmap);

        [Slot(11)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glBlendColorxOES(int red, int green, int blue, int alpha);

        [Slot(13)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glBlendEquationOES(int mode);

        [Slot(14)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glBlendEquationSeparateOES(int modeRGB, int modeAlpha);

        [Slot(16)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glBlendFuncSeparateOES(int srcRGB, int dstRGB, int srcAlpha, int dstAlpha);

        [Slot(19)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern int glCheckFramebufferStatusOES(int target);

        [Slot(21)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glClearAccumxOES(int red, int green, int blue, int alpha);

        [Slot(24)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glClearColorxOES(int red, int green, int blue, int alpha);

        [Slot(26)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glClearDepthfOES(float depth);

        [Slot(28)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glClearDepthxOES(int depth);

        [Slot(34)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glClipPlanefOES(int plane, [CountAttribute(Count = 4)] float* equation);

        [Slot(37)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glClipPlanexOES(int plane, [CountAttribute(Count = 4)] int* equation);

        [Slot(38)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glColor3xOES(int red, int green, int blue);

        [Slot(39)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glColor3xvOES([CountAttribute(Count = 3)] int* components);

        [Slot(43)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glColor4xOES(int red, int green, int blue, int alpha);

        [Slot(44)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glColor4xvOES([CountAttribute(Count = 4)] int* components);

        [Slot(49)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glConvolutionParameterxOES(int target, int pname, int param);

        [Slot(50)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glConvolutionParameterxvOES(int target, int pname, [CountAttribute(Computed = "pname")] int* @params);

        [Slot(55)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glCurrentPaletteMatrixOES(uint matrixpaletteindex);

        [Slot(64)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glDeleteFramebuffersOES(int n, [CountAttribute(Parameter = "n")] uint* framebuffers);

        [Slot(65)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glDeleteRenderbuffersOES(int n, [CountAttribute(Parameter = "n")] uint* renderbuffers);

        [Slot(68)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glDeleteVertexArraysOES(int n, [CountAttribute(Parameter = "n")] uint* arrays);

        [Slot(72)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glDepthRangefOES(float n, float f);

        [Slot(74)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glDepthRangexOES(int n, int f);

        [Slot(81)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glDrawTexfOES(float x, float y, float z, float width, float height);

        [Slot(82)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glDrawTexfvOES(float* coords);

        [Slot(83)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glDrawTexiOES(int x, int y, int z, int width, int height);

        [Slot(84)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glDrawTexivOES(int* coords);

        [Slot(85)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glDrawTexsOES(short x, short y, short z, short width, short height);

        [Slot(86)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glDrawTexsvOES(short* coords);

        [Slot(87)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glDrawTexxOES(int x, int y, int z, int width, int height);

        [Slot(88)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glDrawTexxvOES(int* coords);

        [Slot(89)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glEGLImageTargetRenderbufferStorageOES(int target, IntPtr image);

        [Slot(90)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glEGLImageTargetTexture2DOES(int target, IntPtr image);

        [Slot(95)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glEvalCoord1xOES(int u);

        [Slot(96)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glEvalCoord1xvOES([CountAttribute(Count = 1)] int* coords);

        [Slot(97)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glEvalCoord2xOES(int u, int v);

        [Slot(98)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glEvalCoord2xvOES([CountAttribute(Count = 2)] int* coords);

        [Slot(111)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glFeedbackBufferxOES(int n, int type, [CountAttribute(Parameter = "n")] int* buffer);

        [Slot(120)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glFogxOES(int pname, int param);

        [Slot(122)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glFogxvOES(int pname, [CountAttribute(Computed = "pname")] int* param);

        [Slot(123)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glFramebufferRenderbufferOES(int target, int attachment, int renderbuffertarget, uint renderbuffer);

        [Slot(126)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glFramebufferTexture2DOES(int target, int attachment, int textarget, uint texture, int level);

        [Slot(129)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glFrustumfOES(float l, float r, float b, float t, float n, float f);

        [Slot(131)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glFrustumxOES(int l, int r, int b, int t, int n, int f);

        [Slot(133)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glGenerateMipmapOES(int target);

        [Slot(135)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGenFramebuffersOES(int n, [OutAttribute, CountAttribute(Parameter = "n")] uint* framebuffers);

        [Slot(136)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGenRenderbuffersOES(int n, [OutAttribute, CountAttribute(Parameter = "n")] uint* renderbuffers);

        [Slot(138)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGenVertexArraysOES(int n, [OutAttribute, CountAttribute(Parameter = "n")] uint* arrays);

        [Slot(141)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glGetBufferPointervOES(int target, int pname, [OutAttribute] IntPtr @params);

        [Slot(143)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetClipPlanefOES(int plane, [OutAttribute, CountAttribute(Count = 4)] float* equation);

        [Slot(145)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetClipPlanexOES(int plane, [OutAttribute, CountAttribute(Count = 4)] int* equation);

        [Slot(146)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetConvolutionParameterxvOES(int target, int pname, [OutAttribute, CountAttribute(Computed = "pname")] int* @params);

        [Slot(154)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetFixedvOES(int pname, [OutAttribute, CountAttribute(Computed = "pname")] int* @params);

        [Slot(156)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetFramebufferAttachmentParameterivOES(int target, int attachment, int pname, [OutAttribute, CountAttribute(Computed = "pname")] int* @params);

        [Slot(158)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetHistogramParameterxvOES(int target, int pname, [OutAttribute, CountAttribute(Computed = "pname")] int* @params);

        [Slot(162)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetLightxOES(int light, int pname, [OutAttribute, CountAttribute(Computed = "pname")] int* @params);

        [Slot(165)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetMapxvOES(int target, int query, [OutAttribute, CountAttribute(Computed = "query")] int* v);

        [Slot(167)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glGetMaterialxOES(int face, int pname, int param);

        [Slot(169)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetMaterialxvOES(int face, int pname, [OutAttribute, CountAttribute(Computed = "pname")] int* @params);

        [Slot(179)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetRenderbufferParameterivOES(int target, int pname, [OutAttribute, CountAttribute(Computed = "pname")] int* @params);

        [Slot(185)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetTexEnvxvOES(int target, int pname, [OutAttribute, CountAttribute(Computed = "pname")] int* @params);

        [Slot(186)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetTexGenfvOES(int coord, int pname, [OutAttribute, CountAttribute(Computed = "pname")] float* @params);

        [Slot(187)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetTexGenivOES(int coord, int pname, [OutAttribute, CountAttribute(Computed = "pname")] int* @params);

        [Slot(188)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetTexGenxvOES(int coord, int pname, [OutAttribute, CountAttribute(Computed = "pname")] int* @params);

        [Slot(189)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetTexLevelParameterxvOES(int target, int level, int pname, [OutAttribute, CountAttribute(Computed = "pname")] int* @params);

        [Slot(193)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetTexParameterxvOES(int target, int pname, [OutAttribute, CountAttribute(Computed = "pname")] int* @params);

        [Slot(195)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glIndexxOES(int component);

        [Slot(196)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glIndexxvOES([CountAttribute(Count = 1)] int* component);

        [Slot(201)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern byte glIsFramebufferOES(uint framebuffer);

        [Slot(202)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern byte glIsRenderbufferOES(uint renderbuffer);

        [Slot(205)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern byte glIsVertexArrayOES(uint array);

        [Slot(211)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glLightModelxOES(int pname, int param);

        [Slot(213)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glLightModelxvOES(int pname, [CountAttribute(Computed = "pname")] int* param);

        [Slot(215)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glLightxOES(int light, int pname, int param);

        [Slot(217)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glLightxvOES(int light, int pname, [CountAttribute(Computed = "pname")] int* @params);

        [Slot(220)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glLineWidthxOES(int width);

        [Slot(224)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glLoadMatrixxOES([CountAttribute(Count = 16)] int* m);

        [Slot(225)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glLoadPaletteFromModelViewMatrixOES();

        [Slot(226)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glLoadTransposeMatrixxOES([CountAttribute(Count = 16)] int* m);

        [Slot(228)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glMap1xOES(int target, int u1, int u2, int stride, int order, int points);

        [Slot(229)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glMap2xOES(int target, int u1, int u2, int ustride, int uorder, int v1, int v2, int vstride, int vorder, int points);

        [Slot(230)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern IntPtr glMapBufferOES(int target, int access);

        [Slot(232)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glMapGrid1xOES(int n, int u1, int u2);

        [Slot(233)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glMapGrid2xOES(int n, int u1, int u2, int v1, int v2);

        [Slot(237)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glMaterialxOES(int face, int pname, int param);

        [Slot(239)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glMaterialxvOES(int face, int pname, [CountAttribute(Computed = "pname")] int* param);

        [Slot(240)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glMatrixIndexPointerOES(int size, int type, int stride, [CountAttribute(Computed = "size,type,stride")] IntPtr pointer);

        [Slot(244)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glMultiTexCoord1bOES(int texture, SByte s);

        [Slot(245)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glMultiTexCoord1bvOES(int texture, [CountAttribute(Count = 1)] SByte* coords);

        [Slot(246)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glMultiTexCoord1xOES(int texture, int s);

        [Slot(247)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glMultiTexCoord1xvOES(int texture, [CountAttribute(Count = 1)] int* coords);

        [Slot(248)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glMultiTexCoord2bOES(int texture, SByte s, SByte t);

        [Slot(249)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glMultiTexCoord2bvOES(int texture, [CountAttribute(Count = 2)] SByte* coords);

        [Slot(250)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glMultiTexCoord2xOES(int texture, int s, int t);

        [Slot(251)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glMultiTexCoord2xvOES(int texture, [CountAttribute(Count = 2)] int* coords);

        [Slot(252)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glMultiTexCoord3bOES(int texture, SByte s, SByte t, SByte r);

        [Slot(253)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glMultiTexCoord3bvOES(int texture, [CountAttribute(Count = 3)] SByte* coords);

        [Slot(254)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glMultiTexCoord3xOES(int texture, int s, int t, int r);

        [Slot(255)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glMultiTexCoord3xvOES(int texture, [CountAttribute(Count = 3)] int* coords);

        [Slot(256)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glMultiTexCoord4bOES(int texture, SByte s, SByte t, SByte r, SByte q);

        [Slot(257)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glMultiTexCoord4bvOES(int texture, [CountAttribute(Count = 4)] SByte* coords);

        [Slot(260)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glMultiTexCoord4xOES(int texture, int s, int t, int r, int q);

        [Slot(261)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glMultiTexCoord4xvOES(int texture, [CountAttribute(Count = 4)] int* coords);

        [Slot(264)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glMultMatrixxOES([CountAttribute(Count = 16)] int* m);

        [Slot(265)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glMultTransposeMatrixxOES([CountAttribute(Count = 16)] int* m);

        [Slot(268)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glNormal3xOES(int nx, int ny, int nz);

        [Slot(269)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glNormal3xvOES([CountAttribute(Count = 3)] int* coords);

        [Slot(276)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glOrthofOES(float l, float r, float b, float t, float n, float f);

        [Slot(278)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glOrthoxOES(int l, int r, int b, int t, int n, int f);

        [Slot(279)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glPassThroughxOES(int token);

        [Slot(283)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glPixelTransferxOES(int pname, int param);

        [Slot(284)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glPixelZoomxOES(int xfactor, int yfactor);

        [Slot(288)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glPointParameterxOES(int pname, int param);

        [Slot(290)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glPointParameterxvOES(int pname, [CountAttribute(Computed = "pname")] int* @params);

        [Slot(292)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glPointSizePointerOES(int type, int stride, [CountAttribute(Computed = "type,stride")] IntPtr pointer);

        [Slot(294)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glPointSizexOES(int size);

        [Slot(297)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glPolygonOffsetxOES(int factor, int units);

        [Slot(302)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glPrioritizeTexturesxOES(int n, [CountAttribute(Parameter = "n")] uint* textures, [CountAttribute(Parameter = "n")] int* priorities);

        [Slot(307)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe int glQueryMatrixxOES([OutAttribute, CountAttribute(Count = 16)] int* mantissa, [OutAttribute, CountAttribute(Count = 16)] int* exponent);

        [Slot(308)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glRasterPos2xOES(int x, int y);

        [Slot(309)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glRasterPos2xvOES([CountAttribute(Count = 2)] int* coords);

        [Slot(310)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glRasterPos3xOES(int x, int y, int z);

        [Slot(311)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glRasterPos3xvOES([CountAttribute(Count = 3)] int* coords);

        [Slot(312)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glRasterPos4xOES(int x, int y, int z, int w);

        [Slot(313)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glRasterPos4xvOES([CountAttribute(Count = 4)] int* coords);

        [Slot(316)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glRectxOES(int x1, int y1, int x2, int y2);

        [Slot(317)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glRectxvOES([CountAttribute(Count = 2)] int* v1, [CountAttribute(Count = 2)] int* v2);

        [Slot(321)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glRenderbufferStorageOES(int target, int internalformat, int width, int height);

        [Slot(325)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glRotatexOES(int angle, int x, int y, int z);

        [Slot(328)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glSampleCoveragexOES(int value, bool invert);

        [Slot(331)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glScalexOES(int x, int y, int z);

        [Slot(340)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glTexCoord1bOES(SByte s);

        [Slot(341)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glTexCoord1bvOES([CountAttribute(Count = 1)] SByte* coords);

        [Slot(342)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glTexCoord1xOES(int s);

        [Slot(343)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glTexCoord1xvOES([CountAttribute(Count = 1)] int* coords);

        [Slot(344)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glTexCoord2bOES(SByte s, SByte t);

        [Slot(345)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glTexCoord2bvOES([CountAttribute(Count = 2)] SByte* coords);

        [Slot(346)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glTexCoord2xOES(int s, int t);

        [Slot(347)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glTexCoord2xvOES([CountAttribute(Count = 2)] int* coords);

        [Slot(348)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glTexCoord3bOES(SByte s, SByte t, SByte r);

        [Slot(349)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glTexCoord3bvOES([CountAttribute(Count = 3)] SByte* coords);

        [Slot(350)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glTexCoord3xOES(int s, int t, int r);

        [Slot(351)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glTexCoord3xvOES([CountAttribute(Count = 3)] int* coords);

        [Slot(352)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glTexCoord4bOES(SByte s, SByte t, SByte r, SByte q);

        [Slot(353)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glTexCoord4bvOES([CountAttribute(Count = 4)] SByte* coords);

        [Slot(354)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glTexCoord4xOES(int s, int t, int r, int q);

        [Slot(355)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glTexCoord4xvOES([CountAttribute(Count = 4)] int* coords);

        [Slot(362)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glTexEnvxOES(int target, int pname, int param);

        [Slot(364)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glTexEnvxvOES(int target, int pname, [CountAttribute(Computed = "pname")] int* @params);

        [Slot(365)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glTexGenfOES(int coord, int pname, float param);

        [Slot(366)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glTexGenfvOES(int coord, int pname, [CountAttribute(Computed = "pname")] float* @params);

        [Slot(367)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glTexGeniOES(int coord, int pname, int param);

        [Slot(368)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glTexGenivOES(int coord, int pname, [CountAttribute(Computed = "pname")] int* @params);

        [Slot(369)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glTexGenxOES(int coord, int pname, int param);

        [Slot(370)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glTexGenxvOES(int coord, int pname, [CountAttribute(Computed = "pname")] int* @params);

        [Slot(377)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glTexParameterxOES(int target, int pname, int param);

        [Slot(379)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glTexParameterxvOES(int target, int pname, [CountAttribute(Computed = "pname")] int* @params);

        [Slot(389)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glTranslatexOES(int x, int y, int z);

        [Slot(390)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern byte glUnmapBufferOES(int target);

        [Slot(391)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glVertex2bOES(SByte x, SByte y);

        [Slot(392)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glVertex2bvOES([CountAttribute(Count = 2)] SByte* coords);

        [Slot(393)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glVertex2xOES(int x);

        [Slot(394)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glVertex2xvOES([CountAttribute(Count = 2)] int* coords);

        [Slot(395)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glVertex3bOES(SByte x, SByte y, SByte z);

        [Slot(396)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glVertex3bvOES([CountAttribute(Count = 3)] SByte* coords);

        [Slot(397)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glVertex3xOES(int x, int y);

        [Slot(398)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glVertex3xvOES([CountAttribute(Count = 3)] int* coords);

        [Slot(399)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glVertex4bOES(SByte x, SByte y, SByte z, SByte w);

        [Slot(400)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glVertex4bvOES([CountAttribute(Count = 4)] SByte* coords);

        [Slot(401)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glVertex4xOES(int x, int y, int z);

        [Slot(402)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glVertex4xvOES([CountAttribute(Count = 4)] int* coords);

        [Slot(406)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glWeightPointerOES(int size, int type, int stride, [CountAttribute(Computed = "type,stride")] IntPtr pointer);

        [Slot(77)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glDisableDriverControlQCOM(uint driverControl);

        [Slot(93)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glEnableDriverControlQCOM(uint driverControl);

        [Slot(94)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glEndTilingQCOM(int preserveMask);

        [Slot(99)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glExtGetBufferPointervQCOM(int target, [OutAttribute] IntPtr @params);

        [Slot(100)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glExtGetBuffersQCOM([OutAttribute, CountAttribute(Parameter = "maxBuffers")] uint* buffers, int maxBuffers, [OutAttribute, CountAttribute(Count = 1)] int* numBuffers);

        [Slot(101)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glExtGetFramebuffersQCOM([OutAttribute, CountAttribute(Parameter = "maxFramebuffers")] uint* framebuffers, int maxFramebuffers, [OutAttribute, CountAttribute(Count = 1)] int* numFramebuffers);

        [Slot(102)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glExtGetProgramBinarySourceQCOM(uint program, int shadertype, [OutAttribute, CountAttribute(Parameter = "*length")] IntPtr source, [OutAttribute] int* length);

        [Slot(103)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glExtGetProgramsQCOM([OutAttribute, CountAttribute(Parameter = "maxPrograms")] uint* programs, int maxPrograms, [OutAttribute, CountAttribute(Count = 1)] int* numPrograms);

        [Slot(104)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glExtGetRenderbuffersQCOM([OutAttribute, CountAttribute(Parameter = "maxRenderbuffers")] uint* renderbuffers, int maxRenderbuffers, [OutAttribute, CountAttribute(Count = 1)] int* numRenderbuffers);

        [Slot(105)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glExtGetShadersQCOM([OutAttribute, CountAttribute(Parameter = "maxShaders")] uint* shaders, int maxShaders, [OutAttribute, CountAttribute(Count = 1)] int* numShaders);

        [Slot(106)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glExtGetTexLevelParameterivQCOM(uint texture, int face, int level, int pname, [OutAttribute] int* @params);

        [Slot(107)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glExtGetTexSubImageQCOM(int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int type, [OutAttribute] IntPtr texels);

        [Slot(108)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glExtGetTexturesQCOM([OutAttribute] uint* textures, int maxTextures, [OutAttribute] int* numTextures);

        [Slot(109)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern byte glExtIsProgramBinaryQCOM(uint program);

        [Slot(110)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glExtTexObjectStateOverrideiQCOM(int target, int pname, int param);

        [Slot(149)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetDriverControlsQCOM([OutAttribute] int* num, int size, [OutAttribute, CountAttribute(Parameter = "size")] uint* driverControls);

        [Slot(150)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetDriverControlStringQCOM(uint driverControl, int bufSize, [OutAttribute] int* length, [OutAttribute, CountAttribute(Parameter = "bufSize")] IntPtr driverControlString);

        [Slot(335)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glStartTilingQCOM(uint x, uint y, uint width, uint height, int preserveMask);
    }
}
